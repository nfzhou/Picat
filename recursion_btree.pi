/*
  The empty tree is represented by the atom nil, and
  a binary tree node is represented as a three-element tuple,
  where the first element is the node value, the second element
  is the left child, and the third element is the right child.
  Here are a few example functions and predicates on binary
  trees written in Picat.
*/
%% to run, type the command
%%     picat recursion_btree
%%

main =>
    A = {0,1,2,3,4,5,6,7,8,9},
    T = array_to_tree(A),
    println(count(T)),
    println(inorder(T)),
    println(cond(bst(T), bst, not_bst)),
    println(findall(P, path(T,P))).

is_btree(nil) => true.
is_btree({_,Left,Right}) => is_btree(Left), is_btree(Right).

count(nil) = 0.
count({_,Left,Right}) = count(Left) + count(Right) + 1.

inorder(Tree) = L =>
    inorder(Tree,L,[]).

inorder(nil,L,Lr) => L = Lr.
inorder({Val,Left,Right},L,Lr) =>
    inorder(Left,L,L1),
    L1 = [Val|L2],
    inorder(Right,L2,Lr).

array_to_tree(Arr) = Tree =>
    array_to_tree(Arr,1,len(Arr),Tree).

array_to_tree(Arr,Low,High,Tree) =>
    if Low > High then
        Tree = nil
    elseif Low == High then
        Tree = {Arr[Low],nil,nil}
    else
        Mid = (Low+High) div 2,
        Tree = {Arr[Mid],Tree1,Tree2},
        array_to_tree(Arr,Low,Mid-1,Tree1),
        array_to_tree(Arr,Mid+1,High,Tree2)
    end.

left_most({Val,nil,_}) = Val.
left_most({_,Left,_}) = left_most(Left).

right_most({Val,_,nil}) = Val.
right_most({_,_,Right}) = right_most(Right).

bst(Tree) => bst(Tree,left_most(Tree),right_most(Tree)).

bst(nil,_,_) => true.
bst({Val,Left,Right},LB,UB) =>
    LB =< Val, Val =< UB,
    bst(Left,LB,Val),
    bst(Right,Val,UB).

path(nil,Path) => Path = [].
path({Val,nil,nil},Path) => Path = [Val].
path({Val,Left,_Right},Path) ?=>   % non-deterministic
    Path = [Val|Path1],
    path(Left,Path1).
path({Val,_Left,Right},Path) =>
    Path = [Val|Path1],
    path(Right,Path1).
