/*
  From Adrian Groza "Modelling Puzzles in First Order Logic"    
  - Puzzle 127. The 12 pentominoes
  based on Hakan Kjellerstrand's model at
      http://hakank.org/picat/polyominos_cp.pi
  by Neng-Fa Zhou, 1/24/2024, updated 1/26/2024
*/

import sat.

main =>
/*
    NRows = 2,
    NCols = 5,
    Types = [i,i],
*/
/*
    NRows = 3,
    NCols = 5,
    Types = [u,x,u],
*/
/*
    NRows = 5,
    NCols = 6,
    Types = [t,w,y,z,i,l],
*/    
    NRows = 3,
    NCols = 20,
    Types = [f,i,l,n,p,t,u,v,w,x,y,z],

    NPents = len(Types),
    M = pentominoes(),
    Shapes = [Shape : Type in Types, Shape = M.get(Type)],
    Board = new_array(NRows,NCols),
    Board :: 0..1,
    sum([Board[Row,Col] : Row in 1..NRows, Col in 1..NCols]) #= 5*NPents,
    PosMatrixes = [new_array(NRows,NCols) :  _ in 1..NPents],
    LUMatrixes = [new_array(NRows,NCols) :  _ in 1..NPents],     % left-upper corner's position
    foreach ({Shape,PosMatrix,LUMatrix} in zip(Shapes,PosMatrixes,LUMatrixes))
        constrain_shape(Shape,PosMatrix,LUMatrix,Board)
    end,
    no_overlap(PosMatrixes),
    solve([LUMatrixes,Board|PosMatrixes]),
    SolBoard = new_array(NRows,NCols),
    I = 1,
    foreach (PosMatrix in PosMatrixes)
        foreach (Row in 1..NRows, Col in 1..NCols)
	    if PosMatrix[Row,Col] = 1 then
	        SolBoard[Row,Col] = I
	    end
	end,
	I := I+1
    end,
    print_matrix(SolBoard).

constrain_shape(Shape,PosMatrix,LUMatrix,Board) =>
    PosMatrix :: 0..1,
    NRows = len(Board),
    NCols = len(Board[1]),
    foreach (Row in 1..NRows, Col in 1..NCols)
        PosMatrix[Row,Col] #=> Board[Row,Col]
    end,
    %
    sum([PosMatrix[Row,Col] : Row in 1..NRows, Col in 1..NCols]) #= 5,   
    %                                       
    LUMatrix :: 0..1,
    sum([LUMatrix[Row,Col] : Row in 1..NRows, Col in 1..NCols]) #= 1,   

    %
    shape_variants(Shape,Variants),
    foreach (Row in 1..NRows, Col in 1..NCols)
        place_variants(PosMatrix,NRows,NCols,Row,Col,Variants,Bs),
        LUMatrix[Row,Col] #=> sum(Bs) #>= 1
    end.

place_variants(PosMatrix,NRows,NCols,Row,Col,[Variant|Variants],Bs) =>
    Bs = [B|BsR],
    place_variant(PosMatrix,NRows,NCols,Row,Col,Variant,B),
    place_variants(PosMatrix,NRows,NCols,Row,Col,Variants,BsR).
place_variants(PosMatrix,NRows,NCols,Row,Col,[],Bs) => Bs = [].

% B = 1 iff this variant is placed at (Row,Col)
place_variant(PosMatrix,NRows,NCols,Row,Col,Variant,B) =>
    Height = len(Variant),
    Width = len(Variant[1]),
    if Row+Height-1 > NRows || Col+Width-1 > NCols then
        B = 0
    else
        B #<=> sum([PosMatrix[Row+DRow-1,Col+DCol-1] #= Variant[DRow,DCol] : DRow in 1..Height, DCol in 1..Width]) #= Height*Width
    end.

shape_variants(Shape0,Variants) =>
    Shape01 = rotate(Shape0),
    Shape02 = rotate(Shape01),
    Shape03 = rotate(Shape02),
    Shape1 = flip_h(Shape0),
    Shape11 = rotate(Shape1),
    Shape12 = rotate(Shape11),
    Shape13 = rotate(Shape12),
    Shape2 = flip_v(Shape0),
    Shape21 = rotate(Shape2),
    Shape22 = rotate(Shape21),
    Shape23 = rotate(Shape22),
    Variants = [Shape0,Shape01,Shape02,Shape03,
                Shape1,Shape11,Shape12,Shape13,
                Shape2,Shape21,Shape22,Shape23].sort_remove_dups().

% rotate the shape clockwise by 90 degree
rotate(M) = M1 =>
    NRows = len(M),
    NCols = len(M[1]),
    M1 = {Vect : Col in NCols..-1..1, Vect = {M[Row,Col] : Row in 1..NRows}}.

% flip the shape horizontally
flip_h(M) = M1 =>
    M1 = reverse(M).
    
% flip the shape vertically
flip_v(M) = M1 =>
    M1 = [reverse(R) : R in M].
    
print_matrix(M) =>
    foreach (Row in M)
       println(Row)
    end.

no_overlap([M|Ms]) =>
    no_overlap(M,Ms),
    no_overlap(Ms).
no_overlap(_) => true.

no_overlap(M,[M1|Ms]) =>
    NRows = len(M),
    NCols = len(M[1]),
    foreach (Row in 1..NRows, Col in 1..NCols)
        #~M[Row,Col] #\/ #~M1[Row,Col]
    end,
    no_overlap(M,Ms).
no_overlap(M,_) => true.

pentominoes() = Map =>

  Map = new_map([
    
   t = {{1,1,1},
        {0,1,0},
        {0,1,0}},
        
   u = {{1,0,1},
        {1,1,1}},
        
   v = {{1,0,0},
        {1,0,0},
        {1,1,1}},

   w = {{1,0,0},
        {1,1,0},
        {0,1,1}},

   x = {{0,1,0},
        {1,1,1},
        {0,1,0}},

   y = {{0,1},
        {1,1},
        {0,1},
        {0,1}},

   z = {{1,1,0},
        {0,1,0},
        {0,1,1}},

   f = {{0,1,1},
        {1,1,0},
        {0,1,0}},

   i = {{1},
        {1},
        {1},
        {1},
        {1}},

   l = {{1,0},
        {1,0},
        {1,0},
        {1,1}},

   p = {{0,1},
        {1,1},
        {1,1}},

   n = {{0,1},
        {0,1},
        {1,1},                                         
        {1,0}}
     ]).
