/*
  From Adrian Groza "Modelling Puzzles in First Order Logic"    
  - Puzzle 127. The 12 pentominoes
  based on Hakan Kjellerstrand's model at: http://hakank.org/picat/polyominos_cp.pi
  by Neng-Fa Zhou, first created on 1/24/2024
*/

import sat.

main =>
/*
    NRows = 2,
    NCols = 5,
    Types = [i,i],
*/
/*
    NRows = 3,
    NCols = 5,
    Types = [u,x,u],
*/
/*
    NRows = 5,
    NCols = 6,
    Types = [t,w,y,z,i,l],
*/
    NRows = 3,
    NCols = 20,
    Types = [f,i,l,n,p,t,u,v,w,x,y,z],
    
    NPents = len(Types),
    M = pentominoes(),
    Pents = [create_pent(Shape,NRows,NCols) : Type in Types, Shape = M.get(Type)],
%    constrain_pents(Pents,NRows,NCols),
    sum([LUPosMatrix[1,1] : {_,_,LUPosMatrix,_} in Pents]) #= 1,   % exactly one piece is located at (1,1)
    foreach (R in 1..NRows, C in 1..NCols)                       
        sum([Frame[R,C] : {_,_,_,Frame} in Pents]) #= 1            % all cells are filled
    end,
    solve(Pents),
    Board = new_array(NRows,NCols),
    foreach ({I,Pent} in zip(1..NPents, Pents))
        fill_pent(Board,NRows,NCols,I,Pent)
    end,
    print_matrix(Board).

create_pent(Shape,NRows,NCols) = {Variants,Orients,LUPosMatrix,Frame} =>
    shape_variants(Shape,Variants),
    NVariants = length(Variants),
    Orients = new_list(NVariants),
    Orients :: 0..1,
    sum(Orients) #= 1,                                    % placed with exactly one orientation
    LUPosMatrix = new_array(NRows,NCols),                 % left-upper corner's position
    LUPosMatrix :: 0..1,
    sum([LUPosMatrix[R,C] : R in 1..NRows, C in 1..NCols]) #= 1,
    Frame = new_array(NRows,NCols),
    Frame :: 0..1,
    sum([Frame[R,C] : R in 1..NRows, C in 1..NCols]) #= 5,   
    foreach ({Variant,Orient} in zip(Variants,Orients))   % do not cross the boundary
        H = len(Variant),
        W = len(Variant[1]),
        foreach (R in 1..NRows, C in 1..NCols)
            if R+H-1 > NRows || C+W-1 > NCols then
                Orient #=> #~LUPosMatrix[R,C]
            else
                foreach (Dr in 1..H, Dc in 1..W)      % image on frame
                   Orient #/\ LUPosMatrix[R,C] #=> Frame[R+Dr-1,C+Dc-1] #= Variant[Dr,Dc]
                end
            end
        end
    end.

% reason about left-upper corner positions, redundant but maybe helpful
constrain_pents([],NRows,NCols) => true.
constrain_pents([Pent|Pents],NRows,NCols) =>
    constrain_pents(Pent,Pents,NRows,NCols),
    constrain_pents(Pents,NRows,NCols).

constrain_pents(Pent1,[],NRows,NCols) => true.
constrain_pents(Pent1,[Pent2|Pents],NRows,NCols) =>
    constrain_2_pents(Pent1,Pent2,NRows,NCols),
    constrain_pents(Pent1,Pents,NRows,NCols).

constrain_2_pents(Pent1,Pent2,NRows,NCols) =>    
    Pent1 = {Variants1,Orients1,LUPosMatrix1,_},
    Pent2 = {Variants2,Orients2,LUPosMatrix2,_},
    foreach ({Variant1,Orient1} in zip(Variants1,Orients1), {Variant2,Orient2} in zip(Variants2,Orients2))
        H1 = len(Variant1),
        W1 = len(Variant1[1]),
        H2 = len(Variant2),
        W2 = len(Variant2[1]),
        foreach (R1 in 1..NRows-H1+1, C1 in 1..NCols-W1+1, R2 in 1..NRows-H2+1, C2 in 1..NCols-W2+1)
            if overlap(Variant1,W1,H1,R1,C1,Variant2,W2,H2,R2,C2) then
                Orient1 #/\ Orient2 #/\ LUPosMatrix1[R1,C1] #=> #~LUPosMatrix2[R2,C2]
            end
        end
    end.
    
% placing Variant1 at (R1,C1) and Variant2 at (R2,C2) results in a conflict
overlap(Variant1,W1,H1,R1,C1,Variant2,W2,H2,R2,C2) =>
    between(max(R1,R2), min(R1+H1-1, R2+H2-1), R),
    between(max(C1,C2), min(C1+W1-1, C2+W2-1), C),
    Variant1[R-R1+1,C-C1+1] == 1,
    Variant2[R-R2+1,C-C2+1] == 1,!.

shape_variants(Shape0,Variants) =>
    Shape01 = rotate(Shape0),
    Shape02 = rotate(Shape01),
    Shape03 = rotate(Shape02),
    Shape1 = flip_h(Shape0),
    Shape11 = rotate(Shape1),
    Shape12 = rotate(Shape11),
    Shape13 = rotate(Shape12),
    Variants = [Shape0,Shape01,Shape02,Shape03,
                Shape1,Shape11,Shape12,Shape13].sort_remove_dups().

% rotate the shape clockwise by 90 degree
rotate(M) = M1 =>
    NRows = len(M),
    NCols = len(M[1]),
    M1 = {Vect : Col in NCols..-1..1, Vect = {M[Row,Col] : Row in 1..NRows}}.

% flip the shape horizontally
flip_h(M) = M1 =>
    M1 = reverse(M).
    
fill_pent(Board,NRows,NCols,Num,{_,_,_,Frame}) =>
    foreach (R in 1..NRows, C in 1..NCols)
        if Frame[R,C] == 1 then
            Board[R,C] = Num
        end
    end.

print_matrix(M) =>
    foreach (Row in M)
       println(Row)
    end.

pentominoes() = Map =>

  Map = new_map([
    
   t = {{1,1,1},
        {0,1,0},
        {0,1,0}},
        
   u = {{1,0,1},
        {1,1,1}},
        
   v = {{1,0,0},
        {1,0,0},
        {1,1,1}},

   w = {{1,0,0},
        {1,1,0},
        {0,1,1}},

   x = {{0,1,0},
        {1,1,1},
        {0,1,0}},

   y = {{0,1},
        {1,1},
        {0,1},
        {0,1}},

   z = {{1,1,0},
        {0,1,0},
        {0,1,1}},

   f = {{0,1,1},
        {1,1,0},
        {0,1,0}},

   i = {{1},
        {1},
        {1},
        {1},
        {1}},

   l = {{1,0},
        {1,0},
        {1,0},
        {1,1}},

   p = {{0,1},
        {1,1},
        {1,1}},

   n = {{0,1},
        {0,1},
        {1,1},                                         
        {1,0}}
     ]).
