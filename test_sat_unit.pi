import sat.

main ?=>
    tests(Ps),
    member(P,Ps),
    println(P),
    (not not call(P) -> true; writeln($'***FAILED'(P))),
    fail.
main => true.


test_negative_arith =>
    [X,Y] :: -10..10,
    X+Y #= Z,
    Sols = solve_all([X,Y,Z]).sort(),
    println(Sols).
    
test_acyclic =>
    A = new_array(3,3),
    A :: 0..1,
    A[1,1] = 1,
    A[3,3] = 1,
    A[2,2] = 0,
    NRows = len(A),
    NCols = len(A[1]),
    Vs = [{(R,C), A[R,C]} : 
                R in 1..NRows, 
                C in 1..NCols],
    Es = [{(R,C), (R1,C1), _} : 
                R in 1..NRows, 
                C in 1..NCols,
                (R1,C1) in neibs(A,NRows,NCols,R,C)],
    sum([B : {_,_,B} in Es]) #= 8,
    acyclic(Vs,Es),
    Sols = solve_all((Vs,Es)).sort(),
    foreach (G in Sols)
        visualize_grid(NRows,NCols,G),nl,nl
    end.

test_acyclic_d =>
    A = new_array(2,2),
    A :: 0..1,
    A[1,1] = 1,
    A[2,2] = 1,
    NRows = len(A),
    NCols = len(A[1]),
    Vs = [{(R,C), A[R,C]} : 
                R in 1..NRows, 
                C in 1..NCols],
    Es = [{(R,C), (R1,C1), _} : 
                R in 1..NRows, 
                C in 1..NCols,
                (R1,C1) in neibs(A,NRows,NCols,R,C)],
    acyclic_d(Vs,Es),
    Sols = solve_all((Vs,Es)).sort(),
    foreach (G in Sols)
        visualize_grid(NRows,NCols,G),nl,nl
    end.
    
test_scc_d0 =>
    A = new_array(2,2),
    A :: 0..1,
    NRows = len(A),
    NCols = len(A[1]),
    Vs = [{(R,C), A[R,C]} : 
                R in 1..NRows, 
                C in 1..NCols],
    Es = [{(R,C), (R1,C1), _} : 
                R in 1..NRows, 
                C in 1..NCols,
                (R1,C1) in neibs(A,NRows,NCols,R,C)],
    scc_d(Vs,Es),
    Sols = solve_all((Vs,Es)).sort(),

%    member(([{(1,1),1}, {(1,2),1}, {(2,1),1}, {(2,2),1}], [{(1,1),(1,2),_1}, {(1,2),(2,2),_1}, {(2,2),(2,1),_1}, {(2,1),(1,1),_1}]), Sols),
    foreach (G in Sols)
        visualize_grid(NRows,NCols,G),nl,nl
    end,
    writeln(len(Sols)).

test_acyclic_d1 =>
    Vs = [{a,1},{b,1},{c,1}],
    Es = [{a,b,_}, {b,a,_}, {a,c,_}, {c,a,_}, {b,c,_}, {c,b,_}],
    acyclic_d(Vs,Es),
    Sols = solve_all((Vs,Es)).sort(),
    writeln(len(Sols)).


test_scc_d =>
    A = new_array(3,3),
    A :: 0..1,
    A[1,1] = 1,
    A[3,3] = 1,
    A[2,2] = 0,
    NRows = len(A),
    NCols = len(A[1]),
    Vs = [{(R,C), A[R,C]} : 
                R in 1..NRows, 
                C in 1..NCols],
    Es = [{(R,C), (R1,C1), _} : 
                R in 1..NRows, 
                C in 1..NCols,
                (R1,C1) in neibs(A,NRows,NCols,R,C)],
    scc_d(Vs,Es),
    Sols = solve_all((Vs,Es)).sort(),
    foreach (G in Sols)
        visualize_grid(NRows,NCols,G),nl,nl
    end,
    writeln(len(Sols)).

test_scc_ud =>
    A = new_array(3,3),
    A :: 0..1,
    A[1,1] = 1,
    A[3,3] = 1,
    A[2,2] = 0,
    NRows = len(A),
    NCols = len(A[1]),
    Vs = [{(R,C), A[R,C]} : 
                R in 1..NRows, 
                C in 1..NCols],
    Es = [{(R,C), (R1,C1), _} : 
                R in 1..NRows, 
                C in 1..NCols,
                (R1,C1) in neibs(A,NRows,NCols,R,C)],
    scc(Vs,Es),
    Sols = solve_all((Vs,Es)).sort(),
    foreach (G in Sols)
        visualize_grid(NRows,NCols,G),nl,nl
    end,
    writeln(len(Sols)).
    
test_path =>
    A = new_array(4,4),
    A :: 0..1,
    A[1,1] = 1,
    A[3,3] = 1,
    A[2,2] = 1,
    NRows = len(A),
    NCols = len(A[1]),
    Vs = [{(R,C), A[R,C]} : 
                R in 1..NRows, 
                C in 1..NCols],
    Es = [{(R,C), (R1,C1), _} : 
                R in 1..NRows, 
                C in 1..NCols,
                (R1,C1) in neibs(A,NRows,NCols,R,C)],
    path(Vs,Es,(1,1), (3,3)),
    Sols = solve_all((Vs,Es)).sort(),
    foreach (G in Sols)
        visualize_grid(NRows,NCols,G),nl,nl
    end,
    writeln(len(Sols)).

test_path_d =>
    A = new_array(4,4),
    A :: 0..1,
    A[1,1] = 1,
    A[3,3] = 1,
    A[2,2] = 1,
    NRows = len(A),
    NCols = len(A[1]),
    Vs = [{(R,C), A[R,C]} : 
                R in 1..NRows, 
                C in 1..NCols],
    Es = [{(R,C), (R1,C1), _} : 
                R in 1..NRows, 
                C in 1..NCols,
                (R1,C1) in neibs(A,NRows,NCols,R,C)],
    path_d(Vs,Es,(1,1), (3,3)),
    Sols = solve_all((Vs,Es)).sort(),
    foreach (G in Sols)
        visualize_grid(NRows,NCols,G),nl,nl
    end,
    writeln(len(Sols)).
                    
test_value_precede =>
    L = new_list(4),
    L :: 0..3,
    value_precede(0,3,L),
    Sols = solve_all(L).sort(),
    println(Sols).    
    
test_regular_1 =>
    M = {{3,2},
         {0,4},
         {0,2},
         {3,5},
         {3,0}},
    L = [_S1,_S2,_S3,_S4],
    regular(L,5,2,M,1,{3,4,5}),
    Sols = solve_all(L).sort(),
    Sols = [[1,2,2,1],[1,2,2,2],[2,2,2,1]].

test_regular_2 =>
    M = {{[1,2],1},
         {1,3},
         {1,4},
         {1,1}},
    L = [_S1,_S2,_S3,_S4,_S5,_S6],
    regular(L,4,2,M,1,{4}),
    Sols = solve_all(L).sort(),
    Sols = [[1,1,1,1,2,2],[1,1,2,1,2,2],[1,2,1,1,2,2],[1,2,2,1,2,2],[2,1,1,1,2,2],[2,1,2,1,2,2],[2,2,1,1,2,2],[2,2,2,1,2,2]].

test_regular_22 =>
    M = {{2,1},
         {2,3},
         {2,4},
         {2,1}},
    L = [_S1,_S2,_S3,_S4,_S5,_S6],
    regular(L,4,2,M,1,{4}),
    Sols = solve_all(L).sort(),
    println(Sols),
    Sols = [[1,1,1,1,2,2],[1,1,2,1,2,2],[1,2,1,1,2,2],[1,2,2,1,2,2],[2,1,1,1,2,2],[2,1,2,1,2,2],[2,2,1,1,2,2],[2,2,2,1,2,2]].
    
test_regular_3 =>
    M = {{[2,4],5},
         {[4,6],[1,3,5]},
         {[2,6],5},
         {[2,8],[1,5,7]},
         {[2,4,6,8],[1,3,7,9]},
         {[2,8],[3,5,9]},
         {[4,8],5},
         {[4,6],[5,7,9]},
         {[6,8],5}},
    L = new_list(5),
    regular(L,9,2,M,1,[9]),
    Sols = solve_all(L).sort(),
    Sols = [[1,1,1,1,2],[1,1,1,2,2],[1,1,2,1,2],[1,1,2,2,2],[1,2,1,1,2],[1,2,1,2,2],[1,2,2,1,2],[1,2,2,2,2],[2,1,1,1,2],[2,1,1,2,2],[2,1,2,1,2],[2,1,2,2,2],[2,2,1,1,2],[2,2,1,2,2],[2,2,2,1,2]].
    
test_lex_le =>
    Vs = [W,X,Y,Z],
    Vs :: 0..1,
    lex_le([W], [X,Y,Z]),
    Sols = solve_all(Vs).sort(),
    println(Sols),
    Sols = [[0,0,0,0],[0,0,0,1],[0,0,1,0],[0,0,1,1],[0,1,0,0],[0,1,0,1],[0,1,1,0],[0,1,1,1],[1,1,0,0],[1,1,0,1],[1,1,1,0],[1,1,1,1]].
        
test_eq_or_and =>
    Vs = [W,X,Y,Z],
    Vs :: 0..1,
    W #<=> X #\/ (Y #/\ Z),
    Sols = solve_all(Vs).sort(),
    Sols = [[0,0,0,0],[0,0,0,1],[0,0,1,0],[1,0,1,1],[1,1,0,0],[1,1,0,1],[1,1,1,0],[1,1,1,1]].
    
test_global_cardinality =>
    L = [_,_,_,_,_],
    L :: -1..1,
    global_cardinality(L,$[(-1-X1),(0-X0),(1-X2)]),
    Sols = solve_all([X1,X0,X2|L]).sort(),
    Sols = [[0,0,5,1,1,1,1,1],[0,1,4,0,1,1,1,1],[0,1,4,1,0,1,1,1],[0,1,4,1,1,0,1,1],[0,1,4,1,1,1,0,1],[0,1,4,1,1,1,1,0],[0,2,3,0,0,1,1,1],[0,2,3,0,1,0,1,1],[0,2,3,0,1,1,0,1],[0,2,3,0,1,1,1,0],[0,2,3,1,0,0,1,1],[0,2,3,1,0,1,0,1],[0,2,3,1,0,1,1,0],[0,2,3,1,1,0,0,1],[0,2,3,1,1,0,1,0],[0,2,3,1,1,1,0,0],[0,3,2,0,0,0,1,1],[0,3,2,0,0,1,0,1],[0,3,2,0,0,1,1,0],[0,3,2,0,1,0,0,1],[0,3,2,0,1,0,1,0],[0,3,2,0,1,1,0,0],[0,3,2,1,0,0,0,1],[0,3,2,1,0,0,1,0],[0,3,2,1,0,1,0,0],[0,3,2,1,1,0,0,0],[0,4,1,0,0,0,0,1],[0,4,1,0,0,0,1,0],[0,4,1,0,0,1,0,0],[0,4,1,0,1,0,0,0],[0,4,1,1,0,0,0,0],[0,5,0,0,0,0,0,0],[1,0,4,-1,1,1,1,1],[1,0,4,1,-1,1,1,1],[1,0,4,1,1,-1,1,1],[1,0,4,1,1,1,-1,1],[1,0,4,1,1,1,1,-1],[1,1,3,-1,0,1,1,1],[1,1,3,-1,1,0,1,1],[1,1,3,-1,1,1,0,1],[1,1,3,-1,1,1,1,0],[1,1,3,0,-1,1,1,1],[1,1,3,0,1,-1,1,1],[1,1,3,0,1,1,-1,1],[1,1,3,0,1,1,1,-1],[1,1,3,1,-1,0,1,1],[1,1,3,1,-1,1,0,1],[1,1,3,1,-1,1,1,0],[1,1,3,1,0,-1,1,1],[1,1,3,1,0,1,-1,1],[1,1,3,1,0,1,1,-1],[1,1,3,1,1,-1,0,1],[1,1,3,1,1,-1,1,0],[1,1,3,1,1,0,-1,1],[1,1,3,1,1,0,1,-1],[1,1,3,1,1,1,-1,0],[1,1,3,1,1,1,0,-1],[1,2,2,-1,0,0,1,1],[1,2,2,-1,0,1,0,1],[1,2,2,-1,0,1,1,0],[1,2,2,-1,1,0,0,1],[1,2,2,-1,1,0,1,0],[1,2,2,-1,1,1,0,0],[1,2,2,0,-1,0,1,1],[1,2,2,0,-1,1,0,1],[1,2,2,0,-1,1,1,0],[1,2,2,0,0,-1,1,1],[1,2,2,0,0,1,-1,1],[1,2,2,0,0,1,1,-1],[1,2,2,0,1,-1,0,1],[1,2,2,0,1,-1,1,0],[1,2,2,0,1,0,-1,1],[1,2,2,0,1,0,1,-1],[1,2,2,0,1,1,-1,0],[1,2,2,0,1,1,0,-1],[1,2,2,1,-1,0,0,1],[1,2,2,1,-1,0,1,0],[1,2,2,1,-1,1,0,0],[1,2,2,1,0,-1,0,1],[1,2,2,1,0,-1,1,0],[1,2,2,1,0,0,-1,1],[1,2,2,1,0,0,1,-1],[1,2,2,1,0,1,-1,0],[1,2,2,1,0,1,0,-1],[1,2,2,1,1,-1,0,0],[1,2,2,1,1,0,-1,0],[1,2,2,1,1,0,0,-1],[1,3,1,-1,0,0,0,1],[1,3,1,-1,0,0,1,0],[1,3,1,-1,0,1,0,0],[1,3,1,-1,1,0,0,0],[1,3,1,0,-1,0,0,1],[1,3,1,0,-1,0,1,0],[1,3,1,0,-1,1,0,0],[1,3,1,0,0,-1,0,1],[1,3,1,0,0,-1,1,0],[1,3,1,0,0,0,-1,1],[1,3,1,0,0,0,1,-1],[1,3,1,0,0,1,-1,0],[1,3,1,0,0,1,0,-1],[1,3,1,0,1,-1,0,0],[1,3,1,0,1,0,-1,0],[1,3,1,0,1,0,0,-1],[1,3,1,1,-1,0,0,0],[1,3,1,1,0,-1,0,0],[1,3,1,1,0,0,-1,0],[1,3,1,1,0,0,0,-1],[1,4,0,-1,0,0,0,0],[1,4,0,0,-1,0,0,0],[1,4,0,0,0,-1,0,0],[1,4,0,0,0,0,-1,0],[1,4,0,0,0,0,0,-1],[2,0,3,-1,-1,1,1,1],[2,0,3,-1,1,-1,1,1],[2,0,3,-1,1,1,-1,1],[2,0,3,-1,1,1,1,-1],[2,0,3,1,-1,-1,1,1],[2,0,3,1,-1,1,-1,1],[2,0,3,1,-1,1,1,-1],[2,0,3,1,1,-1,-1,1],[2,0,3,1,1,-1,1,-1],[2,0,3,1,1,1,-1,-1],[2,1,2,-1,-1,0,1,1],[2,1,2,-1,-1,1,0,1],[2,1,2,-1,-1,1,1,0],[2,1,2,-1,0,-1,1,1],[2,1,2,-1,0,1,-1,1],[2,1,2,-1,0,1,1,-1],[2,1,2,-1,1,-1,0,1],[2,1,2,-1,1,-1,1,0],[2,1,2,-1,1,0,-1,1],[2,1,2,-1,1,0,1,-1],[2,1,2,-1,1,1,-1,0],[2,1,2,-1,1,1,0,-1],[2,1,2,0,-1,-1,1,1],[2,1,2,0,-1,1,-1,1],[2,1,2,0,-1,1,1,-1],[2,1,2,0,1,-1,-1,1],[2,1,2,0,1,-1,1,-1],[2,1,2,0,1,1,-1,-1],[2,1,2,1,-1,-1,0,1],[2,1,2,1,-1,-1,1,0],[2,1,2,1,-1,0,-1,1],[2,1,2,1,-1,0,1,-1],[2,1,2,1,-1,1,-1,0],[2,1,2,1,-1,1,0,-1],[2,1,2,1,0,-1,-1,1],[2,1,2,1,0,-1,1,-1],[2,1,2,1,0,1,-1,-1],[2,1,2,1,1,-1,-1,0],[2,1,2,1,1,-1,0,-1],[2,1,2,1,1,0,-1,-1],[2,2,1,-1,-1,0,0,1],[2,2,1,-1,-1,0,1,0],[2,2,1,-1,-1,1,0,0],[2,2,1,-1,0,-1,0,1],[2,2,1,-1,0,-1,1,0],[2,2,1,-1,0,0,-1,1],[2,2,1,-1,0,0,1,-1],[2,2,1,-1,0,1,-1,0],[2,2,1,-1,0,1,0,-1],[2,2,1,-1,1,-1,0,0],[2,2,1,-1,1,0,-1,0],[2,2,1,-1,1,0,0,-1],[2,2,1,0,-1,-1,0,1],[2,2,1,0,-1,-1,1,0],[2,2,1,0,-1,0,-1,1],[2,2,1,0,-1,0,1,-1],[2,2,1,0,-1,1,-1,0],[2,2,1,0,-1,1,0,-1],[2,2,1,0,0,-1,-1,1],[2,2,1,0,0,-1,1,-1],[2,2,1,0,0,1,-1,-1],[2,2,1,0,1,-1,-1,0],[2,2,1,0,1,-1,0,-1],[2,2,1,0,1,0,-1,-1],[2,2,1,1,-1,-1,0,0],[2,2,1,1,-1,0,-1,0],[2,2,1,1,-1,0,0,-1],[2,2,1,1,0,-1,-1,0],[2,2,1,1,0,-1,0,-1],[2,2,1,1,0,0,-1,-1],[2,3,0,-1,-1,0,0,0],[2,3,0,-1,0,-1,0,0],[2,3,0,-1,0,0,-1,0],[2,3,0,-1,0,0,0,-1],[2,3,0,0,-1,-1,0,0],[2,3,0,0,-1,0,-1,0],[2,3,0,0,-1,0,0,-1],[2,3,0,0,0,-1,-1,0],[2,3,0,0,0,-1,0,-1],[2,3,0,0,0,0,-1,-1],[3,0,2,-1,-1,-1,1,1],[3,0,2,-1,-1,1,-1,1],[3,0,2,-1,-1,1,1,-1],[3,0,2,-1,1,-1,-1,1],[3,0,2,-1,1,-1,1,-1],[3,0,2,-1,1,1,-1,-1],[3,0,2,1,-1,-1,-1,1],[3,0,2,1,-1,-1,1,-1],[3,0,2,1,-1,1,-1,-1],[3,0,2,1,1,-1,-1,-1],[3,1,1,-1,-1,-1,0,1],[3,1,1,-1,-1,-1,1,0],[3,1,1,-1,-1,0,-1,1],[3,1,1,-1,-1,0,1,-1],[3,1,1,-1,-1,1,-1,0],[3,1,1,-1,-1,1,0,-1],[3,1,1,-1,0,-1,-1,1],[3,1,1,-1,0,-1,1,-1],[3,1,1,-1,0,1,-1,-1],[3,1,1,-1,1,-1,-1,0],[3,1,1,-1,1,-1,0,-1],[3,1,1,-1,1,0,-1,-1],[3,1,1,0,-1,-1,-1,1],[3,1,1,0,-1,-1,1,-1],[3,1,1,0,-1,1,-1,-1],[3,1,1,0,1,-1,-1,-1],[3,1,1,1,-1,-1,-1,0],[3,1,1,1,-1,-1,0,-1],[3,1,1,1,-1,0,-1,-1],[3,1,1,1,0,-1,-1,-1],[3,2,0,-1,-1,-1,0,0],[3,2,0,-1,-1,0,-1,0],[3,2,0,-1,-1,0,0,-1],[3,2,0,-1,0,-1,-1,0],[3,2,0,-1,0,-1,0,-1],[3,2,0,-1,0,0,-1,-1],[3,2,0,0,-1,-1,-1,0],[3,2,0,0,-1,-1,0,-1],[3,2,0,0,-1,0,-1,-1],[3,2,0,0,0,-1,-1,-1],[4,0,1,-1,-1,-1,-1,1],[4,0,1,-1,-1,-1,1,-1],[4,0,1,-1,-1,1,-1,-1],[4,0,1,-1,1,-1,-1,-1],[4,0,1,1,-1,-1,-1,-1],[4,1,0,-1,-1,-1,-1,0],[4,1,0,-1,-1,-1,0,-1],[4,1,0,-1,-1,0,-1,-1],[4,1,0,-1,0,-1,-1,-1],[4,1,0,0,-1,-1,-1,-1],[5,0,0,-1,-1,-1,-1,-1]].

test_global_cardinality1 =>
    L = [_,_,_,_,_],
    L :: -1..1,
    global_cardinality(L,[-1,0,1],[X1,X0,X2]),
    Sols = solve_all([X1,X0,X2|L]).sort(),
    Sols = [[0,0,5,1,1,1,1,1],[0,1,4,0,1,1,1,1],[0,1,4,1,0,1,1,1],[0,1,4,1,1,0,1,1],[0,1,4,1,1,1,0,1],[0,1,4,1,1,1,1,0],[0,2,3,0,0,1,1,1],[0,2,3,0,1,0,1,1],[0,2,3,0,1,1,0,1],[0,2,3,0,1,1,1,0],[0,2,3,1,0,0,1,1],[0,2,3,1,0,1,0,1],[0,2,3,1,0,1,1,0],[0,2,3,1,1,0,0,1],[0,2,3,1,1,0,1,0],[0,2,3,1,1,1,0,0],[0,3,2,0,0,0,1,1],[0,3,2,0,0,1,0,1],[0,3,2,0,0,1,1,0],[0,3,2,0,1,0,0,1],[0,3,2,0,1,0,1,0],[0,3,2,0,1,1,0,0],[0,3,2,1,0,0,0,1],[0,3,2,1,0,0,1,0],[0,3,2,1,0,1,0,0],[0,3,2,1,1,0,0,0],[0,4,1,0,0,0,0,1],[0,4,1,0,0,0,1,0],[0,4,1,0,0,1,0,0],[0,4,1,0,1,0,0,0],[0,4,1,1,0,0,0,0],[0,5,0,0,0,0,0,0],[1,0,4,-1,1,1,1,1],[1,0,4,1,-1,1,1,1],[1,0,4,1,1,-1,1,1],[1,0,4,1,1,1,-1,1],[1,0,4,1,1,1,1,-1],[1,1,3,-1,0,1,1,1],[1,1,3,-1,1,0,1,1],[1,1,3,-1,1,1,0,1],[1,1,3,-1,1,1,1,0],[1,1,3,0,-1,1,1,1],[1,1,3,0,1,-1,1,1],[1,1,3,0,1,1,-1,1],[1,1,3,0,1,1,1,-1],[1,1,3,1,-1,0,1,1],[1,1,3,1,-1,1,0,1],[1,1,3,1,-1,1,1,0],[1,1,3,1,0,-1,1,1],[1,1,3,1,0,1,-1,1],[1,1,3,1,0,1,1,-1],[1,1,3,1,1,-1,0,1],[1,1,3,1,1,-1,1,0],[1,1,3,1,1,0,-1,1],[1,1,3,1,1,0,1,-1],[1,1,3,1,1,1,-1,0],[1,1,3,1,1,1,0,-1],[1,2,2,-1,0,0,1,1],[1,2,2,-1,0,1,0,1],[1,2,2,-1,0,1,1,0],[1,2,2,-1,1,0,0,1],[1,2,2,-1,1,0,1,0],[1,2,2,-1,1,1,0,0],[1,2,2,0,-1,0,1,1],[1,2,2,0,-1,1,0,1],[1,2,2,0,-1,1,1,0],[1,2,2,0,0,-1,1,1],[1,2,2,0,0,1,-1,1],[1,2,2,0,0,1,1,-1],[1,2,2,0,1,-1,0,1],[1,2,2,0,1,-1,1,0],[1,2,2,0,1,0,-1,1],[1,2,2,0,1,0,1,-1],[1,2,2,0,1,1,-1,0],[1,2,2,0,1,1,0,-1],[1,2,2,1,-1,0,0,1],[1,2,2,1,-1,0,1,0],[1,2,2,1,-1,1,0,0],[1,2,2,1,0,-1,0,1],[1,2,2,1,0,-1,1,0],[1,2,2,1,0,0,-1,1],[1,2,2,1,0,0,1,-1],[1,2,2,1,0,1,-1,0],[1,2,2,1,0,1,0,-1],[1,2,2,1,1,-1,0,0],[1,2,2,1,1,0,-1,0],[1,2,2,1,1,0,0,-1],[1,3,1,-1,0,0,0,1],[1,3,1,-1,0,0,1,0],[1,3,1,-1,0,1,0,0],[1,3,1,-1,1,0,0,0],[1,3,1,0,-1,0,0,1],[1,3,1,0,-1,0,1,0],[1,3,1,0,-1,1,0,0],[1,3,1,0,0,-1,0,1],[1,3,1,0,0,-1,1,0],[1,3,1,0,0,0,-1,1],[1,3,1,0,0,0,1,-1],[1,3,1,0,0,1,-1,0],[1,3,1,0,0,1,0,-1],[1,3,1,0,1,-1,0,0],[1,3,1,0,1,0,-1,0],[1,3,1,0,1,0,0,-1],[1,3,1,1,-1,0,0,0],[1,3,1,1,0,-1,0,0],[1,3,1,1,0,0,-1,0],[1,3,1,1,0,0,0,-1],[1,4,0,-1,0,0,0,0],[1,4,0,0,-1,0,0,0],[1,4,0,0,0,-1,0,0],[1,4,0,0,0,0,-1,0],[1,4,0,0,0,0,0,-1],[2,0,3,-1,-1,1,1,1],[2,0,3,-1,1,-1,1,1],[2,0,3,-1,1,1,-1,1],[2,0,3,-1,1,1,1,-1],[2,0,3,1,-1,-1,1,1],[2,0,3,1,-1,1,-1,1],[2,0,3,1,-1,1,1,-1],[2,0,3,1,1,-1,-1,1],[2,0,3,1,1,-1,1,-1],[2,0,3,1,1,1,-1,-1],[2,1,2,-1,-1,0,1,1],[2,1,2,-1,-1,1,0,1],[2,1,2,-1,-1,1,1,0],[2,1,2,-1,0,-1,1,1],[2,1,2,-1,0,1,-1,1],[2,1,2,-1,0,1,1,-1],[2,1,2,-1,1,-1,0,1],[2,1,2,-1,1,-1,1,0],[2,1,2,-1,1,0,-1,1],[2,1,2,-1,1,0,1,-1],[2,1,2,-1,1,1,-1,0],[2,1,2,-1,1,1,0,-1],[2,1,2,0,-1,-1,1,1],[2,1,2,0,-1,1,-1,1],[2,1,2,0,-1,1,1,-1],[2,1,2,0,1,-1,-1,1],[2,1,2,0,1,-1,1,-1],[2,1,2,0,1,1,-1,-1],[2,1,2,1,-1,-1,0,1],[2,1,2,1,-1,-1,1,0],[2,1,2,1,-1,0,-1,1],[2,1,2,1,-1,0,1,-1],[2,1,2,1,-1,1,-1,0],[2,1,2,1,-1,1,0,-1],[2,1,2,1,0,-1,-1,1],[2,1,2,1,0,-1,1,-1],[2,1,2,1,0,1,-1,-1],[2,1,2,1,1,-1,-1,0],[2,1,2,1,1,-1,0,-1],[2,1,2,1,1,0,-1,-1],[2,2,1,-1,-1,0,0,1],[2,2,1,-1,-1,0,1,0],[2,2,1,-1,-1,1,0,0],[2,2,1,-1,0,-1,0,1],[2,2,1,-1,0,-1,1,0],[2,2,1,-1,0,0,-1,1],[2,2,1,-1,0,0,1,-1],[2,2,1,-1,0,1,-1,0],[2,2,1,-1,0,1,0,-1],[2,2,1,-1,1,-1,0,0],[2,2,1,-1,1,0,-1,0],[2,2,1,-1,1,0,0,-1],[2,2,1,0,-1,-1,0,1],[2,2,1,0,-1,-1,1,0],[2,2,1,0,-1,0,-1,1],[2,2,1,0,-1,0,1,-1],[2,2,1,0,-1,1,-1,0],[2,2,1,0,-1,1,0,-1],[2,2,1,0,0,-1,-1,1],[2,2,1,0,0,-1,1,-1],[2,2,1,0,0,1,-1,-1],[2,2,1,0,1,-1,-1,0],[2,2,1,0,1,-1,0,-1],[2,2,1,0,1,0,-1,-1],[2,2,1,1,-1,-1,0,0],[2,2,1,1,-1,0,-1,0],[2,2,1,1,-1,0,0,-1],[2,2,1,1,0,-1,-1,0],[2,2,1,1,0,-1,0,-1],[2,2,1,1,0,0,-1,-1],[2,3,0,-1,-1,0,0,0],[2,3,0,-1,0,-1,0,0],[2,3,0,-1,0,0,-1,0],[2,3,0,-1,0,0,0,-1],[2,3,0,0,-1,-1,0,0],[2,3,0,0,-1,0,-1,0],[2,3,0,0,-1,0,0,-1],[2,3,0,0,0,-1,-1,0],[2,3,0,0,0,-1,0,-1],[2,3,0,0,0,0,-1,-1],[3,0,2,-1,-1,-1,1,1],[3,0,2,-1,-1,1,-1,1],[3,0,2,-1,-1,1,1,-1],[3,0,2,-1,1,-1,-1,1],[3,0,2,-1,1,-1,1,-1],[3,0,2,-1,1,1,-1,-1],[3,0,2,1,-1,-1,-1,1],[3,0,2,1,-1,-1,1,-1],[3,0,2,1,-1,1,-1,-1],[3,0,2,1,1,-1,-1,-1],[3,1,1,-1,-1,-1,0,1],[3,1,1,-1,-1,-1,1,0],[3,1,1,-1,-1,0,-1,1],[3,1,1,-1,-1,0,1,-1],[3,1,1,-1,-1,1,-1,0],[3,1,1,-1,-1,1,0,-1],[3,1,1,-1,0,-1,-1,1],[3,1,1,-1,0,-1,1,-1],[3,1,1,-1,0,1,-1,-1],[3,1,1,-1,1,-1,-1,0],[3,1,1,-1,1,-1,0,-1],[3,1,1,-1,1,0,-1,-1],[3,1,1,0,-1,-1,-1,1],[3,1,1,0,-1,-1,1,-1],[3,1,1,0,-1,1,-1,-1],[3,1,1,0,1,-1,-1,-1],[3,1,1,1,-1,-1,-1,0],[3,1,1,1,-1,-1,0,-1],[3,1,1,1,-1,0,-1,-1],[3,1,1,1,0,-1,-1,-1],[3,2,0,-1,-1,-1,0,0],[3,2,0,-1,-1,0,-1,0],[3,2,0,-1,-1,0,0,-1],[3,2,0,-1,0,-1,-1,0],[3,2,0,-1,0,-1,0,-1],[3,2,0,-1,0,0,-1,-1],[3,2,0,0,-1,-1,-1,0],[3,2,0,0,-1,-1,0,-1],[3,2,0,0,-1,0,-1,-1],[3,2,0,0,0,-1,-1,-1],[4,0,1,-1,-1,-1,-1,1],[4,0,1,-1,-1,-1,1,-1],[4,0,1,-1,-1,1,-1,-1],[4,0,1,-1,1,-1,-1,-1],[4,0,1,1,-1,-1,-1,-1],[4,1,0,-1,-1,-1,-1,0],[4,1,0,-1,-1,-1,0,-1],[4,1,0,-1,-1,0,-1,-1],[4,1,0,-1,0,-1,-1,-1],[4,1,0,0,-1,-1,-1,-1],[5,0,0,-1,-1,-1,-1,-1]].

test_global_cardinality2 =>
    L = [_,_,_,_,_],
    L :: -1..1,
    global_cardinality_closed(L,[-1,0,1],[X1,X0,X2]),
    Sols = solve_all([X1,X0,X2|L]).sort(),
    Sols = [[0,0,5,1,1,1,1,1],[0,1,4,0,1,1,1,1],[0,1,4,1,0,1,1,1],[0,1,4,1,1,0,1,1],[0,1,4,1,1,1,0,1],[0,1,4,1,1,1,1,0],[0,2,3,0,0,1,1,1],[0,2,3,0,1,0,1,1],[0,2,3,0,1,1,0,1],[0,2,3,0,1,1,1,0],[0,2,3,1,0,0,1,1],[0,2,3,1,0,1,0,1],[0,2,3,1,0,1,1,0],[0,2,3,1,1,0,0,1],[0,2,3,1,1,0,1,0],[0,2,3,1,1,1,0,0],[0,3,2,0,0,0,1,1],[0,3,2,0,0,1,0,1],[0,3,2,0,0,1,1,0],[0,3,2,0,1,0,0,1],[0,3,2,0,1,0,1,0],[0,3,2,0,1,1,0,0],[0,3,2,1,0,0,0,1],[0,3,2,1,0,0,1,0],[0,3,2,1,0,1,0,0],[0,3,2,1,1,0,0,0],[0,4,1,0,0,0,0,1],[0,4,1,0,0,0,1,0],[0,4,1,0,0,1,0,0],[0,4,1,0,1,0,0,0],[0,4,1,1,0,0,0,0],[0,5,0,0,0,0,0,0],[1,0,4,-1,1,1,1,1],[1,0,4,1,-1,1,1,1],[1,0,4,1,1,-1,1,1],[1,0,4,1,1,1,-1,1],[1,0,4,1,1,1,1,-1],[1,1,3,-1,0,1,1,1],[1,1,3,-1,1,0,1,1],[1,1,3,-1,1,1,0,1],[1,1,3,-1,1,1,1,0],[1,1,3,0,-1,1,1,1],[1,1,3,0,1,-1,1,1],[1,1,3,0,1,1,-1,1],[1,1,3,0,1,1,1,-1],[1,1,3,1,-1,0,1,1],[1,1,3,1,-1,1,0,1],[1,1,3,1,-1,1,1,0],[1,1,3,1,0,-1,1,1],[1,1,3,1,0,1,-1,1],[1,1,3,1,0,1,1,-1],[1,1,3,1,1,-1,0,1],[1,1,3,1,1,-1,1,0],[1,1,3,1,1,0,-1,1],[1,1,3,1,1,0,1,-1],[1,1,3,1,1,1,-1,0],[1,1,3,1,1,1,0,-1],[1,2,2,-1,0,0,1,1],[1,2,2,-1,0,1,0,1],[1,2,2,-1,0,1,1,0],[1,2,2,-1,1,0,0,1],[1,2,2,-1,1,0,1,0],[1,2,2,-1,1,1,0,0],[1,2,2,0,-1,0,1,1],[1,2,2,0,-1,1,0,1],[1,2,2,0,-1,1,1,0],[1,2,2,0,0,-1,1,1],[1,2,2,0,0,1,-1,1],[1,2,2,0,0,1,1,-1],[1,2,2,0,1,-1,0,1],[1,2,2,0,1,-1,1,0],[1,2,2,0,1,0,-1,1],[1,2,2,0,1,0,1,-1],[1,2,2,0,1,1,-1,0],[1,2,2,0,1,1,0,-1],[1,2,2,1,-1,0,0,1],[1,2,2,1,-1,0,1,0],[1,2,2,1,-1,1,0,0],[1,2,2,1,0,-1,0,1],[1,2,2,1,0,-1,1,0],[1,2,2,1,0,0,-1,1],[1,2,2,1,0,0,1,-1],[1,2,2,1,0,1,-1,0],[1,2,2,1,0,1,0,-1],[1,2,2,1,1,-1,0,0],[1,2,2,1,1,0,-1,0],[1,2,2,1,1,0,0,-1],[1,3,1,-1,0,0,0,1],[1,3,1,-1,0,0,1,0],[1,3,1,-1,0,1,0,0],[1,3,1,-1,1,0,0,0],[1,3,1,0,-1,0,0,1],[1,3,1,0,-1,0,1,0],[1,3,1,0,-1,1,0,0],[1,3,1,0,0,-1,0,1],[1,3,1,0,0,-1,1,0],[1,3,1,0,0,0,-1,1],[1,3,1,0,0,0,1,-1],[1,3,1,0,0,1,-1,0],[1,3,1,0,0,1,0,-1],[1,3,1,0,1,-1,0,0],[1,3,1,0,1,0,-1,0],[1,3,1,0,1,0,0,-1],[1,3,1,1,-1,0,0,0],[1,3,1,1,0,-1,0,0],[1,3,1,1,0,0,-1,0],[1,3,1,1,0,0,0,-1],[1,4,0,-1,0,0,0,0],[1,4,0,0,-1,0,0,0],[1,4,0,0,0,-1,0,0],[1,4,0,0,0,0,-1,0],[1,4,0,0,0,0,0,-1],[2,0,3,-1,-1,1,1,1],[2,0,3,-1,1,-1,1,1],[2,0,3,-1,1,1,-1,1],[2,0,3,-1,1,1,1,-1],[2,0,3,1,-1,-1,1,1],[2,0,3,1,-1,1,-1,1],[2,0,3,1,-1,1,1,-1],[2,0,3,1,1,-1,-1,1],[2,0,3,1,1,-1,1,-1],[2,0,3,1,1,1,-1,-1],[2,1,2,-1,-1,0,1,1],[2,1,2,-1,-1,1,0,1],[2,1,2,-1,-1,1,1,0],[2,1,2,-1,0,-1,1,1],[2,1,2,-1,0,1,-1,1],[2,1,2,-1,0,1,1,-1],[2,1,2,-1,1,-1,0,1],[2,1,2,-1,1,-1,1,0],[2,1,2,-1,1,0,-1,1],[2,1,2,-1,1,0,1,-1],[2,1,2,-1,1,1,-1,0],[2,1,2,-1,1,1,0,-1],[2,1,2,0,-1,-1,1,1],[2,1,2,0,-1,1,-1,1],[2,1,2,0,-1,1,1,-1],[2,1,2,0,1,-1,-1,1],[2,1,2,0,1,-1,1,-1],[2,1,2,0,1,1,-1,-1],[2,1,2,1,-1,-1,0,1],[2,1,2,1,-1,-1,1,0],[2,1,2,1,-1,0,-1,1],[2,1,2,1,-1,0,1,-1],[2,1,2,1,-1,1,-1,0],[2,1,2,1,-1,1,0,-1],[2,1,2,1,0,-1,-1,1],[2,1,2,1,0,-1,1,-1],[2,1,2,1,0,1,-1,-1],[2,1,2,1,1,-1,-1,0],[2,1,2,1,1,-1,0,-1],[2,1,2,1,1,0,-1,-1],[2,2,1,-1,-1,0,0,1],[2,2,1,-1,-1,0,1,0],[2,2,1,-1,-1,1,0,0],[2,2,1,-1,0,-1,0,1],[2,2,1,-1,0,-1,1,0],[2,2,1,-1,0,0,-1,1],[2,2,1,-1,0,0,1,-1],[2,2,1,-1,0,1,-1,0],[2,2,1,-1,0,1,0,-1],[2,2,1,-1,1,-1,0,0],[2,2,1,-1,1,0,-1,0],[2,2,1,-1,1,0,0,-1],[2,2,1,0,-1,-1,0,1],[2,2,1,0,-1,-1,1,0],[2,2,1,0,-1,0,-1,1],[2,2,1,0,-1,0,1,-1],[2,2,1,0,-1,1,-1,0],[2,2,1,0,-1,1,0,-1],[2,2,1,0,0,-1,-1,1],[2,2,1,0,0,-1,1,-1],[2,2,1,0,0,1,-1,-1],[2,2,1,0,1,-1,-1,0],[2,2,1,0,1,-1,0,-1],[2,2,1,0,1,0,-1,-1],[2,2,1,1,-1,-1,0,0],[2,2,1,1,-1,0,-1,0],[2,2,1,1,-1,0,0,-1],[2,2,1,1,0,-1,-1,0],[2,2,1,1,0,-1,0,-1],[2,2,1,1,0,0,-1,-1],[2,3,0,-1,-1,0,0,0],[2,3,0,-1,0,-1,0,0],[2,3,0,-1,0,0,-1,0],[2,3,0,-1,0,0,0,-1],[2,3,0,0,-1,-1,0,0],[2,3,0,0,-1,0,-1,0],[2,3,0,0,-1,0,0,-1],[2,3,0,0,0,-1,-1,0],[2,3,0,0,0,-1,0,-1],[2,3,0,0,0,0,-1,-1],[3,0,2,-1,-1,-1,1,1],[3,0,2,-1,-1,1,-1,1],[3,0,2,-1,-1,1,1,-1],[3,0,2,-1,1,-1,-1,1],[3,0,2,-1,1,-1,1,-1],[3,0,2,-1,1,1,-1,-1],[3,0,2,1,-1,-1,-1,1],[3,0,2,1,-1,-1,1,-1],[3,0,2,1,-1,1,-1,-1],[3,0,2,1,1,-1,-1,-1],[3,1,1,-1,-1,-1,0,1],[3,1,1,-1,-1,-1,1,0],[3,1,1,-1,-1,0,-1,1],[3,1,1,-1,-1,0,1,-1],[3,1,1,-1,-1,1,-1,0],[3,1,1,-1,-1,1,0,-1],[3,1,1,-1,0,-1,-1,1],[3,1,1,-1,0,-1,1,-1],[3,1,1,-1,0,1,-1,-1],[3,1,1,-1,1,-1,-1,0],[3,1,1,-1,1,-1,0,-1],[3,1,1,-1,1,0,-1,-1],[3,1,1,0,-1,-1,-1,1],[3,1,1,0,-1,-1,1,-1],[3,1,1,0,-1,1,-1,-1],[3,1,1,0,1,-1,-1,-1],[3,1,1,1,-1,-1,-1,0],[3,1,1,1,-1,-1,0,-1],[3,1,1,1,-1,0,-1,-1],[3,1,1,1,0,-1,-1,-1],[3,2,0,-1,-1,-1,0,0],[3,2,0,-1,-1,0,-1,0],[3,2,0,-1,-1,0,0,-1],[3,2,0,-1,0,-1,-1,0],[3,2,0,-1,0,-1,0,-1],[3,2,0,-1,0,0,-1,-1],[3,2,0,0,-1,-1,-1,0],[3,2,0,0,-1,-1,0,-1],[3,2,0,0,-1,0,-1,-1],[3,2,0,0,0,-1,-1,-1],[4,0,1,-1,-1,-1,-1,1],[4,0,1,-1,-1,-1,1,-1],[4,0,1,-1,-1,1,-1,-1],[4,0,1,-1,1,-1,-1,-1],[4,0,1,1,-1,-1,-1,-1],[4,1,0,-1,-1,-1,-1,0],[4,1,0,-1,-1,-1,0,-1],[4,1,0,-1,-1,0,-1,-1],[4,1,0,-1,0,-1,-1,-1],[4,1,0,0,-1,-1,-1,-1],[5,0,0,-1,-1,-1,-1,-1]].

test_global_cardinality3 =>
    L = [_,_,_,_,_],
    L :: -1..1,
    global_cardinality(L,[-1,0,1],[X1,X0,X2],[X1,X0,X2]),
    Sols = solve_all([X1,X0,X2|L]).sort(),
    Sols = [[0,0,5,1,1,1,1,1],[0,1,4,0,1,1,1,1],[0,1,4,1,0,1,1,1],[0,1,4,1,1,0,1,1],[0,1,4,1,1,1,0,1],[0,1,4,1,1,1,1,0],[0,2,3,0,0,1,1,1],[0,2,3,0,1,0,1,1],[0,2,3,0,1,1,0,1],[0,2,3,0,1,1,1,0],[0,2,3,1,0,0,1,1],[0,2,3,1,0,1,0,1],[0,2,3,1,0,1,1,0],[0,2,3,1,1,0,0,1],[0,2,3,1,1,0,1,0],[0,2,3,1,1,1,0,0],[0,3,2,0,0,0,1,1],[0,3,2,0,0,1,0,1],[0,3,2,0,0,1,1,0],[0,3,2,0,1,0,0,1],[0,3,2,0,1,0,1,0],[0,3,2,0,1,1,0,0],[0,3,2,1,0,0,0,1],[0,3,2,1,0,0,1,0],[0,3,2,1,0,1,0,0],[0,3,2,1,1,0,0,0],[0,4,1,0,0,0,0,1],[0,4,1,0,0,0,1,0],[0,4,1,0,0,1,0,0],[0,4,1,0,1,0,0,0],[0,4,1,1,0,0,0,0],[0,5,0,0,0,0,0,0],[1,0,4,-1,1,1,1,1],[1,0,4,1,-1,1,1,1],[1,0,4,1,1,-1,1,1],[1,0,4,1,1,1,-1,1],[1,0,4,1,1,1,1,-1],[1,1,3,-1,0,1,1,1],[1,1,3,-1,1,0,1,1],[1,1,3,-1,1,1,0,1],[1,1,3,-1,1,1,1,0],[1,1,3,0,-1,1,1,1],[1,1,3,0,1,-1,1,1],[1,1,3,0,1,1,-1,1],[1,1,3,0,1,1,1,-1],[1,1,3,1,-1,0,1,1],[1,1,3,1,-1,1,0,1],[1,1,3,1,-1,1,1,0],[1,1,3,1,0,-1,1,1],[1,1,3,1,0,1,-1,1],[1,1,3,1,0,1,1,-1],[1,1,3,1,1,-1,0,1],[1,1,3,1,1,-1,1,0],[1,1,3,1,1,0,-1,1],[1,1,3,1,1,0,1,-1],[1,1,3,1,1,1,-1,0],[1,1,3,1,1,1,0,-1],[1,2,2,-1,0,0,1,1],[1,2,2,-1,0,1,0,1],[1,2,2,-1,0,1,1,0],[1,2,2,-1,1,0,0,1],[1,2,2,-1,1,0,1,0],[1,2,2,-1,1,1,0,0],[1,2,2,0,-1,0,1,1],[1,2,2,0,-1,1,0,1],[1,2,2,0,-1,1,1,0],[1,2,2,0,0,-1,1,1],[1,2,2,0,0,1,-1,1],[1,2,2,0,0,1,1,-1],[1,2,2,0,1,-1,0,1],[1,2,2,0,1,-1,1,0],[1,2,2,0,1,0,-1,1],[1,2,2,0,1,0,1,-1],[1,2,2,0,1,1,-1,0],[1,2,2,0,1,1,0,-1],[1,2,2,1,-1,0,0,1],[1,2,2,1,-1,0,1,0],[1,2,2,1,-1,1,0,0],[1,2,2,1,0,-1,0,1],[1,2,2,1,0,-1,1,0],[1,2,2,1,0,0,-1,1],[1,2,2,1,0,0,1,-1],[1,2,2,1,0,1,-1,0],[1,2,2,1,0,1,0,-1],[1,2,2,1,1,-1,0,0],[1,2,2,1,1,0,-1,0],[1,2,2,1,1,0,0,-1],[1,3,1,-1,0,0,0,1],[1,3,1,-1,0,0,1,0],[1,3,1,-1,0,1,0,0],[1,3,1,-1,1,0,0,0],[1,3,1,0,-1,0,0,1],[1,3,1,0,-1,0,1,0],[1,3,1,0,-1,1,0,0],[1,3,1,0,0,-1,0,1],[1,3,1,0,0,-1,1,0],[1,3,1,0,0,0,-1,1],[1,3,1,0,0,0,1,-1],[1,3,1,0,0,1,-1,0],[1,3,1,0,0,1,0,-1],[1,3,1,0,1,-1,0,0],[1,3,1,0,1,0,-1,0],[1,3,1,0,1,0,0,-1],[1,3,1,1,-1,0,0,0],[1,3,1,1,0,-1,0,0],[1,3,1,1,0,0,-1,0],[1,3,1,1,0,0,0,-1],[1,4,0,-1,0,0,0,0],[1,4,0,0,-1,0,0,0],[1,4,0,0,0,-1,0,0],[1,4,0,0,0,0,-1,0],[1,4,0,0,0,0,0,-1],[2,0,3,-1,-1,1,1,1],[2,0,3,-1,1,-1,1,1],[2,0,3,-1,1,1,-1,1],[2,0,3,-1,1,1,1,-1],[2,0,3,1,-1,-1,1,1],[2,0,3,1,-1,1,-1,1],[2,0,3,1,-1,1,1,-1],[2,0,3,1,1,-1,-1,1],[2,0,3,1,1,-1,1,-1],[2,0,3,1,1,1,-1,-1],[2,1,2,-1,-1,0,1,1],[2,1,2,-1,-1,1,0,1],[2,1,2,-1,-1,1,1,0],[2,1,2,-1,0,-1,1,1],[2,1,2,-1,0,1,-1,1],[2,1,2,-1,0,1,1,-1],[2,1,2,-1,1,-1,0,1],[2,1,2,-1,1,-1,1,0],[2,1,2,-1,1,0,-1,1],[2,1,2,-1,1,0,1,-1],[2,1,2,-1,1,1,-1,0],[2,1,2,-1,1,1,0,-1],[2,1,2,0,-1,-1,1,1],[2,1,2,0,-1,1,-1,1],[2,1,2,0,-1,1,1,-1],[2,1,2,0,1,-1,-1,1],[2,1,2,0,1,-1,1,-1],[2,1,2,0,1,1,-1,-1],[2,1,2,1,-1,-1,0,1],[2,1,2,1,-1,-1,1,0],[2,1,2,1,-1,0,-1,1],[2,1,2,1,-1,0,1,-1],[2,1,2,1,-1,1,-1,0],[2,1,2,1,-1,1,0,-1],[2,1,2,1,0,-1,-1,1],[2,1,2,1,0,-1,1,-1],[2,1,2,1,0,1,-1,-1],[2,1,2,1,1,-1,-1,0],[2,1,2,1,1,-1,0,-1],[2,1,2,1,1,0,-1,-1],[2,2,1,-1,-1,0,0,1],[2,2,1,-1,-1,0,1,0],[2,2,1,-1,-1,1,0,0],[2,2,1,-1,0,-1,0,1],[2,2,1,-1,0,-1,1,0],[2,2,1,-1,0,0,-1,1],[2,2,1,-1,0,0,1,-1],[2,2,1,-1,0,1,-1,0],[2,2,1,-1,0,1,0,-1],[2,2,1,-1,1,-1,0,0],[2,2,1,-1,1,0,-1,0],[2,2,1,-1,1,0,0,-1],[2,2,1,0,-1,-1,0,1],[2,2,1,0,-1,-1,1,0],[2,2,1,0,-1,0,-1,1],[2,2,1,0,-1,0,1,-1],[2,2,1,0,-1,1,-1,0],[2,2,1,0,-1,1,0,-1],[2,2,1,0,0,-1,-1,1],[2,2,1,0,0,-1,1,-1],[2,2,1,0,0,1,-1,-1],[2,2,1,0,1,-1,-1,0],[2,2,1,0,1,-1,0,-1],[2,2,1,0,1,0,-1,-1],[2,2,1,1,-1,-1,0,0],[2,2,1,1,-1,0,-1,0],[2,2,1,1,-1,0,0,-1],[2,2,1,1,0,-1,-1,0],[2,2,1,1,0,-1,0,-1],[2,2,1,1,0,0,-1,-1],[2,3,0,-1,-1,0,0,0],[2,3,0,-1,0,-1,0,0],[2,3,0,-1,0,0,-1,0],[2,3,0,-1,0,0,0,-1],[2,3,0,0,-1,-1,0,0],[2,3,0,0,-1,0,-1,0],[2,3,0,0,-1,0,0,-1],[2,3,0,0,0,-1,-1,0],[2,3,0,0,0,-1,0,-1],[2,3,0,0,0,0,-1,-1],[3,0,2,-1,-1,-1,1,1],[3,0,2,-1,-1,1,-1,1],[3,0,2,-1,-1,1,1,-1],[3,0,2,-1,1,-1,-1,1],[3,0,2,-1,1,-1,1,-1],[3,0,2,-1,1,1,-1,-1],[3,0,2,1,-1,-1,-1,1],[3,0,2,1,-1,-1,1,-1],[3,0,2,1,-1,1,-1,-1],[3,0,2,1,1,-1,-1,-1],[3,1,1,-1,-1,-1,0,1],[3,1,1,-1,-1,-1,1,0],[3,1,1,-1,-1,0,-1,1],[3,1,1,-1,-1,0,1,-1],[3,1,1,-1,-1,1,-1,0],[3,1,1,-1,-1,1,0,-1],[3,1,1,-1,0,-1,-1,1],[3,1,1,-1,0,-1,1,-1],[3,1,1,-1,0,1,-1,-1],[3,1,1,-1,1,-1,-1,0],[3,1,1,-1,1,-1,0,-1],[3,1,1,-1,1,0,-1,-1],[3,1,1,0,-1,-1,-1,1],[3,1,1,0,-1,-1,1,-1],[3,1,1,0,-1,1,-1,-1],[3,1,1,0,1,-1,-1,-1],[3,1,1,1,-1,-1,-1,0],[3,1,1,1,-1,-1,0,-1],[3,1,1,1,-1,0,-1,-1],[3,1,1,1,0,-1,-1,-1],[3,2,0,-1,-1,-1,0,0],[3,2,0,-1,-1,0,-1,0],[3,2,0,-1,-1,0,0,-1],[3,2,0,-1,0,-1,-1,0],[3,2,0,-1,0,-1,0,-1],[3,2,0,-1,0,0,-1,-1],[3,2,0,0,-1,-1,-1,0],[3,2,0,0,-1,-1,0,-1],[3,2,0,0,-1,0,-1,-1],[3,2,0,0,0,-1,-1,-1],[4,0,1,-1,-1,-1,-1,1],[4,0,1,-1,-1,-1,1,-1],[4,0,1,-1,-1,1,-1,-1],[4,0,1,-1,1,-1,-1,-1],[4,0,1,1,-1,-1,-1,-1],[4,1,0,-1,-1,-1,-1,0],[4,1,0,-1,-1,-1,0,-1],[4,1,0,-1,-1,0,-1,-1],[4,1,0,-1,0,-1,-1,-1],[4,1,0,0,-1,-1,-1,-1],[5,0,0,-1,-1,-1,-1,-1]].

test_global_cardinality4 =>
    L = [_,_,_,_,_],
    L :: -1..1,
    global_cardinality_closed(L,[-1,0,1],[X1,X0,X2],[X1,X0,X2]),
    Sols = solve_all([X1,X0,X2|L]).sort(),
    Sols = [[0,0,5,1,1,1,1,1],[0,1,4,0,1,1,1,1],[0,1,4,1,0,1,1,1],[0,1,4,1,1,0,1,1],[0,1,4,1,1,1,0,1],[0,1,4,1,1,1,1,0],[0,2,3,0,0,1,1,1],[0,2,3,0,1,0,1,1],[0,2,3,0,1,1,0,1],[0,2,3,0,1,1,1,0],[0,2,3,1,0,0,1,1],[0,2,3,1,0,1,0,1],[0,2,3,1,0,1,1,0],[0,2,3,1,1,0,0,1],[0,2,3,1,1,0,1,0],[0,2,3,1,1,1,0,0],[0,3,2,0,0,0,1,1],[0,3,2,0,0,1,0,1],[0,3,2,0,0,1,1,0],[0,3,2,0,1,0,0,1],[0,3,2,0,1,0,1,0],[0,3,2,0,1,1,0,0],[0,3,2,1,0,0,0,1],[0,3,2,1,0,0,1,0],[0,3,2,1,0,1,0,0],[0,3,2,1,1,0,0,0],[0,4,1,0,0,0,0,1],[0,4,1,0,0,0,1,0],[0,4,1,0,0,1,0,0],[0,4,1,0,1,0,0,0],[0,4,1,1,0,0,0,0],[0,5,0,0,0,0,0,0],[1,0,4,-1,1,1,1,1],[1,0,4,1,-1,1,1,1],[1,0,4,1,1,-1,1,1],[1,0,4,1,1,1,-1,1],[1,0,4,1,1,1,1,-1],[1,1,3,-1,0,1,1,1],[1,1,3,-1,1,0,1,1],[1,1,3,-1,1,1,0,1],[1,1,3,-1,1,1,1,0],[1,1,3,0,-1,1,1,1],[1,1,3,0,1,-1,1,1],[1,1,3,0,1,1,-1,1],[1,1,3,0,1,1,1,-1],[1,1,3,1,-1,0,1,1],[1,1,3,1,-1,1,0,1],[1,1,3,1,-1,1,1,0],[1,1,3,1,0,-1,1,1],[1,1,3,1,0,1,-1,1],[1,1,3,1,0,1,1,-1],[1,1,3,1,1,-1,0,1],[1,1,3,1,1,-1,1,0],[1,1,3,1,1,0,-1,1],[1,1,3,1,1,0,1,-1],[1,1,3,1,1,1,-1,0],[1,1,3,1,1,1,0,-1],[1,2,2,-1,0,0,1,1],[1,2,2,-1,0,1,0,1],[1,2,2,-1,0,1,1,0],[1,2,2,-1,1,0,0,1],[1,2,2,-1,1,0,1,0],[1,2,2,-1,1,1,0,0],[1,2,2,0,-1,0,1,1],[1,2,2,0,-1,1,0,1],[1,2,2,0,-1,1,1,0],[1,2,2,0,0,-1,1,1],[1,2,2,0,0,1,-1,1],[1,2,2,0,0,1,1,-1],[1,2,2,0,1,-1,0,1],[1,2,2,0,1,-1,1,0],[1,2,2,0,1,0,-1,1],[1,2,2,0,1,0,1,-1],[1,2,2,0,1,1,-1,0],[1,2,2,0,1,1,0,-1],[1,2,2,1,-1,0,0,1],[1,2,2,1,-1,0,1,0],[1,2,2,1,-1,1,0,0],[1,2,2,1,0,-1,0,1],[1,2,2,1,0,-1,1,0],[1,2,2,1,0,0,-1,1],[1,2,2,1,0,0,1,-1],[1,2,2,1,0,1,-1,0],[1,2,2,1,0,1,0,-1],[1,2,2,1,1,-1,0,0],[1,2,2,1,1,0,-1,0],[1,2,2,1,1,0,0,-1],[1,3,1,-1,0,0,0,1],[1,3,1,-1,0,0,1,0],[1,3,1,-1,0,1,0,0],[1,3,1,-1,1,0,0,0],[1,3,1,0,-1,0,0,1],[1,3,1,0,-1,0,1,0],[1,3,1,0,-1,1,0,0],[1,3,1,0,0,-1,0,1],[1,3,1,0,0,-1,1,0],[1,3,1,0,0,0,-1,1],[1,3,1,0,0,0,1,-1],[1,3,1,0,0,1,-1,0],[1,3,1,0,0,1,0,-1],[1,3,1,0,1,-1,0,0],[1,3,1,0,1,0,-1,0],[1,3,1,0,1,0,0,-1],[1,3,1,1,-1,0,0,0],[1,3,1,1,0,-1,0,0],[1,3,1,1,0,0,-1,0],[1,3,1,1,0,0,0,-1],[1,4,0,-1,0,0,0,0],[1,4,0,0,-1,0,0,0],[1,4,0,0,0,-1,0,0],[1,4,0,0,0,0,-1,0],[1,4,0,0,0,0,0,-1],[2,0,3,-1,-1,1,1,1],[2,0,3,-1,1,-1,1,1],[2,0,3,-1,1,1,-1,1],[2,0,3,-1,1,1,1,-1],[2,0,3,1,-1,-1,1,1],[2,0,3,1,-1,1,-1,1],[2,0,3,1,-1,1,1,-1],[2,0,3,1,1,-1,-1,1],[2,0,3,1,1,-1,1,-1],[2,0,3,1,1,1,-1,-1],[2,1,2,-1,-1,0,1,1],[2,1,2,-1,-1,1,0,1],[2,1,2,-1,-1,1,1,0],[2,1,2,-1,0,-1,1,1],[2,1,2,-1,0,1,-1,1],[2,1,2,-1,0,1,1,-1],[2,1,2,-1,1,-1,0,1],[2,1,2,-1,1,-1,1,0],[2,1,2,-1,1,0,-1,1],[2,1,2,-1,1,0,1,-1],[2,1,2,-1,1,1,-1,0],[2,1,2,-1,1,1,0,-1],[2,1,2,0,-1,-1,1,1],[2,1,2,0,-1,1,-1,1],[2,1,2,0,-1,1,1,-1],[2,1,2,0,1,-1,-1,1],[2,1,2,0,1,-1,1,-1],[2,1,2,0,1,1,-1,-1],[2,1,2,1,-1,-1,0,1],[2,1,2,1,-1,-1,1,0],[2,1,2,1,-1,0,-1,1],[2,1,2,1,-1,0,1,-1],[2,1,2,1,-1,1,-1,0],[2,1,2,1,-1,1,0,-1],[2,1,2,1,0,-1,-1,1],[2,1,2,1,0,-1,1,-1],[2,1,2,1,0,1,-1,-1],[2,1,2,1,1,-1,-1,0],[2,1,2,1,1,-1,0,-1],[2,1,2,1,1,0,-1,-1],[2,2,1,-1,-1,0,0,1],[2,2,1,-1,-1,0,1,0],[2,2,1,-1,-1,1,0,0],[2,2,1,-1,0,-1,0,1],[2,2,1,-1,0,-1,1,0],[2,2,1,-1,0,0,-1,1],[2,2,1,-1,0,0,1,-1],[2,2,1,-1,0,1,-1,0],[2,2,1,-1,0,1,0,-1],[2,2,1,-1,1,-1,0,0],[2,2,1,-1,1,0,-1,0],[2,2,1,-1,1,0,0,-1],[2,2,1,0,-1,-1,0,1],[2,2,1,0,-1,-1,1,0],[2,2,1,0,-1,0,-1,1],[2,2,1,0,-1,0,1,-1],[2,2,1,0,-1,1,-1,0],[2,2,1,0,-1,1,0,-1],[2,2,1,0,0,-1,-1,1],[2,2,1,0,0,-1,1,-1],[2,2,1,0,0,1,-1,-1],[2,2,1,0,1,-1,-1,0],[2,2,1,0,1,-1,0,-1],[2,2,1,0,1,0,-1,-1],[2,2,1,1,-1,-1,0,0],[2,2,1,1,-1,0,-1,0],[2,2,1,1,-1,0,0,-1],[2,2,1,1,0,-1,-1,0],[2,2,1,1,0,-1,0,-1],[2,2,1,1,0,0,-1,-1],[2,3,0,-1,-1,0,0,0],[2,3,0,-1,0,-1,0,0],[2,3,0,-1,0,0,-1,0],[2,3,0,-1,0,0,0,-1],[2,3,0,0,-1,-1,0,0],[2,3,0,0,-1,0,-1,0],[2,3,0,0,-1,0,0,-1],[2,3,0,0,0,-1,-1,0],[2,3,0,0,0,-1,0,-1],[2,3,0,0,0,0,-1,-1],[3,0,2,-1,-1,-1,1,1],[3,0,2,-1,-1,1,-1,1],[3,0,2,-1,-1,1,1,-1],[3,0,2,-1,1,-1,-1,1],[3,0,2,-1,1,-1,1,-1],[3,0,2,-1,1,1,-1,-1],[3,0,2,1,-1,-1,-1,1],[3,0,2,1,-1,-1,1,-1],[3,0,2,1,-1,1,-1,-1],[3,0,2,1,1,-1,-1,-1],[3,1,1,-1,-1,-1,0,1],[3,1,1,-1,-1,-1,1,0],[3,1,1,-1,-1,0,-1,1],[3,1,1,-1,-1,0,1,-1],[3,1,1,-1,-1,1,-1,0],[3,1,1,-1,-1,1,0,-1],[3,1,1,-1,0,-1,-1,1],[3,1,1,-1,0,-1,1,-1],[3,1,1,-1,0,1,-1,-1],[3,1,1,-1,1,-1,-1,0],[3,1,1,-1,1,-1,0,-1],[3,1,1,-1,1,0,-1,-1],[3,1,1,0,-1,-1,-1,1],[3,1,1,0,-1,-1,1,-1],[3,1,1,0,-1,1,-1,-1],[3,1,1,0,1,-1,-1,-1],[3,1,1,1,-1,-1,-1,0],[3,1,1,1,-1,-1,0,-1],[3,1,1,1,-1,0,-1,-1],[3,1,1,1,0,-1,-1,-1],[3,2,0,-1,-1,-1,0,0],[3,2,0,-1,-1,0,-1,0],[3,2,0,-1,-1,0,0,-1],[3,2,0,-1,0,-1,-1,0],[3,2,0,-1,0,-1,0,-1],[3,2,0,-1,0,0,-1,-1],[3,2,0,0,-1,-1,-1,0],[3,2,0,0,-1,-1,0,-1],[3,2,0,0,-1,0,-1,-1],[3,2,0,0,0,-1,-1,-1],[4,0,1,-1,-1,-1,-1,1],[4,0,1,-1,-1,-1,1,-1],[4,0,1,-1,-1,1,-1,-1],[4,0,1,-1,1,-1,-1,-1],[4,0,1,1,-1,-1,-1,-1],[4,1,0,-1,-1,-1,-1,0],[4,1,0,-1,-1,-1,0,-1],[4,1,0,-1,-1,0,-1,-1],[4,1,0,-1,0,-1,-1,-1],[4,1,0,0,-1,-1,-1,-1],[5,0,0,-1,-1,-1,-1,-1]].        
        
test_count1 =>
    L = [_,_,_],
    L :: 0..10,
    count(X,L,2),
    Sols = solve_all([X|L]).sort(),
    Sols = [[0,0,0,1],[0,0,0,2],[0,0,0,3],[0,0,0,4],[0,0,0,5],[0,0,0,6],[0,0,0,7],[0,0,0,8],[0,0,0,9],[0,0,0,10],[0,0,1,0],[0,0,2,0],[0,0,3,0],[0,0,4,0],[0,0,5,0],[0,0,6,0],[0,0,7,0],[0,0,8,0],[0,0,9,0],[0,0,10,0],[0,1,0,0],[0,2,0,0],[0,3,0,0],[0,4,0,0],[0,5,0,0],[0,6,0,0],[0,7,0,0],[0,8,0,0],[0,9,0,0],[0,10,0,0],[1,0,1,1],[1,1,0,1],[1,1,1,0],[1,1,1,2],[1,1,1,3],[1,1,1,4],[1,1,1,5],[1,1,1,6],[1,1,1,7],[1,1,1,8],[1,1,1,9],[1,1,1,10],[1,1,2,1],[1,1,3,1],[1,1,4,1],[1,1,5,1],[1,1,6,1],[1,1,7,1],[1,1,8,1],[1,1,9,1],[1,1,10,1],[1,2,1,1],[1,3,1,1],[1,4,1,1],[1,5,1,1],[1,6,1,1],[1,7,1,1],[1,8,1,1],[1,9,1,1],[1,10,1,1],[2,0,2,2],[2,1,2,2],[2,2,0,2],[2,2,1,2],[2,2,2,0],[2,2,2,1],[2,2,2,3],[2,2,2,4],[2,2,2,5],[2,2,2,6],[2,2,2,7],[2,2,2,8],[2,2,2,9],[2,2,2,10],[2,2,3,2],[2,2,4,2],[2,2,5,2],[2,2,6,2],[2,2,7,2],[2,2,8,2],[2,2,9,2],[2,2,10,2],[2,3,2,2],[2,4,2,2],[2,5,2,2],[2,6,2,2],[2,7,2,2],[2,8,2,2],[2,9,2,2],[2,10,2,2],[3,0,3,3],[3,1,3,3],[3,2,3,3],[3,3,0,3],[3,3,1,3],[3,3,2,3],[3,3,3,0],[3,3,3,1],[3,3,3,2],[3,3,3,4],[3,3,3,5],[3,3,3,6],[3,3,3,7],[3,3,3,8],[3,3,3,9],[3,3,3,10],[3,3,4,3],[3,3,5,3],[3,3,6,3],[3,3,7,3],[3,3,8,3],[3,3,9,3],[3,3,10,3],[3,4,3,3],[3,5,3,3],[3,6,3,3],[3,7,3,3],[3,8,3,3],[3,9,3,3],[3,10,3,3],[4,0,4,4],[4,1,4,4],[4,2,4,4],[4,3,4,4],[4,4,0,4],[4,4,1,4],[4,4,2,4],[4,4,3,4],[4,4,4,0],[4,4,4,1],[4,4,4,2],[4,4,4,3],[4,4,4,5],[4,4,4,6],[4,4,4,7],[4,4,4,8],[4,4,4,9],[4,4,4,10],[4,4,5,4],[4,4,6,4],[4,4,7,4],[4,4,8,4],[4,4,9,4],[4,4,10,4],[4,5,4,4],[4,6,4,4],[4,7,4,4],[4,8,4,4],[4,9,4,4],[4,10,4,4],[5,0,5,5],[5,1,5,5],[5,2,5,5],[5,3,5,5],[5,4,5,5],[5,5,0,5],[5,5,1,5],[5,5,2,5],[5,5,3,5],[5,5,4,5],[5,5,5,0],[5,5,5,1],[5,5,5,2],[5,5,5,3],[5,5,5,4],[5,5,5,6],[5,5,5,7],[5,5,5,8],[5,5,5,9],[5,5,5,10],[5,5,6,5],[5,5,7,5],[5,5,8,5],[5,5,9,5],[5,5,10,5],[5,6,5,5],[5,7,5,5],[5,8,5,5],[5,9,5,5],[5,10,5,5],[6,0,6,6],[6,1,6,6],[6,2,6,6],[6,3,6,6],[6,4,6,6],[6,5,6,6],[6,6,0,6],[6,6,1,6],[6,6,2,6],[6,6,3,6],[6,6,4,6],[6,6,5,6],[6,6,6,0],[6,6,6,1],[6,6,6,2],[6,6,6,3],[6,6,6,4],[6,6,6,5],[6,6,6,7],[6,6,6,8],[6,6,6,9],[6,6,6,10],[6,6,7,6],[6,6,8,6],[6,6,9,6],[6,6,10,6],[6,7,6,6],[6,8,6,6],[6,9,6,6],[6,10,6,6],[7,0,7,7],[7,1,7,7],[7,2,7,7],[7,3,7,7],[7,4,7,7],[7,5,7,7],[7,6,7,7],[7,7,0,7],[7,7,1,7],[7,7,2,7],[7,7,3,7],[7,7,4,7],[7,7,5,7],[7,7,6,7],[7,7,7,0],[7,7,7,1],[7,7,7,2],[7,7,7,3],[7,7,7,4],[7,7,7,5],[7,7,7,6],[7,7,7,8],[7,7,7,9],[7,7,7,10],[7,7,8,7],[7,7,9,7],[7,7,10,7],[7,8,7,7],[7,9,7,7],[7,10,7,7],[8,0,8,8],[8,1,8,8],[8,2,8,8],[8,3,8,8],[8,4,8,8],[8,5,8,8],[8,6,8,8],[8,7,8,8],[8,8,0,8],[8,8,1,8],[8,8,2,8],[8,8,3,8],[8,8,4,8],[8,8,5,8],[8,8,6,8],[8,8,7,8],[8,8,8,0],[8,8,8,1],[8,8,8,2],[8,8,8,3],[8,8,8,4],[8,8,8,5],[8,8,8,6],[8,8,8,7],[8,8,8,9],[8,8,8,10],[8,8,9,8],[8,8,10,8],[8,9,8,8],[8,10,8,8],[9,0,9,9],[9,1,9,9],[9,2,9,9],[9,3,9,9],[9,4,9,9],[9,5,9,9],[9,6,9,9],[9,7,9,9],[9,8,9,9],[9,9,0,9],[9,9,1,9],[9,9,2,9],[9,9,3,9],[9,9,4,9],[9,9,5,9],[9,9,6,9],[9,9,7,9],[9,9,8,9],[9,9,9,0],[9,9,9,1],[9,9,9,2],[9,9,9,3],[9,9,9,4],[9,9,9,5],[9,9,9,6],[9,9,9,7],[9,9,9,8],[9,9,9,10],[9,9,10,9],[9,10,9,9],[10,0,10,10],[10,1,10,10],[10,2,10,10],[10,3,10,10],[10,4,10,10],[10,5,10,10],[10,6,10,10],[10,7,10,10],[10,8,10,10],[10,9,10,10],[10,10,0,10],[10,10,1,10],[10,10,2,10],[10,10,3,10],[10,10,4,10],[10,10,5,10],[10,10,6,10],[10,10,7,10],[10,10,8,10],[10,10,9,10],[10,10,10,0],[10,10,10,1],[10,10,10,2],[10,10,10,3],[10,10,10,4],[10,10,10,5],[10,10,10,6],[10,10,10,7],[10,10,10,8],[10,10,10,9]].

test_count2 =>
    L = [_,_,_],
    L :: -2..2,
    C :: 1..2,
    count(X,L,C),
    Sols = solve_all([C,X|L]).sort(),
    Sols = [[1,-2,-2,-1,-1],[1,-2,-2,-1,0],[1,-2,-2,-1,1],[1,-2,-2,-1,2],[1,-2,-2,0,-1],[1,-2,-2,0,0],[1,-2,-2,0,1],[1,-2,-2,0,2],[1,-2,-2,1,-1],[1,-2,-2,1,0],[1,-2,-2,1,1],[1,-2,-2,1,2],[1,-2,-2,2,-1],[1,-2,-2,2,0],[1,-2,-2,2,1],[1,-2,-2,2,2],[1,-2,-1,-2,-1],[1,-2,-1,-2,0],[1,-2,-1,-2,1],[1,-2,-1,-2,2],[1,-2,-1,-1,-2],[1,-2,-1,0,-2],[1,-2,-1,1,-2],[1,-2,-1,2,-2],[1,-2,0,-2,-1],[1,-2,0,-2,0],[1,-2,0,-2,1],[1,-2,0,-2,2],[1,-2,0,-1,-2],[1,-2,0,0,-2],[1,-2,0,1,-2],[1,-2,0,2,-2],[1,-2,1,-2,-1],[1,-2,1,-2,0],[1,-2,1,-2,1],[1,-2,1,-2,2],[1,-2,1,-1,-2],[1,-2,1,0,-2],[1,-2,1,1,-2],[1,-2,1,2,-2],[1,-2,2,-2,-1],[1,-2,2,-2,0],[1,-2,2,-2,1],[1,-2,2,-2,2],[1,-2,2,-1,-2],[1,-2,2,0,-2],[1,-2,2,1,-2],[1,-2,2,2,-2],[1,-1,-2,-2,-1],[1,-1,-2,-1,-2],[1,-1,-2,-1,0],[1,-1,-2,-1,1],[1,-1,-2,-1,2],[1,-1,-2,0,-1],[1,-1,-2,1,-1],[1,-1,-2,2,-1],[1,-1,-1,-2,-2],[1,-1,-1,-2,0],[1,-1,-1,-2,1],[1,-1,-1,-2,2],[1,-1,-1,0,-2],[1,-1,-1,0,0],[1,-1,-1,0,1],[1,-1,-1,0,2],[1,-1,-1,1,-2],[1,-1,-1,1,0],[1,-1,-1,1,1],[1,-1,-1,1,2],[1,-1,-1,2,-2],[1,-1,-1,2,0],[1,-1,-1,2,1],[1,-1,-1,2,2],[1,-1,0,-2,-1],[1,-1,0,-1,-2],[1,-1,0,-1,0],[1,-1,0,-1,1],[1,-1,0,-1,2],[1,-1,0,0,-1],[1,-1,0,1,-1],[1,-1,0,2,-1],[1,-1,1,-2,-1],[1,-1,1,-1,-2],[1,-1,1,-1,0],[1,-1,1,-1,1],[1,-1,1,-1,2],[1,-1,1,0,-1],[1,-1,1,1,-1],[1,-1,1,2,-1],[1,-1,2,-2,-1],[1,-1,2,-1,-2],[1,-1,2,-1,0],[1,-1,2,-1,1],[1,-1,2,-1,2],[1,-1,2,0,-1],[1,-1,2,1,-1],[1,-1,2,2,-1],[1,0,-2,-2,0],[1,0,-2,-1,0],[1,0,-2,0,-2],[1,0,-2,0,-1],[1,0,-2,0,1],[1,0,-2,0,2],[1,0,-2,1,0],[1,0,-2,2,0],[1,0,-1,-2,0],[1,0,-1,-1,0],[1,0,-1,0,-2],[1,0,-1,0,-1],[1,0,-1,0,1],[1,0,-1,0,2],[1,0,-1,1,0],[1,0,-1,2,0],[1,0,0,-2,-2],[1,0,0,-2,-1],[1,0,0,-2,1],[1,0,0,-2,2],[1,0,0,-1,-2],[1,0,0,-1,-1],[1,0,0,-1,1],[1,0,0,-1,2],[1,0,0,1,-2],[1,0,0,1,-1],[1,0,0,1,1],[1,0,0,1,2],[1,0,0,2,-2],[1,0,0,2,-1],[1,0,0,2,1],[1,0,0,2,2],[1,0,1,-2,0],[1,0,1,-1,0],[1,0,1,0,-2],[1,0,1,0,-1],[1,0,1,0,1],[1,0,1,0,2],[1,0,1,1,0],[1,0,1,2,0],[1,0,2,-2,0],[1,0,2,-1,0],[1,0,2,0,-2],[1,0,2,0,-1],[1,0,2,0,1],[1,0,2,0,2],[1,0,2,1,0],[1,0,2,2,0],[1,1,-2,-2,1],[1,1,-2,-1,1],[1,1,-2,0,1],[1,1,-2,1,-2],[1,1,-2,1,-1],[1,1,-2,1,0],[1,1,-2,1,2],[1,1,-2,2,1],[1,1,-1,-2,1],[1,1,-1,-1,1],[1,1,-1,0,1],[1,1,-1,1,-2],[1,1,-1,1,-1],[1,1,-1,1,0],[1,1,-1,1,2],[1,1,-1,2,1],[1,1,0,-2,1],[1,1,0,-1,1],[1,1,0,0,1],[1,1,0,1,-2],[1,1,0,1,-1],[1,1,0,1,0],[1,1,0,1,2],[1,1,0,2,1],[1,1,1,-2,-2],[1,1,1,-2,-1],[1,1,1,-2,0],[1,1,1,-2,2],[1,1,1,-1,-2],[1,1,1,-1,-1],[1,1,1,-1,0],[1,1,1,-1,2],[1,1,1,0,-2],[1,1,1,0,-1],[1,1,1,0,0],[1,1,1,0,2],[1,1,1,2,-2],[1,1,1,2,-1],[1,1,1,2,0],[1,1,1,2,2],[1,1,2,-2,1],[1,1,2,-1,1],[1,1,2,0,1],[1,1,2,1,-2],[1,1,2,1,-1],[1,1,2,1,0],[1,1,2,1,2],[1,1,2,2,1],[1,2,-2,-2,2],[1,2,-2,-1,2],[1,2,-2,0,2],[1,2,-2,1,2],[1,2,-2,2,-2],[1,2,-2,2,-1],[1,2,-2,2,0],[1,2,-2,2,1],[1,2,-1,-2,2],[1,2,-1,-1,2],[1,2,-1,0,2],[1,2,-1,1,2],[1,2,-1,2,-2],[1,2,-1,2,-1],[1,2,-1,2,0],[1,2,-1,2,1],[1,2,0,-2,2],[1,2,0,-1,2],[1,2,0,0,2],[1,2,0,1,2],[1,2,0,2,-2],[1,2,0,2,-1],[1,2,0,2,0],[1,2,0,2,1],[1,2,1,-2,2],[1,2,1,-1,2],[1,2,1,0,2],[1,2,1,1,2],[1,2,1,2,-2],[1,2,1,2,-1],[1,2,1,2,0],[1,2,1,2,1],[1,2,2,-2,-2],[1,2,2,-2,-1],[1,2,2,-2,0],[1,2,2,-2,1],[1,2,2,-1,-2],[1,2,2,-1,-1],[1,2,2,-1,0],[1,2,2,-1,1],[1,2,2,0,-2],[1,2,2,0,-1],[1,2,2,0,0],[1,2,2,0,1],[1,2,2,1,-2],[1,2,2,1,-1],[1,2,2,1,0],[1,2,2,1,1],[2,-2,-2,-2,-1],[2,-2,-2,-2,0],[2,-2,-2,-2,1],[2,-2,-2,-2,2],[2,-2,-2,-1,-2],[2,-2,-2,0,-2],[2,-2,-2,1,-2],[2,-2,-2,2,-2],[2,-2,-1,-2,-2],[2,-2,0,-2,-2],[2,-2,1,-2,-2],[2,-2,2,-2,-2],[2,-1,-2,-1,-1],[2,-1,-1,-2,-1],[2,-1,-1,-1,-2],[2,-1,-1,-1,0],[2,-1,-1,-1,1],[2,-1,-1,-1,2],[2,-1,-1,0,-1],[2,-1,-1,1,-1],[2,-1,-1,2,-1],[2,-1,0,-1,-1],[2,-1,1,-1,-1],[2,-1,2,-1,-1],[2,0,-2,0,0],[2,0,-1,0,0],[2,0,0,-2,0],[2,0,0,-1,0],[2,0,0,0,-2],[2,0,0,0,-1],[2,0,0,0,1],[2,0,0,0,2],[2,0,0,1,0],[2,0,0,2,0],[2,0,1,0,0],[2,0,2,0,0],[2,1,-2,1,1],[2,1,-1,1,1],[2,1,0,1,1],[2,1,1,-2,1],[2,1,1,-1,1],[2,1,1,0,1],[2,1,1,1,-2],[2,1,1,1,-1],[2,1,1,1,0],[2,1,1,1,2],[2,1,1,2,1],[2,1,2,1,1],[2,2,-2,2,2],[2,2,-1,2,2],[2,2,0,2,2],[2,2,1,2,2],[2,2,2,-2,2],[2,2,2,-1,2],[2,2,2,0,2],[2,2,2,1,2],[2,2,2,2,-2],[2,2,2,2,-1],[2,2,2,2,0],[2,2,2,2,1]].
    
test_bin_packing_load =>
    W = [360, 850, 630, 70, 700, 210],
    Bin = new_list(6),
    Bin :: 1..3,
    Y1 :: 1200..1300,
    Y2 :: 1000..1400,
    Y3 :: 200..700,
    Load = [Y1, Y2, Y3],
    bin_packing_load(Load,Bin,W),
    Sols = solve_all(Bin++Load).sort(),
    Sols = [[1,1,2,1,2,3,1280,1330,210],[1,1,2,2,2,3,1210,1400,210],[1,1,2,3,2,3,1210,1330,280]].

test_bin_packing =>
    W = [360, 850, 630, 70, 700, 210],
    Bin = new_list(6),
    Bin :: 1..3,
       Capacity = 1440,
    bin_packing(Capacity,Bin,W),
    Sols = solve_all(Bin).sort(),
    Sols = [[1,1,2,1,2,3],[1,1,2,1,3,2],[1,1,2,1,3,3],[1,1,2,2,2,1],[1,1,2,2,2,3],[1,1,2,2,3,1],[1,1,2,2,3,2],[1,1,2,2,3,3],[1,1,2,3,2,1],[1,1,2,3,2,3],[1,1,2,3,3,1],[1,1,2,3,3,2],[1,1,2,3,3,3],[1,1,3,1,2,2],[1,1,3,1,2,3],[1,1,3,1,3,2],[1,1,3,2,2,1],[1,1,3,2,2,2],[1,1,3,2,2,3],[1,1,3,2,3,1],[1,1,3,2,3,2],[1,1,3,3,2,1],[1,1,3,3,2,2],[1,1,3,3,2,3],[1,1,3,3,3,1],[1,1,3,3,3,2],[1,2,1,1,3,1],[1,2,1,1,3,2],[1,2,1,1,3,3],[1,2,1,2,3,1],[1,2,1,2,3,2],[1,2,1,2,3,3],[1,2,1,3,3,1],[1,2,1,3,3,2],[1,2,1,3,3,3],[1,2,3,1,1,1],[1,2,3,1,1,2],[1,2,3,1,1,3],[1,2,3,1,3,1],[1,2,3,1,3,2],[1,2,3,2,1,1],[1,2,3,2,1,2],[1,2,3,2,1,3],[1,2,3,2,3,1],[1,2,3,2,3,2],[1,2,3,3,1,1],[1,2,3,3,1,2],[1,2,3,3,1,3],[1,2,3,3,3,1],[1,2,3,3,3,2],[1,3,1,1,2,1],[1,3,1,1,2,2],[1,3,1,1,2,3],[1,3,1,2,2,1],[1,3,1,2,2,2],[1,3,1,2,2,3],[1,3,1,3,2,1],[1,3,1,3,2,2],[1,3,1,3,2,3],[1,3,2,1,1,1],[1,3,2,1,1,2],[1,3,2,1,1,3],[1,3,2,1,2,1],[1,3,2,1,2,3],[1,3,2,2,1,1],[1,3,2,2,1,2],[1,3,2,2,1,3],[1,3,2,2,2,1],[1,3,2,2,2,3],[1,3,2,3,1,1],[1,3,2,3,1,2],[1,3,2,3,1,3],[1,3,2,3,2,1],[1,3,2,3,2,3],[2,1,2,1,3,1],[2,1,2,1,3,2],[2,1,2,1,3,3],[2,1,2,2,3,1],[2,1,2,2,3,2],[2,1,2,2,3,3],[2,1,2,3,3,1],[2,1,2,3,3,2],[2,1,2,3,3,3],[2,1,3,1,2,1],[2,1,3,1,2,2],[2,1,3,1,2,3],[2,1,3,1,3,1],[2,1,3,1,3,2],[2,1,3,2,2,1],[2,1,3,2,2,2],[2,1,3,2,2,3],[2,1,3,2,3,1],[2,1,3,2,3,2],[2,1,3,3,2,1],[2,1,3,3,2,2],[2,1,3,3,2,3],[2,1,3,3,3,1],[2,1,3,3,3,2],[2,2,1,1,1,2],[2,2,1,1,1,3],[2,2,1,1,3,1],[2,2,1,1,3,2],[2,2,1,1,3,3],[2,2,1,2,1,3],[2,2,1,2,3,1],[2,2,1,2,3,3],[2,2,1,3,1,2],[2,2,1,3,1,3],[2,2,1,3,3,1],[2,2,1,3,3,2],[2,2,1,3,3,3],[2,2,3,1,1,1],[2,2,3,1,1,2],[2,2,3,1,1,3],[2,2,3,1,3,1],[2,2,3,1,3,2],[2,2,3,2,1,1],[2,2,3,2,1,3],[2,2,3,2,3,1],[2,2,3,3,1,1],[2,2,3,3,1,2],[2,2,3,3,1,3],[2,2,3,3,3,1],[2,2,3,3,3,2],[2,3,1,1,1,2],[2,3,1,1,1,3],[2,3,1,1,2,1],[2,3,1,1,2,2],[2,3,1,1,2,3],[2,3,1,2,1,2],[2,3,1,2,1,3],[2,3,1,2,2,1],[2,3,1,2,2,2],[2,3,1,2,2,3],[2,3,1,3,1,2],[2,3,1,3,1,3],[2,3,1,3,2,1],[2,3,1,3,2,2],[2,3,1,3,2,3],[2,3,2,1,1,1],[2,3,2,1,1,2],[2,3,2,1,1,3],[2,3,2,2,1,1],[2,3,2,2,1,2],[2,3,2,2,1,3],[2,3,2,3,1,1],[2,3,2,3,1,2],[2,3,2,3,1,3],[3,1,2,1,2,1],[3,1,2,1,2,3],[3,1,2,1,3,1],[3,1,2,1,3,2],[3,1,2,1,3,3],[3,1,2,2,2,1],[3,1,2,2,2,3],[3,1,2,2,3,1],[3,1,2,2,3,2],[3,1,2,2,3,3],[3,1,2,3,2,1],[3,1,2,3,2,3],[3,1,2,3,3,1],[3,1,2,3,3,2],[3,1,2,3,3,3],[3,1,3,1,2,1],[3,1,3,1,2,2],[3,1,3,1,2,3],[3,1,3,2,2,1],[3,1,3,2,2,2],[3,1,3,2,2,3],[3,1,3,3,2,1],[3,1,3,3,2,2],[3,1,3,3,2,3],[3,2,1,1,1,2],[3,2,1,1,1,3],[3,2,1,1,3,1],[3,2,1,1,3,2],[3,2,1,1,3,3],[3,2,1,2,1,2],[3,2,1,2,1,3],[3,2,1,2,3,1],[3,2,1,2,3,2],[3,2,1,2,3,3],[3,2,1,3,1,2],[3,2,1,3,1,3],[3,2,1,3,3,1],[3,2,1,3,3,2],[3,2,1,3,3,3],[3,2,3,1,1,1],[3,2,3,1,1,2],[3,2,3,1,1,3],[3,2,3,2,1,1],[3,2,3,2,1,2],[3,2,3,2,1,3],[3,2,3,3,1,1],[3,2,3,3,1,2],[3,2,3,3,1,3],[3,3,1,1,1,2],[3,3,1,1,1,3],[3,3,1,1,2,1],[3,3,1,1,2,2],[3,3,1,1,2,3],[3,3,1,2,1,2],[3,3,1,2,1,3],[3,3,1,2,2,1],[3,3,1,2,2,2],[3,3,1,2,2,3],[3,3,1,3,1,2],[3,3,1,3,2,1],[3,3,1,3,2,2],[3,3,2,1,1,1],[3,3,2,1,1,2],[3,3,2,1,1,3],[3,3,2,1,2,1],[3,3,2,1,2,3],[3,3,2,2,1,1],[3,3,2,2,1,2],[3,3,2,2,1,3],[3,3,2,2,2,1],[3,3,2,2,2,3],[3,3,2,3,1,1],[3,3,2,3,1,2],[3,3,2,3,2,1]].

test_argmax =>
    X1 :: 5..7,
    X2 :: 4..12,
    X3 :: 3..10,
    X4 :: 4..10,
    L = [X1,X2,X3,X4],
    argmax(L, Z),
    Vs = L ++ [Z],
    Sols = solve_all(Vs).sort(),
    Sols = [[5,4,3,4,1],[5,4,3,5,1],[5,4,3,6,4],[5,4,3,7,4],[5,4,3,8,4],[5,4,3,9,4],[5,4,3,10,4],[5,4,4,4,1],[5,4,4,5,1],[5,4,4,6,4],[5,4,4,7,4],[5,4,4,8,4],[5,4,4,9,4],[5,4,4,10,4],[5,4,5,4,1],[5,4,5,5,1],[5,4,5,6,4],[5,4,5,7,4],[5,4,5,8,4],[5,4,5,9,4],[5,4,5,10,4],[5,4,6,4,3],[5,4,6,5,3],[5,4,6,6,3],[5,4,6,7,4],[5,4,6,8,4],[5,4,6,9,4],[5,4,6,10,4],[5,4,7,4,3],[5,4,7,5,3],[5,4,7,6,3],[5,4,7,7,3],[5,4,7,8,4],[5,4,7,9,4],[5,4,7,10,4],[5,4,8,4,3],[5,4,8,5,3],[5,4,8,6,3],[5,4,8,7,3],[5,4,8,8,3],[5,4,8,9,4],[5,4,8,10,4],[5,4,9,4,3],[5,4,9,5,3],[5,4,9,6,3],[5,4,9,7,3],[5,4,9,8,3],[5,4,9,9,3],[5,4,9,10,4],[5,4,10,4,3],[5,4,10,5,3],[5,4,10,6,3],[5,4,10,7,3],[5,4,10,8,3],[5,4,10,9,3],[5,4,10,10,3],[5,5,3,4,1],[5,5,3,5,1],[5,5,3,6,4],[5,5,3,7,4],[5,5,3,8,4],[5,5,3,9,4],[5,5,3,10,4],[5,5,4,4,1],[5,5,4,5,1],[5,5,4,6,4],[5,5,4,7,4],[5,5,4,8,4],[5,5,4,9,4],[5,5,4,10,4],[5,5,5,4,1],[5,5,5,5,1],[5,5,5,6,4],[5,5,5,7,4],[5,5,5,8,4],[5,5,5,9,4],[5,5,5,10,4],[5,5,6,4,3],[5,5,6,5,3],[5,5,6,6,3],[5,5,6,7,4],[5,5,6,8,4],[5,5,6,9,4],[5,5,6,10,4],[5,5,7,4,3],[5,5,7,5,3],[5,5,7,6,3],[5,5,7,7,3],[5,5,7,8,4],[5,5,7,9,4],[5,5,7,10,4],[5,5,8,4,3],[5,5,8,5,3],[5,5,8,6,3],[5,5,8,7,3],[5,5,8,8,3],[5,5,8,9,4],[5,5,8,10,4],[5,5,9,4,3],[5,5,9,5,3],[5,5,9,6,3],[5,5,9,7,3],[5,5,9,8,3],[5,5,9,9,3],[5,5,9,10,4],[5,5,10,4,3],[5,5,10,5,3],[5,5,10,6,3],[5,5,10,7,3],[5,5,10,8,3],[5,5,10,9,3],[5,5,10,10,3],[5,6,3,4,2],[5,6,3,5,2],[5,6,3,6,2],[5,6,3,7,4],[5,6,3,8,4],[5,6,3,9,4],[5,6,3,10,4],[5,6,4,4,2],[5,6,4,5,2],[5,6,4,6,2],[5,6,4,7,4],[5,6,4,8,4],[5,6,4,9,4],[5,6,4,10,4],[5,6,5,4,2],[5,6,5,5,2],[5,6,5,6,2],[5,6,5,7,4],[5,6,5,8,4],[5,6,5,9,4],[5,6,5,10,4],[5,6,6,4,2],[5,6,6,5,2],[5,6,6,6,2],[5,6,6,7,4],[5,6,6,8,4],[5,6,6,9,4],[5,6,6,10,4],[5,6,7,4,3],[5,6,7,5,3],[5,6,7,6,3],[5,6,7,7,3],[5,6,7,8,4],[5,6,7,9,4],[5,6,7,10,4],[5,6,8,4,3],[5,6,8,5,3],[5,6,8,6,3],[5,6,8,7,3],[5,6,8,8,3],[5,6,8,9,4],[5,6,8,10,4],[5,6,9,4,3],[5,6,9,5,3],[5,6,9,6,3],[5,6,9,7,3],[5,6,9,8,3],[5,6,9,9,3],[5,6,9,10,4],[5,6,10,4,3],[5,6,10,5,3],[5,6,10,6,3],[5,6,10,7,3],[5,6,10,8,3],[5,6,10,9,3],[5,6,10,10,3],[5,7,3,4,2],[5,7,3,5,2],[5,7,3,6,2],[5,7,3,7,2],[5,7,3,8,4],[5,7,3,9,4],[5,7,3,10,4],[5,7,4,4,2],[5,7,4,5,2],[5,7,4,6,2],[5,7,4,7,2],[5,7,4,8,4],[5,7,4,9,4],[5,7,4,10,4],[5,7,5,4,2],[5,7,5,5,2],[5,7,5,6,2],[5,7,5,7,2],[5,7,5,8,4],[5,7,5,9,4],[5,7,5,10,4],[5,7,6,4,2],[5,7,6,5,2],[5,7,6,6,2],[5,7,6,7,2],[5,7,6,8,4],[5,7,6,9,4],[5,7,6,10,4],[5,7,7,4,2],[5,7,7,5,2],[5,7,7,6,2],[5,7,7,7,2],[5,7,7,8,4],[5,7,7,9,4],[5,7,7,10,4],[5,7,8,4,3],[5,7,8,5,3],[5,7,8,6,3],[5,7,8,7,3],[5,7,8,8,3],[5,7,8,9,4],[5,7,8,10,4],[5,7,9,4,3],[5,7,9,5,3],[5,7,9,6,3],[5,7,9,7,3],[5,7,9,8,3],[5,7,9,9,3],[5,7,9,10,4],[5,7,10,4,3],[5,7,10,5,3],[5,7,10,6,3],[5,7,10,7,3],[5,7,10,8,3],[5,7,10,9,3],[5,7,10,10,3],[5,8,3,4,2],[5,8,3,5,2],[5,8,3,6,2],[5,8,3,7,2],[5,8,3,8,2],[5,8,3,9,4],[5,8,3,10,4],[5,8,4,4,2],[5,8,4,5,2],[5,8,4,6,2],[5,8,4,7,2],[5,8,4,8,2],[5,8,4,9,4],[5,8,4,10,4],[5,8,5,4,2],[5,8,5,5,2],[5,8,5,6,2],[5,8,5,7,2],[5,8,5,8,2],[5,8,5,9,4],[5,8,5,10,4],[5,8,6,4,2],[5,8,6,5,2],[5,8,6,6,2],[5,8,6,7,2],[5,8,6,8,2],[5,8,6,9,4],[5,8,6,10,4],[5,8,7,4,2],[5,8,7,5,2],[5,8,7,6,2],[5,8,7,7,2],[5,8,7,8,2],[5,8,7,9,4],[5,8,7,10,4],[5,8,8,4,2],[5,8,8,5,2],[5,8,8,6,2],[5,8,8,7,2],[5,8,8,8,2],[5,8,8,9,4],[5,8,8,10,4],[5,8,9,4,3],[5,8,9,5,3],[5,8,9,6,3],[5,8,9,7,3],[5,8,9,8,3],[5,8,9,9,3],[5,8,9,10,4],[5,8,10,4,3],[5,8,10,5,3],[5,8,10,6,3],[5,8,10,7,3],[5,8,10,8,3],[5,8,10,9,3],[5,8,10,10,3],[5,9,3,4,2],[5,9,3,5,2],[5,9,3,6,2],[5,9,3,7,2],[5,9,3,8,2],[5,9,3,9,2],[5,9,3,10,4],[5,9,4,4,2],[5,9,4,5,2],[5,9,4,6,2],[5,9,4,7,2],[5,9,4,8,2],[5,9,4,9,2],[5,9,4,10,4],[5,9,5,4,2],[5,9,5,5,2],[5,9,5,6,2],[5,9,5,7,2],[5,9,5,8,2],[5,9,5,9,2],[5,9,5,10,4],[5,9,6,4,2],[5,9,6,5,2],[5,9,6,6,2],[5,9,6,7,2],[5,9,6,8,2],[5,9,6,9,2],[5,9,6,10,4],[5,9,7,4,2],[5,9,7,5,2],[5,9,7,6,2],[5,9,7,7,2],[5,9,7,8,2],[5,9,7,9,2],[5,9,7,10,4],[5,9,8,4,2],[5,9,8,5,2],[5,9,8,6,2],[5,9,8,7,2],[5,9,8,8,2],[5,9,8,9,2],[5,9,8,10,4],[5,9,9,4,2],[5,9,9,5,2],[5,9,9,6,2],[5,9,9,7,2],[5,9,9,8,2],[5,9,9,9,2],[5,9,9,10,4],[5,9,10,4,3],[5,9,10,5,3],[5,9,10,6,3],[5,9,10,7,3],[5,9,10,8,3],[5,9,10,9,3],[5,9,10,10,3],[5,10,3,4,2],[5,10,3,5,2],[5,10,3,6,2],[5,10,3,7,2],[5,10,3,8,2],[5,10,3,9,2],[5,10,3,10,2],[5,10,4,4,2],[5,10,4,5,2],[5,10,4,6,2],[5,10,4,7,2],[5,10,4,8,2],[5,10,4,9,2],[5,10,4,10,2],[5,10,5,4,2],[5,10,5,5,2],[5,10,5,6,2],[5,10,5,7,2],[5,10,5,8,2],[5,10,5,9,2],[5,10,5,10,2],[5,10,6,4,2],[5,10,6,5,2],[5,10,6,6,2],[5,10,6,7,2],[5,10,6,8,2],[5,10,6,9,2],[5,10,6,10,2],[5,10,7,4,2],[5,10,7,5,2],[5,10,7,6,2],[5,10,7,7,2],[5,10,7,8,2],[5,10,7,9,2],[5,10,7,10,2],[5,10,8,4,2],[5,10,8,5,2],[5,10,8,6,2],[5,10,8,7,2],[5,10,8,8,2],[5,10,8,9,2],[5,10,8,10,2],[5,10,9,4,2],[5,10,9,5,2],[5,10,9,6,2],[5,10,9,7,2],[5,10,9,8,2],[5,10,9,9,2],[5,10,9,10,2],[5,10,10,4,2],[5,10,10,5,2],[5,10,10,6,2],[5,10,10,7,2],[5,10,10,8,2],[5,10,10,9,2],[5,10,10,10,2],[5,11,3,4,2],[5,11,3,5,2],[5,11,3,6,2],[5,11,3,7,2],[5,11,3,8,2],[5,11,3,9,2],[5,11,3,10,2],[5,11,4,4,2],[5,11,4,5,2],[5,11,4,6,2],[5,11,4,7,2],[5,11,4,8,2],[5,11,4,9,2],[5,11,4,10,2],[5,11,5,4,2],[5,11,5,5,2],[5,11,5,6,2],[5,11,5,7,2],[5,11,5,8,2],[5,11,5,9,2],[5,11,5,10,2],[5,11,6,4,2],[5,11,6,5,2],[5,11,6,6,2],[5,11,6,7,2],[5,11,6,8,2],[5,11,6,9,2],[5,11,6,10,2],[5,11,7,4,2],[5,11,7,5,2],[5,11,7,6,2],[5,11,7,7,2],[5,11,7,8,2],[5,11,7,9,2],[5,11,7,10,2],[5,11,8,4,2],[5,11,8,5,2],[5,11,8,6,2],[5,11,8,7,2],[5,11,8,8,2],[5,11,8,9,2],[5,11,8,10,2],[5,11,9,4,2],[5,11,9,5,2],[5,11,9,6,2],[5,11,9,7,2],[5,11,9,8,2],[5,11,9,9,2],[5,11,9,10,2],[5,11,10,4,2],[5,11,10,5,2],[5,11,10,6,2],[5,11,10,7,2],[5,11,10,8,2],[5,11,10,9,2],[5,11,10,10,2],[5,12,3,4,2],[5,12,3,5,2],[5,12,3,6,2],[5,12,3,7,2],[5,12,3,8,2],[5,12,3,9,2],[5,12,3,10,2],[5,12,4,4,2],[5,12,4,5,2],[5,12,4,6,2],[5,12,4,7,2],[5,12,4,8,2],[5,12,4,9,2],[5,12,4,10,2],[5,12,5,4,2],[5,12,5,5,2],[5,12,5,6,2],[5,12,5,7,2],[5,12,5,8,2],[5,12,5,9,2],[5,12,5,10,2],[5,12,6,4,2],[5,12,6,5,2],[5,12,6,6,2],[5,12,6,7,2],[5,12,6,8,2],[5,12,6,9,2],[5,12,6,10,2],[5,12,7,4,2],[5,12,7,5,2],[5,12,7,6,2],[5,12,7,7,2],[5,12,7,8,2],[5,12,7,9,2],[5,12,7,10,2],[5,12,8,4,2],[5,12,8,5,2],[5,12,8,6,2],[5,12,8,7,2],[5,12,8,8,2],[5,12,8,9,2],[5,12,8,10,2],[5,12,9,4,2],[5,12,9,5,2],[5,12,9,6,2],[5,12,9,7,2],[5,12,9,8,2],[5,12,9,9,2],[5,12,9,10,2],[5,12,10,4,2],[5,12,10,5,2],[5,12,10,6,2],[5,12,10,7,2],[5,12,10,8,2],[5,12,10,9,2],[5,12,10,10,2],[6,4,3,4,1],[6,4,3,5,1],[6,4,3,6,1],[6,4,3,7,4],[6,4,3,8,4],[6,4,3,9,4],[6,4,3,10,4],[6,4,4,4,1],[6,4,4,5,1],[6,4,4,6,1],[6,4,4,7,4],[6,4,4,8,4],[6,4,4,9,4],[6,4,4,10,4],[6,4,5,4,1],[6,4,5,5,1],[6,4,5,6,1],[6,4,5,7,4],[6,4,5,8,4],[6,4,5,9,4],[6,4,5,10,4],[6,4,6,4,1],[6,4,6,5,1],[6,4,6,6,1],[6,4,6,7,4],[6,4,6,8,4],[6,4,6,9,4],[6,4,6,10,4],[6,4,7,4,3],[6,4,7,5,3],[6,4,7,6,3],[6,4,7,7,3],[6,4,7,8,4],[6,4,7,9,4],[6,4,7,10,4],[6,4,8,4,3],[6,4,8,5,3],[6,4,8,6,3],[6,4,8,7,3],[6,4,8,8,3],[6,4,8,9,4],[6,4,8,10,4],[6,4,9,4,3],[6,4,9,5,3],[6,4,9,6,3],[6,4,9,7,3],[6,4,9,8,3],[6,4,9,9,3],[6,4,9,10,4],[6,4,10,4,3],[6,4,10,5,3],[6,4,10,6,3],[6,4,10,7,3],[6,4,10,8,3],[6,4,10,9,3],[6,4,10,10,3],[6,5,3,4,1],[6,5,3,5,1],[6,5,3,6,1],[6,5,3,7,4],[6,5,3,8,4],[6,5,3,9,4],[6,5,3,10,4],[6,5,4,4,1],[6,5,4,5,1],[6,5,4,6,1],[6,5,4,7,4],[6,5,4,8,4],[6,5,4,9,4],[6,5,4,10,4],[6,5,5,4,1],[6,5,5,5,1],[6,5,5,6,1],[6,5,5,7,4],[6,5,5,8,4],[6,5,5,9,4],[6,5,5,10,4],[6,5,6,4,1],[6,5,6,5,1],[6,5,6,6,1],[6,5,6,7,4],[6,5,6,8,4],[6,5,6,9,4],[6,5,6,10,4],[6,5,7,4,3],[6,5,7,5,3],[6,5,7,6,3],[6,5,7,7,3],[6,5,7,8,4],[6,5,7,9,4],[6,5,7,10,4],[6,5,8,4,3],[6,5,8,5,3],[6,5,8,6,3],[6,5,8,7,3],[6,5,8,8,3],[6,5,8,9,4],[6,5,8,10,4],[6,5,9,4,3],[6,5,9,5,3],[6,5,9,6,3],[6,5,9,7,3],[6,5,9,8,3],[6,5,9,9,3],[6,5,9,10,4],[6,5,10,4,3],[6,5,10,5,3],[6,5,10,6,3],[6,5,10,7,3],[6,5,10,8,3],[6,5,10,9,3],[6,5,10,10,3],[6,6,3,4,1],[6,6,3,5,1],[6,6,3,6,1],[6,6,3,7,4],[6,6,3,8,4],[6,6,3,9,4],[6,6,3,10,4],[6,6,4,4,1],[6,6,4,5,1],[6,6,4,6,1],[6,6,4,7,4],[6,6,4,8,4],[6,6,4,9,4],[6,6,4,10,4],[6,6,5,4,1],[6,6,5,5,1],[6,6,5,6,1],[6,6,5,7,4],[6,6,5,8,4],[6,6,5,9,4],[6,6,5,10,4],[6,6,6,4,1],[6,6,6,5,1],[6,6,6,6,1],[6,6,6,7,4],[6,6,6,8,4],[6,6,6,9,4],[6,6,6,10,4],[6,6,7,4,3],[6,6,7,5,3],[6,6,7,6,3],[6,6,7,7,3],[6,6,7,8,4],[6,6,7,9,4],[6,6,7,10,4],[6,6,8,4,3],[6,6,8,5,3],[6,6,8,6,3],[6,6,8,7,3],[6,6,8,8,3],[6,6,8,9,4],[6,6,8,10,4],[6,6,9,4,3],[6,6,9,5,3],[6,6,9,6,3],[6,6,9,7,3],[6,6,9,8,3],[6,6,9,9,3],[6,6,9,10,4],[6,6,10,4,3],[6,6,10,5,3],[6,6,10,6,3],[6,6,10,7,3],[6,6,10,8,3],[6,6,10,9,3],[6,6,10,10,3],[6,7,3,4,2],[6,7,3,5,2],[6,7,3,6,2],[6,7,3,7,2],[6,7,3,8,4],[6,7,3,9,4],[6,7,3,10,4],[6,7,4,4,2],[6,7,4,5,2],[6,7,4,6,2],[6,7,4,7,2],[6,7,4,8,4],[6,7,4,9,4],[6,7,4,10,4],[6,7,5,4,2],[6,7,5,5,2],[6,7,5,6,2],[6,7,5,7,2],[6,7,5,8,4],[6,7,5,9,4],[6,7,5,10,4],[6,7,6,4,2],[6,7,6,5,2],[6,7,6,6,2],[6,7,6,7,2],[6,7,6,8,4],[6,7,6,9,4],[6,7,6,10,4],[6,7,7,4,2],[6,7,7,5,2],[6,7,7,6,2],[6,7,7,7,2],[6,7,7,8,4],[6,7,7,9,4],[6,7,7,10,4],[6,7,8,4,3],[6,7,8,5,3],[6,7,8,6,3],[6,7,8,7,3],[6,7,8,8,3],[6,7,8,9,4],[6,7,8,10,4],[6,7,9,4,3],[6,7,9,5,3],[6,7,9,6,3],[6,7,9,7,3],[6,7,9,8,3],[6,7,9,9,3],[6,7,9,10,4],[6,7,10,4,3],[6,7,10,5,3],[6,7,10,6,3],[6,7,10,7,3],[6,7,10,8,3],[6,7,10,9,3],[6,7,10,10,3],[6,8,3,4,2],[6,8,3,5,2],[6,8,3,6,2],[6,8,3,7,2],[6,8,3,8,2],[6,8,3,9,4],[6,8,3,10,4],[6,8,4,4,2],[6,8,4,5,2],[6,8,4,6,2],[6,8,4,7,2],[6,8,4,8,2],[6,8,4,9,4],[6,8,4,10,4],[6,8,5,4,2],[6,8,5,5,2],[6,8,5,6,2],[6,8,5,7,2],[6,8,5,8,2],[6,8,5,9,4],[6,8,5,10,4],[6,8,6,4,2],[6,8,6,5,2],[6,8,6,6,2],[6,8,6,7,2],[6,8,6,8,2],[6,8,6,9,4],[6,8,6,10,4],[6,8,7,4,2],[6,8,7,5,2],[6,8,7,6,2],[6,8,7,7,2],[6,8,7,8,2],[6,8,7,9,4],[6,8,7,10,4],[6,8,8,4,2],[6,8,8,5,2],[6,8,8,6,2],[6,8,8,7,2],[6,8,8,8,2],[6,8,8,9,4],[6,8,8,10,4],[6,8,9,4,3],[6,8,9,5,3],[6,8,9,6,3],[6,8,9,7,3],[6,8,9,8,3],[6,8,9,9,3],[6,8,9,10,4],[6,8,10,4,3],[6,8,10,5,3],[6,8,10,6,3],[6,8,10,7,3],[6,8,10,8,3],[6,8,10,9,3],[6,8,10,10,3],[6,9,3,4,2],[6,9,3,5,2],[6,9,3,6,2],[6,9,3,7,2],[6,9,3,8,2],[6,9,3,9,2],[6,9,3,10,4],[6,9,4,4,2],[6,9,4,5,2],[6,9,4,6,2],[6,9,4,7,2],[6,9,4,8,2],[6,9,4,9,2],[6,9,4,10,4],[6,9,5,4,2],[6,9,5,5,2],[6,9,5,6,2],[6,9,5,7,2],[6,9,5,8,2],[6,9,5,9,2],[6,9,5,10,4],[6,9,6,4,2],[6,9,6,5,2],[6,9,6,6,2],[6,9,6,7,2],[6,9,6,8,2],[6,9,6,9,2],[6,9,6,10,4],[6,9,7,4,2],[6,9,7,5,2],[6,9,7,6,2],[6,9,7,7,2],[6,9,7,8,2],[6,9,7,9,2],[6,9,7,10,4],[6,9,8,4,2],[6,9,8,5,2],[6,9,8,6,2],[6,9,8,7,2],[6,9,8,8,2],[6,9,8,9,2],[6,9,8,10,4],[6,9,9,4,2],[6,9,9,5,2],[6,9,9,6,2],[6,9,9,7,2],[6,9,9,8,2],[6,9,9,9,2],[6,9,9,10,4],[6,9,10,4,3],[6,9,10,5,3],[6,9,10,6,3],[6,9,10,7,3],[6,9,10,8,3],[6,9,10,9,3],[6,9,10,10,3],[6,10,3,4,2],[6,10,3,5,2],[6,10,3,6,2],[6,10,3,7,2],[6,10,3,8,2],[6,10,3,9,2],[6,10,3,10,2],[6,10,4,4,2],[6,10,4,5,2],[6,10,4,6,2],[6,10,4,7,2],[6,10,4,8,2],[6,10,4,9,2],[6,10,4,10,2],[6,10,5,4,2],[6,10,5,5,2],[6,10,5,6,2],[6,10,5,7,2],[6,10,5,8,2],[6,10,5,9,2],[6,10,5,10,2],[6,10,6,4,2],[6,10,6,5,2],[6,10,6,6,2],[6,10,6,7,2],[6,10,6,8,2],[6,10,6,9,2],[6,10,6,10,2],[6,10,7,4,2],[6,10,7,5,2],[6,10,7,6,2],[6,10,7,7,2],[6,10,7,8,2],[6,10,7,9,2],[6,10,7,10,2],[6,10,8,4,2],[6,10,8,5,2],[6,10,8,6,2],[6,10,8,7,2],[6,10,8,8,2],[6,10,8,9,2],[6,10,8,10,2],[6,10,9,4,2],[6,10,9,5,2],[6,10,9,6,2],[6,10,9,7,2],[6,10,9,8,2],[6,10,9,9,2],[6,10,9,10,2],[6,10,10,4,2],[6,10,10,5,2],[6,10,10,6,2],[6,10,10,7,2],[6,10,10,8,2],[6,10,10,9,2],[6,10,10,10,2],[6,11,3,4,2],[6,11,3,5,2],[6,11,3,6,2],[6,11,3,7,2],[6,11,3,8,2],[6,11,3,9,2],[6,11,3,10,2],[6,11,4,4,2],[6,11,4,5,2],[6,11,4,6,2],[6,11,4,7,2],[6,11,4,8,2],[6,11,4,9,2],[6,11,4,10,2],[6,11,5,4,2],[6,11,5,5,2],[6,11,5,6,2],[6,11,5,7,2],[6,11,5,8,2],[6,11,5,9,2],[6,11,5,10,2],[6,11,6,4,2],[6,11,6,5,2],[6,11,6,6,2],[6,11,6,7,2],[6,11,6,8,2],[6,11,6,9,2],[6,11,6,10,2],[6,11,7,4,2],[6,11,7,5,2],[6,11,7,6,2],[6,11,7,7,2],[6,11,7,8,2],[6,11,7,9,2],[6,11,7,10,2],[6,11,8,4,2],[6,11,8,5,2],[6,11,8,6,2],[6,11,8,7,2],[6,11,8,8,2],[6,11,8,9,2],[6,11,8,10,2],[6,11,9,4,2],[6,11,9,5,2],[6,11,9,6,2],[6,11,9,7,2],[6,11,9,8,2],[6,11,9,9,2],[6,11,9,10,2],[6,11,10,4,2],[6,11,10,5,2],[6,11,10,6,2],[6,11,10,7,2],[6,11,10,8,2],[6,11,10,9,2],[6,11,10,10,2],[6,12,3,4,2],[6,12,3,5,2],[6,12,3,6,2],[6,12,3,7,2],[6,12,3,8,2],[6,12,3,9,2],[6,12,3,10,2],[6,12,4,4,2],[6,12,4,5,2],[6,12,4,6,2],[6,12,4,7,2],[6,12,4,8,2],[6,12,4,9,2],[6,12,4,10,2],[6,12,5,4,2],[6,12,5,5,2],[6,12,5,6,2],[6,12,5,7,2],[6,12,5,8,2],[6,12,5,9,2],[6,12,5,10,2],[6,12,6,4,2],[6,12,6,5,2],[6,12,6,6,2],[6,12,6,7,2],[6,12,6,8,2],[6,12,6,9,2],[6,12,6,10,2],[6,12,7,4,2],[6,12,7,5,2],[6,12,7,6,2],[6,12,7,7,2],[6,12,7,8,2],[6,12,7,9,2],[6,12,7,10,2],[6,12,8,4,2],[6,12,8,5,2],[6,12,8,6,2],[6,12,8,7,2],[6,12,8,8,2],[6,12,8,9,2],[6,12,8,10,2],[6,12,9,4,2],[6,12,9,5,2],[6,12,9,6,2],[6,12,9,7,2],[6,12,9,8,2],[6,12,9,9,2],[6,12,9,10,2],[6,12,10,4,2],[6,12,10,5,2],[6,12,10,6,2],[6,12,10,7,2],[6,12,10,8,2],[6,12,10,9,2],[6,12,10,10,2],[7,4,3,4,1],[7,4,3,5,1],[7,4,3,6,1],[7,4,3,7,1],[7,4,3,8,4],[7,4,3,9,4],[7,4,3,10,4],[7,4,4,4,1],[7,4,4,5,1],[7,4,4,6,1],[7,4,4,7,1],[7,4,4,8,4],[7,4,4,9,4],[7,4,4,10,4],[7,4,5,4,1],[7,4,5,5,1],[7,4,5,6,1],[7,4,5,7,1],[7,4,5,8,4],[7,4,5,9,4],[7,4,5,10,4],[7,4,6,4,1],[7,4,6,5,1],[7,4,6,6,1],[7,4,6,7,1],[7,4,6,8,4],[7,4,6,9,4],[7,4,6,10,4],[7,4,7,4,1],[7,4,7,5,1],[7,4,7,6,1],[7,4,7,7,1],[7,4,7,8,4],[7,4,7,9,4],[7,4,7,10,4],[7,4,8,4,3],[7,4,8,5,3],[7,4,8,6,3],[7,4,8,7,3],[7,4,8,8,3],[7,4,8,9,4],[7,4,8,10,4],[7,4,9,4,3],[7,4,9,5,3],[7,4,9,6,3],[7,4,9,7,3],[7,4,9,8,3],[7,4,9,9,3],[7,4,9,10,4],[7,4,10,4,3],[7,4,10,5,3],[7,4,10,6,3],[7,4,10,7,3],[7,4,10,8,3],[7,4,10,9,3],[7,4,10,10,3],[7,5,3,4,1],[7,5,3,5,1],[7,5,3,6,1],[7,5,3,7,1],[7,5,3,8,4],[7,5,3,9,4],[7,5,3,10,4],[7,5,4,4,1],[7,5,4,5,1],[7,5,4,6,1],[7,5,4,7,1],[7,5,4,8,4],[7,5,4,9,4],[7,5,4,10,4],[7,5,5,4,1],[7,5,5,5,1],[7,5,5,6,1],[7,5,5,7,1],[7,5,5,8,4],[7,5,5,9,4],[7,5,5,10,4],[7,5,6,4,1],[7,5,6,5,1],[7,5,6,6,1],[7,5,6,7,1],[7,5,6,8,4],[7,5,6,9,4],[7,5,6,10,4],[7,5,7,4,1],[7,5,7,5,1],[7,5,7,6,1],[7,5,7,7,1],[7,5,7,8,4],[7,5,7,9,4],[7,5,7,10,4],[7,5,8,4,3],[7,5,8,5,3],[7,5,8,6,3],[7,5,8,7,3],[7,5,8,8,3],[7,5,8,9,4],[7,5,8,10,4],[7,5,9,4,3],[7,5,9,5,3],[7,5,9,6,3],[7,5,9,7,3],[7,5,9,8,3],[7,5,9,9,3],[7,5,9,10,4],[7,5,10,4,3],[7,5,10,5,3],[7,5,10,6,3],[7,5,10,7,3],[7,5,10,8,3],[7,5,10,9,3],[7,5,10,10,3],[7,6,3,4,1],[7,6,3,5,1],[7,6,3,6,1],[7,6,3,7,1],[7,6,3,8,4],[7,6,3,9,4],[7,6,3,10,4],[7,6,4,4,1],[7,6,4,5,1],[7,6,4,6,1],[7,6,4,7,1],[7,6,4,8,4],[7,6,4,9,4],[7,6,4,10,4],[7,6,5,4,1],[7,6,5,5,1],[7,6,5,6,1],[7,6,5,7,1],[7,6,5,8,4],[7,6,5,9,4],[7,6,5,10,4],[7,6,6,4,1],[7,6,6,5,1],[7,6,6,6,1],[7,6,6,7,1],[7,6,6,8,4],[7,6,6,9,4],[7,6,6,10,4],[7,6,7,4,1],[7,6,7,5,1],[7,6,7,6,1],[7,6,7,7,1],[7,6,7,8,4],[7,6,7,9,4],[7,6,7,10,4],[7,6,8,4,3],[7,6,8,5,3],[7,6,8,6,3],[7,6,8,7,3],[7,6,8,8,3],[7,6,8,9,4],[7,6,8,10,4],[7,6,9,4,3],[7,6,9,5,3],[7,6,9,6,3],[7,6,9,7,3],[7,6,9,8,3],[7,6,9,9,3],[7,6,9,10,4],[7,6,10,4,3],[7,6,10,5,3],[7,6,10,6,3],[7,6,10,7,3],[7,6,10,8,3],[7,6,10,9,3],[7,6,10,10,3],[7,7,3,4,1],[7,7,3,5,1],[7,7,3,6,1],[7,7,3,7,1],[7,7,3,8,4],[7,7,3,9,4],[7,7,3,10,4],[7,7,4,4,1],[7,7,4,5,1],[7,7,4,6,1],[7,7,4,7,1],[7,7,4,8,4],[7,7,4,9,4],[7,7,4,10,4],[7,7,5,4,1],[7,7,5,5,1],[7,7,5,6,1],[7,7,5,7,1],[7,7,5,8,4],[7,7,5,9,4],[7,7,5,10,4],[7,7,6,4,1],[7,7,6,5,1],[7,7,6,6,1],[7,7,6,7,1],[7,7,6,8,4],[7,7,6,9,4],[7,7,6,10,4],[7,7,7,4,1],[7,7,7,5,1],[7,7,7,6,1],[7,7,7,7,1],[7,7,7,8,4],[7,7,7,9,4],[7,7,7,10,4],[7,7,8,4,3],[7,7,8,5,3],[7,7,8,6,3],[7,7,8,7,3],[7,7,8,8,3],[7,7,8,9,4],[7,7,8,10,4],[7,7,9,4,3],[7,7,9,5,3],[7,7,9,6,3],[7,7,9,7,3],[7,7,9,8,3],[7,7,9,9,3],[7,7,9,10,4],[7,7,10,4,3],[7,7,10,5,3],[7,7,10,6,3],[7,7,10,7,3],[7,7,10,8,3],[7,7,10,9,3],[7,7,10,10,3],[7,8,3,4,2],[7,8,3,5,2],[7,8,3,6,2],[7,8,3,7,2],[7,8,3,8,2],[7,8,3,9,4],[7,8,3,10,4],[7,8,4,4,2],[7,8,4,5,2],[7,8,4,6,2],[7,8,4,7,2],[7,8,4,8,2],[7,8,4,9,4],[7,8,4,10,4],[7,8,5,4,2],[7,8,5,5,2],[7,8,5,6,2],[7,8,5,7,2],[7,8,5,8,2],[7,8,5,9,4],[7,8,5,10,4],[7,8,6,4,2],[7,8,6,5,2],[7,8,6,6,2],[7,8,6,7,2],[7,8,6,8,2],[7,8,6,9,4],[7,8,6,10,4],[7,8,7,4,2],[7,8,7,5,2],[7,8,7,6,2],[7,8,7,7,2],[7,8,7,8,2],[7,8,7,9,4],[7,8,7,10,4],[7,8,8,4,2],[7,8,8,5,2],[7,8,8,6,2],[7,8,8,7,2],[7,8,8,8,2],[7,8,8,9,4],[7,8,8,10,4],[7,8,9,4,3],[7,8,9,5,3],[7,8,9,6,3],[7,8,9,7,3],[7,8,9,8,3],[7,8,9,9,3],[7,8,9,10,4],[7,8,10,4,3],[7,8,10,5,3],[7,8,10,6,3],[7,8,10,7,3],[7,8,10,8,3],[7,8,10,9,3],[7,8,10,10,3],[7,9,3,4,2],[7,9,3,5,2],[7,9,3,6,2],[7,9,3,7,2],[7,9,3,8,2],[7,9,3,9,2],[7,9,3,10,4],[7,9,4,4,2],[7,9,4,5,2],[7,9,4,6,2],[7,9,4,7,2],[7,9,4,8,2],[7,9,4,9,2],[7,9,4,10,4],[7,9,5,4,2],[7,9,5,5,2],[7,9,5,6,2],[7,9,5,7,2],[7,9,5,8,2],[7,9,5,9,2],[7,9,5,10,4],[7,9,6,4,2],[7,9,6,5,2],[7,9,6,6,2],[7,9,6,7,2],[7,9,6,8,2],[7,9,6,9,2],[7,9,6,10,4],[7,9,7,4,2],[7,9,7,5,2],[7,9,7,6,2],[7,9,7,7,2],[7,9,7,8,2],[7,9,7,9,2],[7,9,7,10,4],[7,9,8,4,2],[7,9,8,5,2],[7,9,8,6,2],[7,9,8,7,2],[7,9,8,8,2],[7,9,8,9,2],[7,9,8,10,4],[7,9,9,4,2],[7,9,9,5,2],[7,9,9,6,2],[7,9,9,7,2],[7,9,9,8,2],[7,9,9,9,2],[7,9,9,10,4],[7,9,10,4,3],[7,9,10,5,3],[7,9,10,6,3],[7,9,10,7,3],[7,9,10,8,3],[7,9,10,9,3],[7,9,10,10,3],[7,10,3,4,2],[7,10,3,5,2],[7,10,3,6,2],[7,10,3,7,2],[7,10,3,8,2],[7,10,3,9,2],[7,10,3,10,2],[7,10,4,4,2],[7,10,4,5,2],[7,10,4,6,2],[7,10,4,7,2],[7,10,4,8,2],[7,10,4,9,2],[7,10,4,10,2],[7,10,5,4,2],[7,10,5,5,2],[7,10,5,6,2],[7,10,5,7,2],[7,10,5,8,2],[7,10,5,9,2],[7,10,5,10,2],[7,10,6,4,2],[7,10,6,5,2],[7,10,6,6,2],[7,10,6,7,2],[7,10,6,8,2],[7,10,6,9,2],[7,10,6,10,2],[7,10,7,4,2],[7,10,7,5,2],[7,10,7,6,2],[7,10,7,7,2],[7,10,7,8,2],[7,10,7,9,2],[7,10,7,10,2],[7,10,8,4,2],[7,10,8,5,2],[7,10,8,6,2],[7,10,8,7,2],[7,10,8,8,2],[7,10,8,9,2],[7,10,8,10,2],[7,10,9,4,2],[7,10,9,5,2],[7,10,9,6,2],[7,10,9,7,2],[7,10,9,8,2],[7,10,9,9,2],[7,10,9,10,2],[7,10,10,4,2],[7,10,10,5,2],[7,10,10,6,2],[7,10,10,7,2],[7,10,10,8,2],[7,10,10,9,2],[7,10,10,10,2],[7,11,3,4,2],[7,11,3,5,2],[7,11,3,6,2],[7,11,3,7,2],[7,11,3,8,2],[7,11,3,9,2],[7,11,3,10,2],[7,11,4,4,2],[7,11,4,5,2],[7,11,4,6,2],[7,11,4,7,2],[7,11,4,8,2],[7,11,4,9,2],[7,11,4,10,2],[7,11,5,4,2],[7,11,5,5,2],[7,11,5,6,2],[7,11,5,7,2],[7,11,5,8,2],[7,11,5,9,2],[7,11,5,10,2],[7,11,6,4,2],[7,11,6,5,2],[7,11,6,6,2],[7,11,6,7,2],[7,11,6,8,2],[7,11,6,9,2],[7,11,6,10,2],[7,11,7,4,2],[7,11,7,5,2],[7,11,7,6,2],[7,11,7,7,2],[7,11,7,8,2],[7,11,7,9,2],[7,11,7,10,2],[7,11,8,4,2],[7,11,8,5,2],[7,11,8,6,2],[7,11,8,7,2],[7,11,8,8,2],[7,11,8,9,2],[7,11,8,10,2],[7,11,9,4,2],[7,11,9,5,2],[7,11,9,6,2],[7,11,9,7,2],[7,11,9,8,2],[7,11,9,9,2],[7,11,9,10,2],[7,11,10,4,2],[7,11,10,5,2],[7,11,10,6,2],[7,11,10,7,2],[7,11,10,8,2],[7,11,10,9,2],[7,11,10,10,2],[7,12,3,4,2],[7,12,3,5,2],[7,12,3,6,2],[7,12,3,7,2],[7,12,3,8,2],[7,12,3,9,2],[7,12,3,10,2],[7,12,4,4,2],[7,12,4,5,2],[7,12,4,6,2],[7,12,4,7,2],[7,12,4,8,2],[7,12,4,9,2],[7,12,4,10,2],[7,12,5,4,2],[7,12,5,5,2],[7,12,5,6,2],[7,12,5,7,2],[7,12,5,8,2],[7,12,5,9,2],[7,12,5,10,2],[7,12,6,4,2],[7,12,6,5,2],[7,12,6,6,2],[7,12,6,7,2],[7,12,6,8,2],[7,12,6,9,2],[7,12,6,10,2],[7,12,7,4,2],[7,12,7,5,2],[7,12,7,6,2],[7,12,7,7,2],[7,12,7,8,2],[7,12,7,9,2],[7,12,7,10,2],[7,12,8,4,2],[7,12,8,5,2],[7,12,8,6,2],[7,12,8,7,2],[7,12,8,8,2],[7,12,8,9,2],[7,12,8,10,2],[7,12,9,4,2],[7,12,9,5,2],[7,12,9,6,2],[7,12,9,7,2],[7,12,9,8,2],[7,12,9,9,2],[7,12,9,10,2],[7,12,10,4,2],[7,12,10,5,2],[7,12,10,6,2],[7,12,10,7,2],[7,12,10,8,2],[7,12,10,9,2],[7,12,10,10,2]].

test_at_most =>
    L = new_list(3),
    L :: 0..3,
    at_most(2,L,0),
    Sols = solve_all(L).sort(),
    Sols = [[0,0,1],[0,0,2],[0,0,3],[0,1,0],[0,1,1],[0,1,2],[0,1,3],[0,2,0],[0,2,1],[0,2,2],[0,2,3],[0,3,0],[0,3,1],[0,3,2],[0,3,3],[1,0,0],[1,0,1],[1,0,2],[1,0,3],[1,1,0],[1,1,1],[1,1,2],[1,1,3],[1,2,0],[1,2,1],[1,2,2],[1,2,3],[1,3,0],[1,3,1],[1,3,2],[1,3,3],[2,0,0],[2,0,1],[2,0,2],[2,0,3],[2,1,0],[2,1,1],[2,1,2],[2,1,3],[2,2,0],[2,2,1],[2,2,2],[2,2,3],[2,3,0],[2,3,1],[2,3,2],[2,3,3],[3,0,0],[3,0,1],[3,0,2],[3,0,3],[3,1,0],[3,1,1],[3,1,2],[3,1,3],[3,2,0],[3,2,1],[3,2,2],[3,2,3],[3,3,0],[3,3,1],[3,3,2],[3,3,3]].
        
test_alldiff_except_0 =>
    L = new_list(3),
    L[1] = 0,
    L :: 0..21,
    alldifferent_except_0(L),
    Sols = solve_all(L).sort(),
    Sols = [[0,0,0],[0,0,1],[0,0,2],[0,0,3],[0,0,4],[0,0,5],[0,0,6],[0,0,7],[0,0,8],[0,0,9],[0,0,10],[0,0,11],[0,0,12],[0,0,13],[0,0,14],[0,0,15],[0,0,16],[0,0,17],[0,0,18],[0,0,19],[0,0,20],[0,0,21],[0,1,0],[0,1,2],[0,1,3],[0,1,4],[0,1,5],[0,1,6],[0,1,7],[0,1,8],[0,1,9],[0,1,10],[0,1,11],[0,1,12],[0,1,13],[0,1,14],[0,1,15],[0,1,16],[0,1,17],[0,1,18],[0,1,19],[0,1,20],[0,1,21],[0,2,0],[0,2,1],[0,2,3],[0,2,4],[0,2,5],[0,2,6],[0,2,7],[0,2,8],[0,2,9],[0,2,10],[0,2,11],[0,2,12],[0,2,13],[0,2,14],[0,2,15],[0,2,16],[0,2,17],[0,2,18],[0,2,19],[0,2,20],[0,2,21],[0,3,0],[0,3,1],[0,3,2],[0,3,4],[0,3,5],[0,3,6],[0,3,7],[0,3,8],[0,3,9],[0,3,10],[0,3,11],[0,3,12],[0,3,13],[0,3,14],[0,3,15],[0,3,16],[0,3,17],[0,3,18],[0,3,19],[0,3,20],[0,3,21],[0,4,0],[0,4,1],[0,4,2],[0,4,3],[0,4,5],[0,4,6],[0,4,7],[0,4,8],[0,4,9],[0,4,10],[0,4,11],[0,4,12],[0,4,13],[0,4,14],[0,4,15],[0,4,16],[0,4,17],[0,4,18],[0,4,19],[0,4,20],[0,4,21],[0,5,0],[0,5,1],[0,5,2],[0,5,3],[0,5,4],[0,5,6],[0,5,7],[0,5,8],[0,5,9],[0,5,10],[0,5,11],[0,5,12],[0,5,13],[0,5,14],[0,5,15],[0,5,16],[0,5,17],[0,5,18],[0,5,19],[0,5,20],[0,5,21],[0,6,0],[0,6,1],[0,6,2],[0,6,3],[0,6,4],[0,6,5],[0,6,7],[0,6,8],[0,6,9],[0,6,10],[0,6,11],[0,6,12],[0,6,13],[0,6,14],[0,6,15],[0,6,16],[0,6,17],[0,6,18],[0,6,19],[0,6,20],[0,6,21],[0,7,0],[0,7,1],[0,7,2],[0,7,3],[0,7,4],[0,7,5],[0,7,6],[0,7,8],[0,7,9],[0,7,10],[0,7,11],[0,7,12],[0,7,13],[0,7,14],[0,7,15],[0,7,16],[0,7,17],[0,7,18],[0,7,19],[0,7,20],[0,7,21],[0,8,0],[0,8,1],[0,8,2],[0,8,3],[0,8,4],[0,8,5],[0,8,6],[0,8,7],[0,8,9],[0,8,10],[0,8,11],[0,8,12],[0,8,13],[0,8,14],[0,8,15],[0,8,16],[0,8,17],[0,8,18],[0,8,19],[0,8,20],[0,8,21],[0,9,0],[0,9,1],[0,9,2],[0,9,3],[0,9,4],[0,9,5],[0,9,6],[0,9,7],[0,9,8],[0,9,10],[0,9,11],[0,9,12],[0,9,13],[0,9,14],[0,9,15],[0,9,16],[0,9,17],[0,9,18],[0,9,19],[0,9,20],[0,9,21],[0,10,0],[0,10,1],[0,10,2],[0,10,3],[0,10,4],[0,10,5],[0,10,6],[0,10,7],[0,10,8],[0,10,9],[0,10,11],[0,10,12],[0,10,13],[0,10,14],[0,10,15],[0,10,16],[0,10,17],[0,10,18],[0,10,19],[0,10,20],[0,10,21],[0,11,0],[0,11,1],[0,11,2],[0,11,3],[0,11,4],[0,11,5],[0,11,6],[0,11,7],[0,11,8],[0,11,9],[0,11,10],[0,11,12],[0,11,13],[0,11,14],[0,11,15],[0,11,16],[0,11,17],[0,11,18],[0,11,19],[0,11,20],[0,11,21],[0,12,0],[0,12,1],[0,12,2],[0,12,3],[0,12,4],[0,12,5],[0,12,6],[0,12,7],[0,12,8],[0,12,9],[0,12,10],[0,12,11],[0,12,13],[0,12,14],[0,12,15],[0,12,16],[0,12,17],[0,12,18],[0,12,19],[0,12,20],[0,12,21],[0,13,0],[0,13,1],[0,13,2],[0,13,3],[0,13,4],[0,13,5],[0,13,6],[0,13,7],[0,13,8],[0,13,9],[0,13,10],[0,13,11],[0,13,12],[0,13,14],[0,13,15],[0,13,16],[0,13,17],[0,13,18],[0,13,19],[0,13,20],[0,13,21],[0,14,0],[0,14,1],[0,14,2],[0,14,3],[0,14,4],[0,14,5],[0,14,6],[0,14,7],[0,14,8],[0,14,9],[0,14,10],[0,14,11],[0,14,12],[0,14,13],[0,14,15],[0,14,16],[0,14,17],[0,14,18],[0,14,19],[0,14,20],[0,14,21],[0,15,0],[0,15,1],[0,15,2],[0,15,3],[0,15,4],[0,15,5],[0,15,6],[0,15,7],[0,15,8],[0,15,9],[0,15,10],[0,15,11],[0,15,12],[0,15,13],[0,15,14],[0,15,16],[0,15,17],[0,15,18],[0,15,19],[0,15,20],[0,15,21],[0,16,0],[0,16,1],[0,16,2],[0,16,3],[0,16,4],[0,16,5],[0,16,6],[0,16,7],[0,16,8],[0,16,9],[0,16,10],[0,16,11],[0,16,12],[0,16,13],[0,16,14],[0,16,15],[0,16,17],[0,16,18],[0,16,19],[0,16,20],[0,16,21],[0,17,0],[0,17,1],[0,17,2],[0,17,3],[0,17,4],[0,17,5],[0,17,6],[0,17,7],[0,17,8],[0,17,9],[0,17,10],[0,17,11],[0,17,12],[0,17,13],[0,17,14],[0,17,15],[0,17,16],[0,17,18],[0,17,19],[0,17,20],[0,17,21],[0,18,0],[0,18,1],[0,18,2],[0,18,3],[0,18,4],[0,18,5],[0,18,6],[0,18,7],[0,18,8],[0,18,9],[0,18,10],[0,18,11],[0,18,12],[0,18,13],[0,18,14],[0,18,15],[0,18,16],[0,18,17],[0,18,19],[0,18,20],[0,18,21],[0,19,0],[0,19,1],[0,19,2],[0,19,3],[0,19,4],[0,19,5],[0,19,6],[0,19,7],[0,19,8],[0,19,9],[0,19,10],[0,19,11],[0,19,12],[0,19,13],[0,19,14],[0,19,15],[0,19,16],[0,19,17],[0,19,18],[0,19,20],[0,19,21],[0,20,0],[0,20,1],[0,20,2],[0,20,3],[0,20,4],[0,20,5],[0,20,6],[0,20,7],[0,20,8],[0,20,9],[0,20,10],[0,20,11],[0,20,12],[0,20,13],[0,20,14],[0,20,15],[0,20,16],[0,20,17],[0,20,18],[0,20,19],[0,20,21],[0,21,0],[0,21,1],[0,21,2],[0,21,3],[0,21,4],[0,21,5],[0,21,6],[0,21,7],[0,21,8],[0,21,9],[0,21,10],[0,21,11],[0,21,12],[0,21,13],[0,21,14],[0,21,15],[0,21,16],[0,21,17],[0,21,18],[0,21,19],[0,21,20]].

    

test_add_m1 =>
    X :: -1..9,
    Y :: 2..11,
    X+Y #= Z,
    Sols = solve_all([X,Y,Z]).sort(),
    Sols = [[-1,2,1],[-1,3,2],[-1,4,3],[-1,5,4],[-1,6,5],[-1,7,6],[-1,8,7],[-1,9,8],[-1,10,9],[-1,11,10],[0,2,2],[0,3,3],[0,4,4],[0,5,5],[0,6,6],[0,7,7],[0,8,8],[0,9,9],[0,10,10],[0,11,11],[1,2,3],[1,3,4],[1,4,5],[1,5,6],[1,6,7],[1,7,8],[1,8,9],[1,9,10],[1,10,11],[1,11,12],[2,2,4],[2,3,5],[2,4,6],[2,5,7],[2,6,8],[2,7,9],[2,8,10],[2,9,11],[2,10,12],[2,11,13],[3,2,5],[3,3,6],[3,4,7],[3,5,8],[3,6,9],[3,7,10],[3,8,11],[3,9,12],[3,10,13],[3,11,14],[4,2,6],[4,3,7],[4,4,8],[4,5,9],[4,6,10],[4,7,11],[4,8,12],[4,9,13],[4,10,14],[4,11,15],[5,2,7],[5,3,8],[5,4,9],[5,5,10],[5,6,11],[5,7,12],[5,8,13],[5,9,14],[5,10,15],[5,11,16],[6,2,8],[6,3,9],[6,4,10],[6,5,11],[6,6,12],[6,7,13],[6,8,14],[6,9,15],[6,10,16],[6,11,17],[7,2,9],[7,3,10],[7,4,11],[7,5,12],[7,6,13],[7,7,14],[7,8,15],[7,9,16],[7,10,17],[7,11,18],[8,2,10],[8,3,11],[8,4,12],[8,5,13],[8,6,14],[8,7,15],[8,8,16],[8,9,17],[8,10,18],[8,11,19],[9,2,11],[9,3,12],[9,4,13],[9,5,14],[9,6,15],[9,7,16],[9,8,17],[9,9,18],[9,10,19],[9,11,20]].
    

test_diffn_1 =>
    Vars=[X,Wx,Y,Wy], 
    Vars :: 0..4, 
    diffn([[X,Wx],[Y,Wy]]),
    Sols = solve_all(Vars).sort(),
    Sols = [[0,0,0,0],[0,0,0,1],[0,0,0,2],[0,0,0,3],[0,0,0,4],[0,0,1,0],[0,0,1,1],[0,0,1,2],[0,0,1,3],[0,0,1,4],[0,0,2,0],[0,0,2,1],[0,0,2,2],[0,0,2,3],[0,0,2,4],[0,0,3,0],[0,0,3,1],[0,0,3,2],[0,0,3,3],[0,0,3,4],[0,0,4,0],[0,0,4,1],[0,0,4,2],[0,0,4,3],[0,0,4,4],[0,1,0,0],[0,1,1,0],[0,1,1,1],[0,1,1,2],[0,1,1,3],[0,1,1,4],[0,1,2,0],[0,1,2,1],[0,1,2,2],[0,1,2,3],[0,1,2,4],[0,1,3,0],[0,1,3,1],[0,1,3,2],[0,1,3,3],[0,1,3,4],[0,1,4,0],[0,1,4,1],[0,1,4,2],[0,1,4,3],[0,1,4,4],[0,2,0,0],[0,2,2,0],[0,2,2,1],[0,2,2,2],[0,2,2,3],[0,2,2,4],[0,2,3,0],[0,2,3,1],[0,2,3,2],[0,2,3,3],[0,2,3,4],[0,2,4,0],[0,2,4,1],[0,2,4,2],[0,2,4,3],[0,2,4,4],[0,3,0,0],[0,3,3,0],[0,3,3,1],[0,3,3,2],[0,3,3,3],[0,3,3,4],[0,3,4,0],[0,3,4,1],[0,3,4,2],[0,3,4,3],[0,3,4,4],[0,4,0,0],[0,4,4,0],[0,4,4,1],[0,4,4,2],[0,4,4,3],[0,4,4,4],[1,0,0,0],[1,0,0,1],[1,0,1,0],[1,0,1,1],[1,0,1,2],[1,0,1,3],[1,0,1,4],[1,0,2,0],[1,0,2,1],[1,0,2,2],[1,0,2,3],[1,0,2,4],[1,0,3,0],[1,0,3,1],[1,0,3,2],[1,0,3,3],[1,0,3,4],[1,0,4,0],[1,0,4,1],[1,0,4,2],[1,0,4,3],[1,0,4,4],[1,1,0,0],[1,1,0,1],[1,1,1,0],[1,1,2,0],[1,1,2,1],[1,1,2,2],[1,1,2,3],[1,1,2,4],[1,1,3,0],[1,1,3,1],[1,1,3,2],[1,1,3,3],[1,1,3,4],[1,1,4,0],[1,1,4,1],[1,1,4,2],[1,1,4,3],[1,1,4,4],[1,2,0,0],[1,2,0,1],[1,2,1,0],[1,2,3,0],[1,2,3,1],[1,2,3,2],[1,2,3,3],[1,2,3,4],[1,2,4,0],[1,2,4,1],[1,2,4,2],[1,2,4,3],[1,2,4,4],[1,3,0,0],[1,3,0,1],[1,3,1,0],[1,3,4,0],[1,3,4,1],[1,3,4,2],[1,3,4,3],[1,3,4,4],[1,4,0,0],[1,4,0,1],[1,4,1,0],[2,0,0,0],[2,0,0,1],[2,0,0,2],[2,0,1,0],[2,0,1,1],[2,0,2,0],[2,0,2,1],[2,0,2,2],[2,0,2,3],[2,0,2,4],[2,0,3,0],[2,0,3,1],[2,0,3,2],[2,0,3,3],[2,0,3,4],[2,0,4,0],[2,0,4,1],[2,0,4,2],[2,0,4,3],[2,0,4,4],[2,1,0,0],[2,1,0,1],[2,1,0,2],[2,1,1,0],[2,1,1,1],[2,1,2,0],[2,1,3,0],[2,1,3,1],[2,1,3,2],[2,1,3,3],[2,1,3,4],[2,1,4,0],[2,1,4,1],[2,1,4,2],[2,1,4,3],[2,1,4,4],[2,2,0,0],[2,2,0,1],[2,2,0,2],[2,2,1,0],[2,2,1,1],[2,2,2,0],[2,2,4,0],[2,2,4,1],[2,2,4,2],[2,2,4,3],[2,2,4,4],[2,3,0,0],[2,3,0,1],[2,3,0,2],[2,3,1,0],[2,3,1,1],[2,3,2,0],[2,4,0,0],[2,4,0,1],[2,4,0,2],[2,4,1,0],[2,4,1,1],[2,4,2,0],[3,0,0,0],[3,0,0,1],[3,0,0,2],[3,0,0,3],[3,0,1,0],[3,0,1,1],[3,0,1,2],[3,0,2,0],[3,0,2,1],[3,0,3,0],[3,0,3,1],[3,0,3,2],[3,0,3,3],[3,0,3,4],[3,0,4,0],[3,0,4,1],[3,0,4,2],[3,0,4,3],[3,0,4,4],[3,1,0,0],[3,1,0,1],[3,1,0,2],[3,1,0,3],[3,1,1,0],[3,1,1,1],[3,1,1,2],[3,1,2,0],[3,1,2,1],[3,1,3,0],[3,1,4,0],[3,1,4,1],[3,1,4,2],[3,1,4,3],[3,1,4,4],[3,2,0,0],[3,2,0,1],[3,2,0,2],[3,2,0,3],[3,2,1,0],[3,2,1,1],[3,2,1,2],[3,2,2,0],[3,2,2,1],[3,2,3,0],[3,3,0,0],[3,3,0,1],[3,3,0,2],[3,3,0,3],[3,3,1,0],[3,3,1,1],[3,3,1,2],[3,3,2,0],[3,3,2,1],[3,3,3,0],[3,4,0,0],[3,4,0,1],[3,4,0,2],[3,4,0,3],[3,4,1,0],[3,4,1,1],[3,4,1,2],[3,4,2,0],[3,4,2,1],[3,4,3,0],[4,0,0,0],[4,0,0,1],[4,0,0,2],[4,0,0,3],[4,0,0,4],[4,0,1,0],[4,0,1,1],[4,0,1,2],[4,0,1,3],[4,0,2,0],[4,0,2,1],[4,0,2,2],[4,0,3,0],[4,0,3,1],[4,0,4,0],[4,0,4,1],[4,0,4,2],[4,0,4,3],[4,0,4,4],[4,1,0,0],[4,1,0,1],[4,1,0,2],[4,1,0,3],[4,1,0,4],[4,1,1,0],[4,1,1,1],[4,1,1,2],[4,1,1,3],[4,1,2,0],[4,1,2,1],[4,1,2,2],[4,1,3,0],[4,1,3,1],[4,1,4,0],[4,2,0,0],[4,2,0,1],[4,2,0,2],[4,2,0,3],[4,2,0,4],[4,2,1,0],[4,2,1,1],[4,2,1,2],[4,2,1,3],[4,2,2,0],[4,2,2,1],[4,2,2,2],[4,2,3,0],[4,2,3,1],[4,2,4,0],[4,3,0,0],[4,3,0,1],[4,3,0,2],[4,3,0,3],[4,3,0,4],[4,3,1,0],[4,3,1,1],[4,3,1,2],[4,3,1,3],[4,3,2,0],[4,3,2,1],[4,3,2,2],[4,3,3,0],[4,3,3,1],[4,3,4,0],[4,4,0,0],[4,4,0,1],[4,4,0,2],[4,4,0,3],[4,4,0,4],[4,4,1,0],[4,4,1,1],[4,4,1,2],[4,4,1,3],[4,4,2,0],[4,4,2,1],[4,4,2,2],[4,4,3,0],[4,4,3,1],[4,4,4,0]].
    

test_diffn_2 =>
    Vars=[X1,Y1,X2,Y2],
    Vars :: 1..4,
    diffn([[X1,Y1,3,3],[X2,Y2,1,1]]),
    Sols = solve_all(Vars).sort(),
    Sols = [[1,1,1,4],[1,1,2,4],[1,1,3,4],[1,1,4,1],[1,1,4,2],[1,1,4,3],[1,1,4,4],[1,2,1,1],[1,2,2,1],[1,2,3,1],[1,2,4,1],[1,2,4,2],[1,2,4,3],[1,2,4,4],[1,3,1,1],[1,3,1,2],[1,3,2,1],[1,3,2,2],[1,3,3,1],[1,3,3,2],[1,3,4,1],[1,3,4,2],[1,3,4,3],[1,3,4,4],[1,4,1,1],[1,4,1,2],[1,4,1,3],[1,4,2,1],[1,4,2,2],[1,4,2,3],[1,4,3,1],[1,4,3,2],[1,4,3,3],[1,4,4,1],[1,4,4,2],[1,4,4,3],[1,4,4,4],[2,1,1,1],[2,1,1,2],[2,1,1,3],[2,1,1,4],[2,1,2,4],[2,1,3,4],[2,1,4,4],[2,2,1,1],[2,2,1,2],[2,2,1,3],[2,2,1,4],[2,2,2,1],[2,2,3,1],[2,2,4,1],[2,3,1,1],[2,3,1,2],[2,3,1,3],[2,3,1,4],[2,3,2,1],[2,3,2,2],[2,3,3,1],[2,3,3,2],[2,3,4,1],[2,3,4,2],[2,4,1,1],[2,4,1,2],[2,4,1,3],[2,4,1,4],[2,4,2,1],[2,4,2,2],[2,4,2,3],[2,4,3,1],[2,4,3,2],[2,4,3,3],[2,4,4,1],[2,4,4,2],[2,4,4,3],[3,1,1,1],[3,1,1,2],[3,1,1,3],[3,1,1,4],[3,1,2,1],[3,1,2,2],[3,1,2,3],[3,1,2,4],[3,1,3,4],[3,1,4,4],[3,2,1,1],[3,2,1,2],[3,2,1,3],[3,2,1,4],[3,2,2,1],[3,2,2,2],[3,2,2,3],[3,2,2,4],[3,2,3,1],[3,2,4,1],[3,3,1,1],[3,3,1,2],[3,3,1,3],[3,3,1,4],[3,3,2,1],[3,3,2,2],[3,3,2,3],[3,3,2,4],[3,3,3,1],[3,3,3,2],[3,3,4,1],[3,3,4,2],[3,4,1,1],[3,4,1,2],[3,4,1,3],[3,4,1,4],[3,4,2,1],[3,4,2,2],[3,4,2,3],[3,4,2,4],[3,4,3,1],[3,4,3,2],[3,4,3,3],[3,4,4,1],[3,4,4,2],[3,4,4,3],[4,1,1,1],[4,1,1,2],[4,1,1,3],[4,1,1,4],[4,1,2,1],[4,1,2,2],[4,1,2,3],[4,1,2,4],[4,1,3,1],[4,1,3,2],[4,1,3,3],[4,1,3,4],[4,1,4,4],[4,2,1,1],[4,2,1,2],[4,2,1,3],[4,2,1,4],[4,2,2,1],[4,2,2,2],[4,2,2,3],[4,2,2,4],[4,2,3,1],[4,2,3,2],[4,2,3,3],[4,2,3,4],[4,2,4,1],[4,3,1,1],[4,3,1,2],[4,3,1,3],[4,3,1,4],[4,3,2,1],[4,3,2,2],[4,3,2,3],[4,3,2,4],[4,3,3,1],[4,3,3,2],[4,3,3,3],[4,3,3,4],[4,3,4,1],[4,3,4,2],[4,4,1,1],[4,4,1,2],[4,4,1,3],[4,4,1,4],[4,4,2,1],[4,4,2,2],[4,4,2,3],[4,4,2,4],[4,4,3,1],[4,4,3,2],[4,4,3,3],[4,4,3,4],[4,4,4,1],[4,4,4,2],[4,4,4,3]].

test_reif_dom =>
    X :: -3..4,
    B #<=> X :: [-3,3],
    Sols = solve_all([B,X]).sort(),
    Sols = [[0,-2],[0,-1],[0,0],[0,1],[0,2],[0,4],[1,-3],[1,3]].
    
test_pow =>
    X:: -1000..1000,
    X**2 #= 25,
    Sols = solve_all(X).sort(),
    Sols = [-5, 5].
    
test_reif_le_ge =>
    X :: -7..7,
    X #=< -3 #\/ X #>= 3,
    Sols = solve_all([X]).sort(),
    Sols = [[-7],[-6],[-5],[-4],[-3],[3],[4],[5],[6],[7]].

test_reif_le_eq =>
    X :: -7..7,
    B1 #<=> X #=< -3,
    B2 #<=> X #= 4,
    Sols = solve_all([B1,B2,X]).sort(),
    Sols = [[0,0,-2],[0,0,-1],[0,0,0],[0,0,1],[0,0,2],[0,0,3],[0,0,5],[0,0,6],[0,0,7],[0,1,4],[1,0,-7],[1,0,-6],[1,0,-5],[1,0,-4],[1,0,-3]].

test_reif_ge_eq =>
    X :: -7..7,
    B1 #<=> X #>= 3,
    B2 #<=> X #= -4,
    Sols = solve_all([B1,B2,X]).sort(),
    Sols = [[0,0,-7],[0,0,-6],[0,0,-5],[0,0,-3],[0,0,-2],[0,0,-1],[0,0,0],[0,0,1],[0,0,2],[0,1,-4],[1,0,3],[1,0,4],[1,0,5],[1,0,6],[1,0,7]].
        
test_ge =>
    [X,Y] :: -10..10,
    X #=< Y,
    Sols = solve_all([X,Y]).sort(),
    Sols = [[-10,-10],[-10,-9],[-10,-8],[-10,-7],[-10,-6],[-10,-5],[-10,-4],[-10,-3],[-10,-2],[-10,-1],[-10,0],[-10,1],[-10,2],[-10,3],[-10,4],[-10,5],[-10,6],[-10,7],[-10,8],[-10,9],[-10,10],[-9,-9],[-9,-8],[-9,-7],[-9,-6],[-9,-5],[-9,-4],[-9,-3],[-9,-2],[-9,-1],[-9,0],[-9,1],[-9,2],[-9,3],[-9,4],[-9,5],[-9,6],[-9,7],[-9,8],[-9,9],[-9,10],[-8,-8],[-8,-7],[-8,-6],[-8,-5],[-8,-4],[-8,-3],[-8,-2],[-8,-1],[-8,0],[-8,1],[-8,2],[-8,3],[-8,4],[-8,5],[-8,6],[-8,7],[-8,8],[-8,9],[-8,10],[-7,-7],[-7,-6],[-7,-5],[-7,-4],[-7,-3],[-7,-2],[-7,-1],[-7,0],[-7,1],[-7,2],[-7,3],[-7,4],[-7,5],[-7,6],[-7,7],[-7,8],[-7,9],[-7,10],[-6,-6],[-6,-5],[-6,-4],[-6,-3],[-6,-2],[-6,-1],[-6,0],[-6,1],[-6,2],[-6,3],[-6,4],[-6,5],[-6,6],[-6,7],[-6,8],[-6,9],[-6,10],[-5,-5],[-5,-4],[-5,-3],[-5,-2],[-5,-1],[-5,0],[-5,1],[-5,2],[-5,3],[-5,4],[-5,5],[-5,6],[-5,7],[-5,8],[-5,9],[-5,10],[-4,-4],[-4,-3],[-4,-2],[-4,-1],[-4,0],[-4,1],[-4,2],[-4,3],[-4,4],[-4,5],[-4,6],[-4,7],[-4,8],[-4,9],[-4,10],[-3,-3],[-3,-2],[-3,-1],[-3,0],[-3,1],[-3,2],[-3,3],[-3,4],[-3,5],[-3,6],[-3,7],[-3,8],[-3,9],[-3,10],[-2,-2],[-2,-1],[-2,0],[-2,1],[-2,2],[-2,3],[-2,4],[-2,5],[-2,6],[-2,7],[-2,8],[-2,9],[-2,10],[-1,-1],[-1,0],[-1,1],[-1,2],[-1,3],[-1,4],[-1,5],[-1,6],[-1,7],[-1,8],[-1,9],[-1,10],[0,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,8],[0,9],[0,10],[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[1,10],[2,2],[2,3],[2,4],[2,5],[2,6],[2,7],[2,8],[2,9],[2,10],[3,3],[3,4],[3,5],[3,6],[3,7],[3,8],[3,9],[3,10],[4,4],[4,5],[4,6],[4,7],[4,8],[4,9],[4,10],[5,5],[5,6],[5,7],[5,8],[5,9],[5,10],[6,6],[6,7],[6,8],[6,9],[6,10],[7,7],[7,8],[7,9],[7,10],[8,8],[8,9],[8,10],[9,9],[9,10],[10,10]].

test_gt =>
    [X,Y] :: -10..10,
    X #< Y,
    Sols = solve_all([X,Y]).sort(),
    Sols = [[-10,-9],[-10,-8],[-10,-7],[-10,-6],[-10,-5],[-10,-4],[-10,-3],[-10,-2],[-10,-1],[-10,0],[-10,1],[-10,2],[-10,3],[-10,4],[-10,5],[-10,6],[-10,7],[-10,8],[-10,9],[-10,10],[-9,-8],[-9,-7],[-9,-6],[-9,-5],[-9,-4],[-9,-3],[-9,-2],[-9,-1],[-9,0],[-9,1],[-9,2],[-9,3],[-9,4],[-9,5],[-9,6],[-9,7],[-9,8],[-9,9],[-9,10],[-8,-7],[-8,-6],[-8,-5],[-8,-4],[-8,-3],[-8,-2],[-8,-1],[-8,0],[-8,1],[-8,2],[-8,3],[-8,4],[-8,5],[-8,6],[-8,7],[-8,8],[-8,9],[-8,10],[-7,-6],[-7,-5],[-7,-4],[-7,-3],[-7,-2],[-7,-1],[-7,0],[-7,1],[-7,2],[-7,3],[-7,4],[-7,5],[-7,6],[-7,7],[-7,8],[-7,9],[-7,10],[-6,-5],[-6,-4],[-6,-3],[-6,-2],[-6,-1],[-6,0],[-6,1],[-6,2],[-6,3],[-6,4],[-6,5],[-6,6],[-6,7],[-6,8],[-6,9],[-6,10],[-5,-4],[-5,-3],[-5,-2],[-5,-1],[-5,0],[-5,1],[-5,2],[-5,3],[-5,4],[-5,5],[-5,6],[-5,7],[-5,8],[-5,9],[-5,10],[-4,-3],[-4,-2],[-4,-1],[-4,0],[-4,1],[-4,2],[-4,3],[-4,4],[-4,5],[-4,6],[-4,7],[-4,8],[-4,9],[-4,10],[-3,-2],[-3,-1],[-3,0],[-3,1],[-3,2],[-3,3],[-3,4],[-3,5],[-3,6],[-3,7],[-3,8],[-3,9],[-3,10],[-2,-1],[-2,0],[-2,1],[-2,2],[-2,3],[-2,4],[-2,5],[-2,6],[-2,7],[-2,8],[-2,9],[-2,10],[-1,0],[-1,1],[-1,2],[-1,3],[-1,4],[-1,5],[-1,6],[-1,7],[-1,8],[-1,9],[-1,10],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,8],[0,9],[0,10],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[1,10],[2,3],[2,4],[2,5],[2,6],[2,7],[2,8],[2,9],[2,10],[3,4],[3,5],[3,6],[3,7],[3,8],[3,9],[3,10],[4,5],[4,6],[4,7],[4,8],[4,9],[4,10],[5,6],[5,7],[5,8],[5,9],[5,10],[6,7],[6,8],[6,9],[6,10],[7,8],[7,9],[7,10],[8,9],[8,10],[9,10]].

test_reif_gt2 =>
    X :: -3..3,
    B #<=> X #> 1,
    B1 #<=> X #> 1,
    Sols = solve_all((B,B1,X)).sort(),
    Sols = [(0,0,-3),(0,0,-2),(0,0,-1),(0,0,0),(0,0,1),(1,1,2),(1,1,3)].

test_reif_eq =>
    [X,Y] :: -10..10,
    B :: 0..1,
    B #<=> (X #= Y),
    Sols = solve_all([B,X,Y]).sort(),
    Sols = [[0,-10,-9],[0,-10,-8],[0,-10,-7],[0,-10,-6],[0,-10,-5],[0,-10,-4],[0,-10,-3],[0,-10,-2],[0,-10,-1],[0,-10,0],[0,-10,1],[0,-10,2],[0,-10,3],[0,-10,4],[0,-10,5],[0,-10,6],[0,-10,7],[0,-10,8],[0,-10,9],[0,-10,10],[0,-9,-10],[0,-9,-8],[0,-9,-7],[0,-9,-6],[0,-9,-5],[0,-9,-4],[0,-9,-3],[0,-9,-2],[0,-9,-1],[0,-9,0],[0,-9,1],[0,-9,2],[0,-9,3],[0,-9,4],[0,-9,5],[0,-9,6],[0,-9,7],[0,-9,8],[0,-9,9],[0,-9,10],[0,-8,-10],[0,-8,-9],[0,-8,-7],[0,-8,-6],[0,-8,-5],[0,-8,-4],[0,-8,-3],[0,-8,-2],[0,-8,-1],[0,-8,0],[0,-8,1],[0,-8,2],[0,-8,3],[0,-8,4],[0,-8,5],[0,-8,6],[0,-8,7],[0,-8,8],[0,-8,9],[0,-8,10],[0,-7,-10],[0,-7,-9],[0,-7,-8],[0,-7,-6],[0,-7,-5],[0,-7,-4],[0,-7,-3],[0,-7,-2],[0,-7,-1],[0,-7,0],[0,-7,1],[0,-7,2],[0,-7,3],[0,-7,4],[0,-7,5],[0,-7,6],[0,-7,7],[0,-7,8],[0,-7,9],[0,-7,10],[0,-6,-10],[0,-6,-9],[0,-6,-8],[0,-6,-7],[0,-6,-5],[0,-6,-4],[0,-6,-3],[0,-6,-2],[0,-6,-1],[0,-6,0],[0,-6,1],[0,-6,2],[0,-6,3],[0,-6,4],[0,-6,5],[0,-6,6],[0,-6,7],[0,-6,8],[0,-6,9],[0,-6,10],[0,-5,-10],[0,-5,-9],[0,-5,-8],[0,-5,-7],[0,-5,-6],[0,-5,-4],[0,-5,-3],[0,-5,-2],[0,-5,-1],[0,-5,0],[0,-5,1],[0,-5,2],[0,-5,3],[0,-5,4],[0,-5,5],[0,-5,6],[0,-5,7],[0,-5,8],[0,-5,9],[0,-5,10],[0,-4,-10],[0,-4,-9],[0,-4,-8],[0,-4,-7],[0,-4,-6],[0,-4,-5],[0,-4,-3],[0,-4,-2],[0,-4,-1],[0,-4,0],[0,-4,1],[0,-4,2],[0,-4,3],[0,-4,4],[0,-4,5],[0,-4,6],[0,-4,7],[0,-4,8],[0,-4,9],[0,-4,10],[0,-3,-10],[0,-3,-9],[0,-3,-8],[0,-3,-7],[0,-3,-6],[0,-3,-5],[0,-3,-4],[0,-3,-2],[0,-3,-1],[0,-3,0],[0,-3,1],[0,-3,2],[0,-3,3],[0,-3,4],[0,-3,5],[0,-3,6],[0,-3,7],[0,-3,8],[0,-3,9],[0,-3,10],[0,-2,-10],[0,-2,-9],[0,-2,-8],[0,-2,-7],[0,-2,-6],[0,-2,-5],[0,-2,-4],[0,-2,-3],[0,-2,-1],[0,-2,0],[0,-2,1],[0,-2,2],[0,-2,3],[0,-2,4],[0,-2,5],[0,-2,6],[0,-2,7],[0,-2,8],[0,-2,9],[0,-2,10],[0,-1,-10],[0,-1,-9],[0,-1,-8],[0,-1,-7],[0,-1,-6],[0,-1,-5],[0,-1,-4],[0,-1,-3],[0,-1,-2],[0,-1,0],[0,-1,1],[0,-1,2],[0,-1,3],[0,-1,4],[0,-1,5],[0,-1,6],[0,-1,7],[0,-1,8],[0,-1,9],[0,-1,10],[0,0,-10],[0,0,-9],[0,0,-8],[0,0,-7],[0,0,-6],[0,0,-5],[0,0,-4],[0,0,-3],[0,0,-2],[0,0,-1],[0,0,1],[0,0,2],[0,0,3],[0,0,4],[0,0,5],[0,0,6],[0,0,7],[0,0,8],[0,0,9],[0,0,10],[0,1,-10],[0,1,-9],[0,1,-8],[0,1,-7],[0,1,-6],[0,1,-5],[0,1,-4],[0,1,-3],[0,1,-2],[0,1,-1],[0,1,0],[0,1,2],[0,1,3],[0,1,4],[0,1,5],[0,1,6],[0,1,7],[0,1,8],[0,1,9],[0,1,10],[0,2,-10],[0,2,-9],[0,2,-8],[0,2,-7],[0,2,-6],[0,2,-5],[0,2,-4],[0,2,-3],[0,2,-2],[0,2,-1],[0,2,0],[0,2,1],[0,2,3],[0,2,4],[0,2,5],[0,2,6],[0,2,7],[0,2,8],[0,2,9],[0,2,10],[0,3,-10],[0,3,-9],[0,3,-8],[0,3,-7],[0,3,-6],[0,3,-5],[0,3,-4],[0,3,-3],[0,3,-2],[0,3,-1],[0,3,0],[0,3,1],[0,3,2],[0,3,4],[0,3,5],[0,3,6],[0,3,7],[0,3,8],[0,3,9],[0,3,10],[0,4,-10],[0,4,-9],[0,4,-8],[0,4,-7],[0,4,-6],[0,4,-5],[0,4,-4],[0,4,-3],[0,4,-2],[0,4,-1],[0,4,0],[0,4,1],[0,4,2],[0,4,3],[0,4,5],[0,4,6],[0,4,7],[0,4,8],[0,4,9],[0,4,10],[0,5,-10],[0,5,-9],[0,5,-8],[0,5,-7],[0,5,-6],[0,5,-5],[0,5,-4],[0,5,-3],[0,5,-2],[0,5,-1],[0,5,0],[0,5,1],[0,5,2],[0,5,3],[0,5,4],[0,5,6],[0,5,7],[0,5,8],[0,5,9],[0,5,10],[0,6,-10],[0,6,-9],[0,6,-8],[0,6,-7],[0,6,-6],[0,6,-5],[0,6,-4],[0,6,-3],[0,6,-2],[0,6,-1],[0,6,0],[0,6,1],[0,6,2],[0,6,3],[0,6,4],[0,6,5],[0,6,7],[0,6,8],[0,6,9],[0,6,10],[0,7,-10],[0,7,-9],[0,7,-8],[0,7,-7],[0,7,-6],[0,7,-5],[0,7,-4],[0,7,-3],[0,7,-2],[0,7,-1],[0,7,0],[0,7,1],[0,7,2],[0,7,3],[0,7,4],[0,7,5],[0,7,6],[0,7,8],[0,7,9],[0,7,10],[0,8,-10],[0,8,-9],[0,8,-8],[0,8,-7],[0,8,-6],[0,8,-5],[0,8,-4],[0,8,-3],[0,8,-2],[0,8,-1],[0,8,0],[0,8,1],[0,8,2],[0,8,3],[0,8,4],[0,8,5],[0,8,6],[0,8,7],[0,8,9],[0,8,10],[0,9,-10],[0,9,-9],[0,9,-8],[0,9,-7],[0,9,-6],[0,9,-5],[0,9,-4],[0,9,-3],[0,9,-2],[0,9,-1],[0,9,0],[0,9,1],[0,9,2],[0,9,3],[0,9,4],[0,9,5],[0,9,6],[0,9,7],[0,9,8],[0,9,10],[0,10,-10],[0,10,-9],[0,10,-8],[0,10,-7],[0,10,-6],[0,10,-5],[0,10,-4],[0,10,-3],[0,10,-2],[0,10,-1],[0,10,0],[0,10,1],[0,10,2],[0,10,3],[0,10,4],[0,10,5],[0,10,6],[0,10,7],[0,10,8],[0,10,9],[1,-10,-10],[1,-9,-9],[1,-8,-8],[1,-7,-7],[1,-6,-6],[1,-5,-5],[1,-4,-4],[1,-3,-3],[1,-2,-2],[1,-1,-1],[1,0,0],[1,1,1],[1,2,2],[1,3,3],[1,4,4],[1,5,5],[1,6,6],[1,7,7],[1,8,8],[1,9,9],[1,10,10]].
    

test_reif_eq2 =>
    X :: -10..10,
    B :: 0..1,
    B #<=> (X #= 7),
    Sols = solve_all([B,X]).sort(),
    Sols = [[0,-10],[0,-9],[0,-8],[0,-7],[0,-6],[0,-5],[0,-4],[0,-3],[0,-2],[0,-1],[0,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,8],[0,9],[0,10],[1,7]].

test_reif_eq3 =>
    X :: 0..1,
    B :: 0..1,
    B #<=> (X #= 2),
    Sols = solve_all([B,X]).sort(),
    println(Sols).
    
test_reif_bool_eq =>
    X :: 0..1,
    B :: 0..1,
    B #<=> X #= 1,
    Sols = solve_all([B,X]).sort(),
    Sols = [[0,0],[1,1]].

test_reif_bool_eq2 =>
    X :: 0..1,
    B :: 0..1,
    B #<=> X #= 0,
    Sols = solve_all([B,X]).sort(),
    Sols = [[0,1],[1,0]].

test_reif_bool_clause =>
    PVs = new_list(2),
    NVs = new_list(3),
    PVs :: 0..1,
    NVs :: 0..1,
    B :: 0..1,
    B #<=> -sum(PVs) - 5 + sum(NVs) #=< -1,
    Sols = solve_all([B|PVs]++NVs).sort(),
    Sols = [[1,0,0,0,0,0],[1,0,0,0,0,1],[1,0,0,0,1,0],[1,0,0,0,1,1],[1,0,0,1,0,0],[1,0,0,1,0,1],[1,0,0,1,1,0],[1,0,0,1,1,1],[1,0,1,0,0,0],[1,0,1,0,0,1],[1,0,1,0,1,0],[1,0,1,0,1,1],[1,0,1,1,0,0],[1,0,1,1,0,1],[1,0,1,1,1,0],[1,0,1,1,1,1],[1,1,0,0,0,0],[1,1,0,0,0,1],[1,1,0,0,1,0],[1,1,0,0,1,1],[1,1,0,1,0,0],[1,1,0,1,0,1],[1,1,0,1,1,0],[1,1,0,1,1,1],[1,1,1,0,0,0],[1,1,1,0,0,1],[1,1,1,0,1,0],[1,1,1,0,1,1],[1,1,1,1,0,0],[1,1,1,1,0,1],[1,1,1,1,1,0],[1,1,1,1,1,1]].

test_min =>
    X = _,
    L = [X : _ in 1..5],
    L :: -3..3,
    Z #= min(L),
    Sols = solve_all([Z|L]).sort(),
    Sols = [[-3,-3,-3,-3,-3,-3],[-2,-2,-2,-2,-2,-2],[-1,-1,-1,-1,-1,-1],[0,0,0,0,0,0],[1,1,1,1,1,1],[2,2,2,2,2,2],[3,3,3,3,3,3]].

test_min2 =>
    L = [_X,_Y],
    L :: -10..10,
    Z #= min(L),
    Sols = solve_all([Z|L]).sort(),
    Sols = [[-10,-10,-10],[-10,-10,-9],[-10,-10,-8],[-10,-10,-7],[-10,-10,-6],[-10,-10,-5],[-10,-10,-4],[-10,-10,-3],[-10,-10,-2],[-10,-10,-1],[-10,-10,0],[-10,-10,1],[-10,-10,2],[-10,-10,3],[-10,-10,4],[-10,-10,5],[-10,-10,6],[-10,-10,7],[-10,-10,8],[-10,-10,9],[-10,-10,10],[-10,-9,-10],[-10,-8,-10],[-10,-7,-10],[-10,-6,-10],[-10,-5,-10],[-10,-4,-10],[-10,-3,-10],[-10,-2,-10],[-10,-1,-10],[-10,0,-10],[-10,1,-10],[-10,2,-10],[-10,3,-10],[-10,4,-10],[-10,5,-10],[-10,6,-10],[-10,7,-10],[-10,8,-10],[-10,9,-10],[-10,10,-10],[-9,-9,-9],[-9,-9,-8],[-9,-9,-7],[-9,-9,-6],[-9,-9,-5],[-9,-9,-4],[-9,-9,-3],[-9,-9,-2],[-9,-9,-1],[-9,-9,0],[-9,-9,1],[-9,-9,2],[-9,-9,3],[-9,-9,4],[-9,-9,5],[-9,-9,6],[-9,-9,7],[-9,-9,8],[-9,-9,9],[-9,-9,10],[-9,-8,-9],[-9,-7,-9],[-9,-6,-9],[-9,-5,-9],[-9,-4,-9],[-9,-3,-9],[-9,-2,-9],[-9,-1,-9],[-9,0,-9],[-9,1,-9],[-9,2,-9],[-9,3,-9],[-9,4,-9],[-9,5,-9],[-9,6,-9],[-9,7,-9],[-9,8,-9],[-9,9,-9],[-9,10,-9],[-8,-8,-8],[-8,-8,-7],[-8,-8,-6],[-8,-8,-5],[-8,-8,-4],[-8,-8,-3],[-8,-8,-2],[-8,-8,-1],[-8,-8,0],[-8,-8,1],[-8,-8,2],[-8,-8,3],[-8,-8,4],[-8,-8,5],[-8,-8,6],[-8,-8,7],[-8,-8,8],[-8,-8,9],[-8,-8,10],[-8,-7,-8],[-8,-6,-8],[-8,-5,-8],[-8,-4,-8],[-8,-3,-8],[-8,-2,-8],[-8,-1,-8],[-8,0,-8],[-8,1,-8],[-8,2,-8],[-8,3,-8],[-8,4,-8],[-8,5,-8],[-8,6,-8],[-8,7,-8],[-8,8,-8],[-8,9,-8],[-8,10,-8],[-7,-7,-7],[-7,-7,-6],[-7,-7,-5],[-7,-7,-4],[-7,-7,-3],[-7,-7,-2],[-7,-7,-1],[-7,-7,0],[-7,-7,1],[-7,-7,2],[-7,-7,3],[-7,-7,4],[-7,-7,5],[-7,-7,6],[-7,-7,7],[-7,-7,8],[-7,-7,9],[-7,-7,10],[-7,-6,-7],[-7,-5,-7],[-7,-4,-7],[-7,-3,-7],[-7,-2,-7],[-7,-1,-7],[-7,0,-7],[-7,1,-7],[-7,2,-7],[-7,3,-7],[-7,4,-7],[-7,5,-7],[-7,6,-7],[-7,7,-7],[-7,8,-7],[-7,9,-7],[-7,10,-7],[-6,-6,-6],[-6,-6,-5],[-6,-6,-4],[-6,-6,-3],[-6,-6,-2],[-6,-6,-1],[-6,-6,0],[-6,-6,1],[-6,-6,2],[-6,-6,3],[-6,-6,4],[-6,-6,5],[-6,-6,6],[-6,-6,7],[-6,-6,8],[-6,-6,9],[-6,-6,10],[-6,-5,-6],[-6,-4,-6],[-6,-3,-6],[-6,-2,-6],[-6,-1,-6],[-6,0,-6],[-6,1,-6],[-6,2,-6],[-6,3,-6],[-6,4,-6],[-6,5,-6],[-6,6,-6],[-6,7,-6],[-6,8,-6],[-6,9,-6],[-6,10,-6],[-5,-5,-5],[-5,-5,-4],[-5,-5,-3],[-5,-5,-2],[-5,-5,-1],[-5,-5,0],[-5,-5,1],[-5,-5,2],[-5,-5,3],[-5,-5,4],[-5,-5,5],[-5,-5,6],[-5,-5,7],[-5,-5,8],[-5,-5,9],[-5,-5,10],[-5,-4,-5],[-5,-3,-5],[-5,-2,-5],[-5,-1,-5],[-5,0,-5],[-5,1,-5],[-5,2,-5],[-5,3,-5],[-5,4,-5],[-5,5,-5],[-5,6,-5],[-5,7,-5],[-5,8,-5],[-5,9,-5],[-5,10,-5],[-4,-4,-4],[-4,-4,-3],[-4,-4,-2],[-4,-4,-1],[-4,-4,0],[-4,-4,1],[-4,-4,2],[-4,-4,3],[-4,-4,4],[-4,-4,5],[-4,-4,6],[-4,-4,7],[-4,-4,8],[-4,-4,9],[-4,-4,10],[-4,-3,-4],[-4,-2,-4],[-4,-1,-4],[-4,0,-4],[-4,1,-4],[-4,2,-4],[-4,3,-4],[-4,4,-4],[-4,5,-4],[-4,6,-4],[-4,7,-4],[-4,8,-4],[-4,9,-4],[-4,10,-4],[-3,-3,-3],[-3,-3,-2],[-3,-3,-1],[-3,-3,0],[-3,-3,1],[-3,-3,2],[-3,-3,3],[-3,-3,4],[-3,-3,5],[-3,-3,6],[-3,-3,7],[-3,-3,8],[-3,-3,9],[-3,-3,10],[-3,-2,-3],[-3,-1,-3],[-3,0,-3],[-3,1,-3],[-3,2,-3],[-3,3,-3],[-3,4,-3],[-3,5,-3],[-3,6,-3],[-3,7,-3],[-3,8,-3],[-3,9,-3],[-3,10,-3],[-2,-2,-2],[-2,-2,-1],[-2,-2,0],[-2,-2,1],[-2,-2,2],[-2,-2,3],[-2,-2,4],[-2,-2,5],[-2,-2,6],[-2,-2,7],[-2,-2,8],[-2,-2,9],[-2,-2,10],[-2,-1,-2],[-2,0,-2],[-2,1,-2],[-2,2,-2],[-2,3,-2],[-2,4,-2],[-2,5,-2],[-2,6,-2],[-2,7,-2],[-2,8,-2],[-2,9,-2],[-2,10,-2],[-1,-1,-1],[-1,-1,0],[-1,-1,1],[-1,-1,2],[-1,-1,3],[-1,-1,4],[-1,-1,5],[-1,-1,6],[-1,-1,7],[-1,-1,8],[-1,-1,9],[-1,-1,10],[-1,0,-1],[-1,1,-1],[-1,2,-1],[-1,3,-1],[-1,4,-1],[-1,5,-1],[-1,6,-1],[-1,7,-1],[-1,8,-1],[-1,9,-1],[-1,10,-1],[0,0,0],[0,0,1],[0,0,2],[0,0,3],[0,0,4],[0,0,5],[0,0,6],[0,0,7],[0,0,8],[0,0,9],[0,0,10],[0,1,0],[0,2,0],[0,3,0],[0,4,0],[0,5,0],[0,6,0],[0,7,0],[0,8,0],[0,9,0],[0,10,0],[1,1,1],[1,1,2],[1,1,3],[1,1,4],[1,1,5],[1,1,6],[1,1,7],[1,1,8],[1,1,9],[1,1,10],[1,2,1],[1,3,1],[1,4,1],[1,5,1],[1,6,1],[1,7,1],[1,8,1],[1,9,1],[1,10,1],[2,2,2],[2,2,3],[2,2,4],[2,2,5],[2,2,6],[2,2,7],[2,2,8],[2,2,9],[2,2,10],[2,3,2],[2,4,2],[2,5,2],[2,6,2],[2,7,2],[2,8,2],[2,9,2],[2,10,2],[3,3,3],[3,3,4],[3,3,5],[3,3,6],[3,3,7],[3,3,8],[3,3,9],[3,3,10],[3,4,3],[3,5,3],[3,6,3],[3,7,3],[3,8,3],[3,9,3],[3,10,3],[4,4,4],[4,4,5],[4,4,6],[4,4,7],[4,4,8],[4,4,9],[4,4,10],[4,5,4],[4,6,4],[4,7,4],[4,8,4],[4,9,4],[4,10,4],[5,5,5],[5,5,6],[5,5,7],[5,5,8],[5,5,9],[5,5,10],[5,6,5],[5,7,5],[5,8,5],[5,9,5],[5,10,5],[6,6,6],[6,6,7],[6,6,8],[6,6,9],[6,6,10],[6,7,6],[6,8,6],[6,9,6],[6,10,6],[7,7,7],[7,7,8],[7,7,9],[7,7,10],[7,8,7],[7,9,7],[7,10,7],[8,8,8],[8,8,9],[8,8,10],[8,9,8],[8,10,8],[9,9,9],[9,9,10],[9,10,9],[10,10,10]].


test_max =>
    X = _,
    L = [X : _ in 1..5],
    L :: -3..3,
    Z #= max(L),
    Sols = solve_all([Z|L]).sort(),
    Sols = [[-3,-3,-3,-3,-3,-3],[-2,-2,-2,-2,-2,-2],[-1,-1,-1,-1,-1,-1],[0,0,0,0,0,0],[1,1,1,1,1,1],[2,2,2,2,2,2],[3,3,3,3,3,3]].

test_max2 =>
    L = [_X,_Y],
    L :: -10..10,
    Z #= max(L),
    Sols = solve_all([Z|L]).sort(),
    Sols = [[-10,-10,-10],[-9,-10,-9],[-9,-9,-10],[-9,-9,-9],[-8,-10,-8],[-8,-9,-8],[-8,-8,-10],[-8,-8,-9],[-8,-8,-8],[-7,-10,-7],[-7,-9,-7],[-7,-8,-7],[-7,-7,-10],[-7,-7,-9],[-7,-7,-8],[-7,-7,-7],[-6,-10,-6],[-6,-9,-6],[-6,-8,-6],[-6,-7,-6],[-6,-6,-10],[-6,-6,-9],[-6,-6,-8],[-6,-6,-7],[-6,-6,-6],[-5,-10,-5],[-5,-9,-5],[-5,-8,-5],[-5,-7,-5],[-5,-6,-5],[-5,-5,-10],[-5,-5,-9],[-5,-5,-8],[-5,-5,-7],[-5,-5,-6],[-5,-5,-5],[-4,-10,-4],[-4,-9,-4],[-4,-8,-4],[-4,-7,-4],[-4,-6,-4],[-4,-5,-4],[-4,-4,-10],[-4,-4,-9],[-4,-4,-8],[-4,-4,-7],[-4,-4,-6],[-4,-4,-5],[-4,-4,-4],[-3,-10,-3],[-3,-9,-3],[-3,-8,-3],[-3,-7,-3],[-3,-6,-3],[-3,-5,-3],[-3,-4,-3],[-3,-3,-10],[-3,-3,-9],[-3,-3,-8],[-3,-3,-7],[-3,-3,-6],[-3,-3,-5],[-3,-3,-4],[-3,-3,-3],[-2,-10,-2],[-2,-9,-2],[-2,-8,-2],[-2,-7,-2],[-2,-6,-2],[-2,-5,-2],[-2,-4,-2],[-2,-3,-2],[-2,-2,-10],[-2,-2,-9],[-2,-2,-8],[-2,-2,-7],[-2,-2,-6],[-2,-2,-5],[-2,-2,-4],[-2,-2,-3],[-2,-2,-2],[-1,-10,-1],[-1,-9,-1],[-1,-8,-1],[-1,-7,-1],[-1,-6,-1],[-1,-5,-1],[-1,-4,-1],[-1,-3,-1],[-1,-2,-1],[-1,-1,-10],[-1,-1,-9],[-1,-1,-8],[-1,-1,-7],[-1,-1,-6],[-1,-1,-5],[-1,-1,-4],[-1,-1,-3],[-1,-1,-2],[-1,-1,-1],[0,-10,0],[0,-9,0],[0,-8,0],[0,-7,0],[0,-6,0],[0,-5,0],[0,-4,0],[0,-3,0],[0,-2,0],[0,-1,0],[0,0,-10],[0,0,-9],[0,0,-8],[0,0,-7],[0,0,-6],[0,0,-5],[0,0,-4],[0,0,-3],[0,0,-2],[0,0,-1],[0,0,0],[1,-10,1],[1,-9,1],[1,-8,1],[1,-7,1],[1,-6,1],[1,-5,1],[1,-4,1],[1,-3,1],[1,-2,1],[1,-1,1],[1,0,1],[1,1,-10],[1,1,-9],[1,1,-8],[1,1,-7],[1,1,-6],[1,1,-5],[1,1,-4],[1,1,-3],[1,1,-2],[1,1,-1],[1,1,0],[1,1,1],[2,-10,2],[2,-9,2],[2,-8,2],[2,-7,2],[2,-6,2],[2,-5,2],[2,-4,2],[2,-3,2],[2,-2,2],[2,-1,2],[2,0,2],[2,1,2],[2,2,-10],[2,2,-9],[2,2,-8],[2,2,-7],[2,2,-6],[2,2,-5],[2,2,-4],[2,2,-3],[2,2,-2],[2,2,-1],[2,2,0],[2,2,1],[2,2,2],[3,-10,3],[3,-9,3],[3,-8,3],[3,-7,3],[3,-6,3],[3,-5,3],[3,-4,3],[3,-3,3],[3,-2,3],[3,-1,3],[3,0,3],[3,1,3],[3,2,3],[3,3,-10],[3,3,-9],[3,3,-8],[3,3,-7],[3,3,-6],[3,3,-5],[3,3,-4],[3,3,-3],[3,3,-2],[3,3,-1],[3,3,0],[3,3,1],[3,3,2],[3,3,3],[4,-10,4],[4,-9,4],[4,-8,4],[4,-7,4],[4,-6,4],[4,-5,4],[4,-4,4],[4,-3,4],[4,-2,4],[4,-1,4],[4,0,4],[4,1,4],[4,2,4],[4,3,4],[4,4,-10],[4,4,-9],[4,4,-8],[4,4,-7],[4,4,-6],[4,4,-5],[4,4,-4],[4,4,-3],[4,4,-2],[4,4,-1],[4,4,0],[4,4,1],[4,4,2],[4,4,3],[4,4,4],[5,-10,5],[5,-9,5],[5,-8,5],[5,-7,5],[5,-6,5],[5,-5,5],[5,-4,5],[5,-3,5],[5,-2,5],[5,-1,5],[5,0,5],[5,1,5],[5,2,5],[5,3,5],[5,4,5],[5,5,-10],[5,5,-9],[5,5,-8],[5,5,-7],[5,5,-6],[5,5,-5],[5,5,-4],[5,5,-3],[5,5,-2],[5,5,-1],[5,5,0],[5,5,1],[5,5,2],[5,5,3],[5,5,4],[5,5,5],[6,-10,6],[6,-9,6],[6,-8,6],[6,-7,6],[6,-6,6],[6,-5,6],[6,-4,6],[6,-3,6],[6,-2,6],[6,-1,6],[6,0,6],[6,1,6],[6,2,6],[6,3,6],[6,4,6],[6,5,6],[6,6,-10],[6,6,-9],[6,6,-8],[6,6,-7],[6,6,-6],[6,6,-5],[6,6,-4],[6,6,-3],[6,6,-2],[6,6,-1],[6,6,0],[6,6,1],[6,6,2],[6,6,3],[6,6,4],[6,6,5],[6,6,6],[7,-10,7],[7,-9,7],[7,-8,7],[7,-7,7],[7,-6,7],[7,-5,7],[7,-4,7],[7,-3,7],[7,-2,7],[7,-1,7],[7,0,7],[7,1,7],[7,2,7],[7,3,7],[7,4,7],[7,5,7],[7,6,7],[7,7,-10],[7,7,-9],[7,7,-8],[7,7,-7],[7,7,-6],[7,7,-5],[7,7,-4],[7,7,-3],[7,7,-2],[7,7,-1],[7,7,0],[7,7,1],[7,7,2],[7,7,3],[7,7,4],[7,7,5],[7,7,6],[7,7,7],[8,-10,8],[8,-9,8],[8,-8,8],[8,-7,8],[8,-6,8],[8,-5,8],[8,-4,8],[8,-3,8],[8,-2,8],[8,-1,8],[8,0,8],[8,1,8],[8,2,8],[8,3,8],[8,4,8],[8,5,8],[8,6,8],[8,7,8],[8,8,-10],[8,8,-9],[8,8,-8],[8,8,-7],[8,8,-6],[8,8,-5],[8,8,-4],[8,8,-3],[8,8,-2],[8,8,-1],[8,8,0],[8,8,1],[8,8,2],[8,8,3],[8,8,4],[8,8,5],[8,8,6],[8,8,7],[8,8,8],[9,-10,9],[9,-9,9],[9,-8,9],[9,-7,9],[9,-6,9],[9,-5,9],[9,-4,9],[9,-3,9],[9,-2,9],[9,-1,9],[9,0,9],[9,1,9],[9,2,9],[9,3,9],[9,4,9],[9,5,9],[9,6,9],[9,7,9],[9,8,9],[9,9,-10],[9,9,-9],[9,9,-8],[9,9,-7],[9,9,-6],[9,9,-5],[9,9,-4],[9,9,-3],[9,9,-2],[9,9,-1],[9,9,0],[9,9,1],[9,9,2],[9,9,3],[9,9,4],[9,9,5],[9,9,6],[9,9,7],[9,9,8],[9,9,9],[10,-10,10],[10,-9,10],[10,-8,10],[10,-7,10],[10,-6,10],[10,-5,10],[10,-4,10],[10,-3,10],[10,-2,10],[10,-1,10],[10,0,10],[10,1,10],[10,2,10],[10,3,10],[10,4,10],[10,5,10],[10,6,10],[10,7,10],[10,8,10],[10,9,10],[10,10,-10],[10,10,-9],[10,10,-8],[10,10,-7],[10,10,-6],[10,10,-5],[10,10,-4],[10,10,-3],[10,10,-2],[10,10,-1],[10,10,0],[10,10,1],[10,10,2],[10,10,3],[10,10,4],[10,10,5],[10,10,6],[10,10,7],[10,10,8],[10,10,9],[10,10,10]].

    
test_adder =>
    Xs = [X4,X3,X2,X1,X0],
    Xs :: 0..1,
    Ys = [Y4,Y3,Y2,Y1,Y0],
    Ys :: 0..1,
    X0 #= Y0,
    cons(X0,Y0,X1,Y1),
    cons(X1,Y1,X2,Y2),
    cons(X2,Y2,X3,Y3),
    cons(X3,Y3,X4,Y4),
    Sols = solve_all((Xs,Ys)).sort(),
    Sols = [([0,0,0,0,0],[0,0,0,0,0]),([0,0,0,0,1],[1,1,1,1,1]),([0,0,0,1,0],[1,1,1,1,0]),([0,0,0,1,1],[1,1,1,0,1]),([0,0,1,0,0],[1,1,1,0,0]),([0,0,1,0,1],[1,1,0,1,1]),([0,0,1,1,0],[1,1,0,1,0]),([0,0,1,1,1],[1,1,0,0,1]),([0,1,0,0,0],[1,1,0,0,0]),([0,1,0,0,1],[1,0,1,1,1]),([0,1,0,1,0],[1,0,1,1,0]),([0,1,0,1,1],[1,0,1,0,1]),([0,1,1,0,0],[1,0,1,0,0]),([0,1,1,0,1],[1,0,0,1,1]),([0,1,1,1,0],[1,0,0,1,0]),([0,1,1,1,1],[1,0,0,0,1]),([1,0,0,0,0],[1,0,0,0,0]),([1,0,0,0,1],[0,1,1,1,1]),([1,0,0,1,0],[0,1,1,1,0]),([1,0,0,1,1],[0,1,1,0,1]),([1,0,1,0,0],[0,1,1,0,0]),([1,0,1,0,1],[0,1,0,1,1]),([1,0,1,1,0],[0,1,0,1,0]),([1,0,1,1,1],[0,1,0,0,1]),([1,1,0,0,0],[0,1,0,0,0]),([1,1,0,0,1],[0,0,1,1,1]),([1,1,0,1,0],[0,0,1,1,0]),([1,1,0,1,1],[0,0,1,0,1]),([1,1,1,0,0],[0,0,1,0,0]),([1,1,1,0,1],[0,0,0,1,1]),([1,1,1,1,0],[0,0,0,1,0]),([1,1,1,1,1],[0,0,0,0,1])].


cons(X0,Y0,X1,Y1) =>
    (X0 #= 0 #/\ Y0 #= 0) #=> (X1 #= Y1),
    (X0 #= 1 #/\ Y0 #= 1) #=> (X1 #!= Y1),
    (X0 #!= Y0) #=> (X1 #!= Y1).

test_element =>
    element(I,[1,2,3],V),
    element(I1,[1,2,3],V1),
    element(I2,[1,2,3],V2),
    all_different([I,I1,I2]),
    Sols = solve_all([I,I1,I2,V,V1,V2]).sort(),
    Sols = [[1,2,3,1,2,3],[1,3,2,1,3,2],[2,1,3,2,1,3],[2,3,1,2,3,1],[3,1,2,3,1,2],[3,2,1,3,2,1]].

test_element0 =>
    element0(I,[1,2,3,4,5,6,700,1,2,3,4,5,6,700,1,2,3,4,5,6,700,1,2,3,4,5,6,700,1,2,3,4,5,6,700,1,2,3,4,5,6,700,1,2,3,4,5,6,700,1,2,3,4,5,6,700],V),
    Sols = solve_all([I,V]).sort(),
    Sols = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,700],[7,1],[8,2],[9,3],[10,4],[11,5],[12,6],[13,700],[14,1],[15,2],[16,3],[17,4],[18,5],[19,6],[20,700],[21,1],[22,2],[23,3],[24,4],[25,5],[26,6],[27,700],[28,1],[29,2],[30,3],[31,4],[32,5],[33,6],[34,700],[35,1],[36,2],[37,3],[38,4],[39,5],[40,6],[41,700],[42,1],[43,2],[44,3],[45,4],[46,5],[47,6],[48,700],[49,1],[50,2],[51,3],[52,4],[53,5],[54,6],[55,700]].

test_hcp1 =>
    A = {{_,_},{_,_}},
    hcp_grid(A),
    Sols = solve_all(A).sort(),
    Sols = [{{0,0},{0,0}},{{0,0},{0,1}},{{0,0},{1,0}},{{0,0},{1,1}},{{0,1},{0,0}},{{0,1},{0,1}},{{1,0},{0,0}},{{1,0},{1,0}},{{1,1},{0,0}},{{1,1},{1,1}}].

test_hcp2 =>
    N = 6,                                   % find all Hamilton cycles in the 
    L = new_list(N),
    L :: 1..N,
    my_circuit(L),
    Sols = solve_all(L).sort(),
    Sols = [[2,3,4,5,6,1],[2,3,4,6,1,5],[2,3,5,1,6,4],[2,3,5,6,4,1],[2,3,6,1,4,5],[2,3,6,5,1,4],[2,4,1,5,6,3],[2,4,1,6,3,5],[2,4,5,3,6,1],[2,4,5,6,1,3],[2,4,6,3,1,5],[2,4,6,5,3,1],[2,5,1,3,6,4],[2,5,1,6,4,3],[2,5,4,1,6,3],[2,5,4,6,3,1],[2,5,6,1,3,4],[2,5,6,3,4,1],[2,6,1,3,4,5],[2,6,1,5,3,4],[2,6,4,1,3,5],[2,6,4,5,1,3],[2,6,5,1,4,3],[2,6,5,3,1,4],[3,1,4,5,6,2],[3,1,4,6,2,5],[3,1,5,2,6,4],[3,1,5,6,4,2],[3,1,6,2,4,5],[3,1,6,5,2,4],[3,4,2,5,6,1],[3,4,2,6,1,5],[3,4,5,1,6,2],[3,4,5,6,2,1],[3,4,6,1,2,5],[3,4,6,5,1,2],[3,5,2,1,6,4],[3,5,2,6,4,1],[3,5,4,2,6,1],[3,5,4,6,1,2],[3,5,6,1,4,2],[3,5,6,2,1,4],[3,6,2,1,4,5],[3,6,2,5,1,4],[3,6,4,2,1,5],[3,6,4,5,2,1],[3,6,5,1,2,4],[3,6,5,2,4,1],[4,1,2,5,6,3],[4,1,2,6,3,5],[4,1,5,3,6,2],[4,1,5,6,2,3],[4,1,6,3,2,5],[4,1,6,5,3,2],[4,3,1,5,6,2],[4,3,1,6,2,5],[4,3,5,2,6,1],[4,3,5,6,1,2],[4,3,6,2,1,5],[4,3,6,5,2,1],[4,5,1,2,6,3],[4,5,1,6,3,2],[4,5,2,3,6,1],[4,5,2,6,1,3],[4,5,6,2,3,1],[4,5,6,3,1,2],[4,6,1,2,3,5],[4,6,1,5,2,3],[4,6,2,3,1,5],[4,6,2,5,3,1],[4,6,5,2,1,3],[4,6,5,3,2,1],[5,1,2,3,6,4],[5,1,2,6,4,3],[5,1,4,2,6,3],[5,1,4,6,3,2],[5,1,6,2,3,4],[5,1,6,3,4,2],[5,3,1,2,6,4],[5,3,1,6,4,2],[5,3,4,1,6,2],[5,3,4,6,2,1],[5,3,6,1,2,4],[5,3,6,2,4,1],[5,4,1,3,6,2],[5,4,1,6,2,3],[5,4,2,1,6,3],[5,4,2,6,3,1],[5,4,6,1,3,2],[5,4,6,3,2,1],[5,6,1,2,4,3],[5,6,1,3,2,4],[5,6,2,1,3,4],[5,6,2,3,4,1],[5,6,4,1,2,3],[5,6,4,2,3,1],[6,1,2,3,4,5],[6,1,2,5,3,4],[6,1,4,2,3,5],[6,1,4,5,2,3],[6,1,5,2,4,3],[6,1,5,3,2,4],[6,3,1,2,4,5],[6,3,1,5,2,4],[6,3,4,1,2,5],[6,3,4,5,1,2],[6,3,5,1,4,2],[6,3,5,2,1,4],[6,4,1,3,2,5],[6,4,1,5,3,2],[6,4,2,1,3,5],[6,4,2,5,1,3],[6,4,5,1,2,3],[6,4,5,3,1,2],[6,5,1,2,3,4],[6,5,1,3,4,2],[6,5,2,1,4,3],[6,5,2,3,1,4],[6,5,4,1,3,2],[6,5,4,2,1,3]].

test_hcp3 =>
    N = 4,                                   % find all Hamilton cycles in the 
    L = new_list(N),
    L :: 1..N,
    my_subcircuit(L),
    Sols = solve_all(L).sort(),
    Sols = [[1,2,3,4],[1,2,4,3],[1,3,2,4],[1,3,4,2],[1,4,2,3],[1,4,3,2],[2,1,3,4],[2,3,1,4],[2,3,4,1],[2,4,1,3],[2,4,3,1],[3,1,2,4],[3,1,4,2],[3,2,1,4],[3,2,4,1],[3,4,2,1],[4,1,2,3],[4,1,3,2],[4,2,1,3],[4,2,3,1],[4,3,1,2]].

test_hcp4 =>
    A = {{_,_,_},{_,_,_}},
    NRows = len(A),
    NCols = len(A[1]),
    Vs = [{(R,C), A[R,C]} : R in 1..NRows, C in 1..NCols],
    Es = [{(R,C), (R1,C1), _} : R in 1..NRows, C in 1..NCols, (R1,C1) in neibs(A,NRows,NCols,R,C)],
    hcp(Vs,Es),
    Sols = solve_all(A).sort(),
    Sols = [{{0,0,0},{0,0,0}},{{0,0,0},{0,0,1}},{{0,0,0},{0,1,0}},{{0,0,0},{0,1,1}},{{0,0,0},{1,0,0}},{{0,0,0},{1,1,0}},{{0,0,1},{0,0,0}},{{0,0,1},{0,0,1}},{{0,1,0},{0,0,0}},{{0,1,0},{0,1,0}},{{0,1,1},{0,0,0}},{{0,1,1},{0,1,1}},{{1,0,0},{0,0,0}},{{1,0,0},{1,0,0}},{{1,1,0},{0,0,0}},{{1,1,0},{1,1,0}},{{1,1,1},{1,1,1}}].


neibs(A,NRows,NCols,R,C) = 
    [(R1,C1) : (R1,C1) in [(R-1,C), (R+1,C), (R,C-1), (R,C+1)],
                R1 >= 1, R1 =< NRows, C1 >= 1, C1 =< NCols, A[R1,C1] !== 0].

my_circuit(L) =>
    N = len(L),
    L :: 1..N,
    Vs = [{I,1} : I in 1..N],
    Es = [{I,J,B} : I in 1..N, J in fd_dom(L[I]), B #<=> L[I] #= J],
    hcp(Vs,Es).

my_subcircuit(L) =>
    N = len(L),
    L :: 1..N,
    Vs = [{I,B} : I in 1..N, B #<=> L[I] #!= I],
    Es = [{I,J,B} : I in 1..N, J in fd_dom(L[I]), J !== I, B #<=> L[I] #= J],
    hcp(Vs,Es).

test_amo =>
    N = 12,
    L = new_list(N),
    L :: 0..1,
    sum(L) #=< 1,
    Sols = solve_all(L).sort(),
    Sols = [[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0]].

test_amt =>
    N = 12,
    L = new_list(N),
    L :: 0..1,
    sum(L) #=< 2,
    Sols = solve_all(L).sort(),
    Sols = [[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,0,1,1],[0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,0,1,0,1],[0,0,0,0,0,0,0,0,0,1,1,0],[0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,1],[0,0,0,0,0,0,0,0,1,0,1,0],[0,0,0,0,0,0,0,0,1,1,0,0],[0,0,0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,1,0,0,0,1],[0,0,0,0,0,0,0,1,0,0,1,0],[0,0,0,0,0,0,0,1,0,1,0,0],[0,0,0,0,0,0,0,1,1,0,0,0],[0,0,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,1,0,0,0,0,1],[0,0,0,0,0,0,1,0,0,0,1,0],[0,0,0,0,0,0,1,0,0,1,0,0],[0,0,0,0,0,0,1,0,1,0,0,0],[0,0,0,0,0,0,1,1,0,0,0,0],[0,0,0,0,0,1,0,0,0,0,0,0],[0,0,0,0,0,1,0,0,0,0,0,1],[0,0,0,0,0,1,0,0,0,0,1,0],[0,0,0,0,0,1,0,0,0,1,0,0],[0,0,0,0,0,1,0,0,1,0,0,0],[0,0,0,0,0,1,0,1,0,0,0,0],[0,0,0,0,0,1,1,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,1],[0,0,0,0,1,0,0,0,0,0,1,0],[0,0,0,0,1,0,0,0,0,1,0,0],[0,0,0,0,1,0,0,0,1,0,0,0],[0,0,0,0,1,0,0,1,0,0,0,0],[0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,1,1,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0,0,0,1],[0,0,0,1,0,0,0,0,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,0,1,0,0,0],[0,0,0,1,0,0,0,1,0,0,0,0],[0,0,0,1,0,0,1,0,0,0,0,0],[0,0,0,1,0,1,0,0,0,0,0,0],[0,0,0,1,1,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0,0,0,1],[0,0,1,0,0,0,0,0,0,0,1,0],[0,0,1,0,0,0,0,0,0,1,0,0],[0,0,1,0,0,0,0,0,1,0,0,0],[0,0,1,0,0,0,0,1,0,0,0,0],[0,0,1,0,0,0,1,0,0,0,0,0],[0,0,1,0,0,1,0,0,0,0,0,0],[0,0,1,0,1,0,0,0,0,0,0,0],[0,0,1,1,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,0,0,1],[0,1,0,0,0,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,1,0,0],[0,1,0,0,0,0,0,0,1,0,0,0],[0,1,0,0,0,0,0,1,0,0,0,0],[0,1,0,0,0,0,1,0,0,0,0,0],[0,1,0,0,0,1,0,0,0,0,0,0],[0,1,0,0,1,0,0,0,0,0,0,0],[0,1,0,1,0,0,0,0,0,0,0,0],[0,1,1,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,1],[1,0,0,0,0,0,0,0,0,0,1,0],[1,0,0,0,0,0,0,0,0,1,0,0],[1,0,0,0,0,0,0,0,1,0,0,0],[1,0,0,0,0,0,0,1,0,0,0,0],[1,0,0,0,0,0,1,0,0,0,0,0],[1,0,0,0,0,1,0,0,0,0,0,0],[1,0,0,0,1,0,0,0,0,0,0,0],[1,0,0,1,0,0,0,0,0,0,0,0],[1,0,1,0,0,0,0,0,0,0,0,0],[1,1,0,0,0,0,0,0,0,0,0,0]].

test_bool_add =>
    [X,Y,Z0] :: 0..1,      % X+Y = Z0
    X #\/ Y #\/ #~Z0,
    #~X #\/ Z0,
    #~Y #\/ Z0,
    #~X #\/ #~Y,
    Sols = solve_all([X,Y,Z0]).sort(),
    Sols = [[0,0,0],[0,1,1],[1,0,1]].

test_imp =>
    [B,B1] :: 0..1,
    [X,Y] :: 0..10,
    B #=> X+cond(B1,2,5) #=< Y,
    Sols = solve_all([B,B1,X,Y]).sort(),
    Sols = [[0,0,0,0],[0,0,0,1],[0,0,0,2],[0,0,0,3],[0,0,0,4],[0,0,0,5],[0,0,0,6],[0,0,0,7],[0,0,0,8],[0,0,0,9],[0,0,0,10],[0,0,1,0],[0,0,1,1],[0,0,1,2],[0,0,1,3],[0,0,1,4],[0,0,1,5],[0,0,1,6],[0,0,1,7],[0,0,1,8],[0,0,1,9],[0,0,1,10],[0,0,2,0],[0,0,2,1],[0,0,2,2],[0,0,2,3],[0,0,2,4],[0,0,2,5],[0,0,2,6],[0,0,2,7],[0,0,2,8],[0,0,2,9],[0,0,2,10],[0,0,3,0],[0,0,3,1],[0,0,3,2],[0,0,3,3],[0,0,3,4],[0,0,3,5],[0,0,3,6],[0,0,3,7],[0,0,3,8],[0,0,3,9],[0,0,3,10],[0,0,4,0],[0,0,4,1],[0,0,4,2],[0,0,4,3],[0,0,4,4],[0,0,4,5],[0,0,4,6],[0,0,4,7],[0,0,4,8],[0,0,4,9],[0,0,4,10],[0,0,5,0],[0,0,5,1],[0,0,5,2],[0,0,5,3],[0,0,5,4],[0,0,5,5],[0,0,5,6],[0,0,5,7],[0,0,5,8],[0,0,5,9],[0,0,5,10],[0,0,6,0],[0,0,6,1],[0,0,6,2],[0,0,6,3],[0,0,6,4],[0,0,6,5],[0,0,6,6],[0,0,6,7],[0,0,6,8],[0,0,6,9],[0,0,6,10],[0,0,7,0],[0,0,7,1],[0,0,7,2],[0,0,7,3],[0,0,7,4],[0,0,7,5],[0,0,7,6],[0,0,7,7],[0,0,7,8],[0,0,7,9],[0,0,7,10],[0,0,8,0],[0,0,8,1],[0,0,8,2],[0,0,8,3],[0,0,8,4],[0,0,8,5],[0,0,8,6],[0,0,8,7],[0,0,8,8],[0,0,8,9],[0,0,8,10],[0,0,9,0],[0,0,9,1],[0,0,9,2],[0,0,9,3],[0,0,9,4],[0,0,9,5],[0,0,9,6],[0,0,9,7],[0,0,9,8],[0,0,9,9],[0,0,9,10],[0,0,10,0],[0,0,10,1],[0,0,10,2],[0,0,10,3],[0,0,10,4],[0,0,10,5],[0,0,10,6],[0,0,10,7],[0,0,10,8],[0,0,10,9],[0,0,10,10],[0,1,0,0],[0,1,0,1],[0,1,0,2],[0,1,0,3],[0,1,0,4],[0,1,0,5],[0,1,0,6],[0,1,0,7],[0,1,0,8],[0,1,0,9],[0,1,0,10],[0,1,1,0],[0,1,1,1],[0,1,1,2],[0,1,1,3],[0,1,1,4],[0,1,1,5],[0,1,1,6],[0,1,1,7],[0,1,1,8],[0,1,1,9],[0,1,1,10],[0,1,2,0],[0,1,2,1],[0,1,2,2],[0,1,2,3],[0,1,2,4],[0,1,2,5],[0,1,2,6],[0,1,2,7],[0,1,2,8],[0,1,2,9],[0,1,2,10],[0,1,3,0],[0,1,3,1],[0,1,3,2],[0,1,3,3],[0,1,3,4],[0,1,3,5],[0,1,3,6],[0,1,3,7],[0,1,3,8],[0,1,3,9],[0,1,3,10],[0,1,4,0],[0,1,4,1],[0,1,4,2],[0,1,4,3],[0,1,4,4],[0,1,4,5],[0,1,4,6],[0,1,4,7],[0,1,4,8],[0,1,4,9],[0,1,4,10],[0,1,5,0],[0,1,5,1],[0,1,5,2],[0,1,5,3],[0,1,5,4],[0,1,5,5],[0,1,5,6],[0,1,5,7],[0,1,5,8],[0,1,5,9],[0,1,5,10],[0,1,6,0],[0,1,6,1],[0,1,6,2],[0,1,6,3],[0,1,6,4],[0,1,6,5],[0,1,6,6],[0,1,6,7],[0,1,6,8],[0,1,6,9],[0,1,6,10],[0,1,7,0],[0,1,7,1],[0,1,7,2],[0,1,7,3],[0,1,7,4],[0,1,7,5],[0,1,7,6],[0,1,7,7],[0,1,7,8],[0,1,7,9],[0,1,7,10],[0,1,8,0],[0,1,8,1],[0,1,8,2],[0,1,8,3],[0,1,8,4],[0,1,8,5],[0,1,8,6],[0,1,8,7],[0,1,8,8],[0,1,8,9],[0,1,8,10],[0,1,9,0],[0,1,9,1],[0,1,9,2],[0,1,9,3],[0,1,9,4],[0,1,9,5],[0,1,9,6],[0,1,9,7],[0,1,9,8],[0,1,9,9],[0,1,9,10],[0,1,10,0],[0,1,10,1],[0,1,10,2],[0,1,10,3],[0,1,10,4],[0,1,10,5],[0,1,10,6],[0,1,10,7],[0,1,10,8],[0,1,10,9],[0,1,10,10],[1,0,0,5],[1,0,0,6],[1,0,0,7],[1,0,0,8],[1,0,0,9],[1,0,0,10],[1,0,1,6],[1,0,1,7],[1,0,1,8],[1,0,1,9],[1,0,1,10],[1,0,2,7],[1,0,2,8],[1,0,2,9],[1,0,2,10],[1,0,3,8],[1,0,3,9],[1,0,3,10],[1,0,4,9],[1,0,4,10],[1,0,5,10],[1,1,0,2],[1,1,0,3],[1,1,0,4],[1,1,0,5],[1,1,0,6],[1,1,0,7],[1,1,0,8],[1,1,0,9],[1,1,0,10],[1,1,1,3],[1,1,1,4],[1,1,1,5],[1,1,1,6],[1,1,1,7],[1,1,1,8],[1,1,1,9],[1,1,1,10],[1,1,2,4],[1,1,2,5],[1,1,2,6],[1,1,2,7],[1,1,2,8],[1,1,2,9],[1,1,2,10],[1,1,3,5],[1,1,3,6],[1,1,3,7],[1,1,3,8],[1,1,3,9],[1,1,3,10],[1,1,4,6],[1,1,4,7],[1,1,4,8],[1,1,4,9],[1,1,4,10],[1,1,5,7],[1,1,5,8],[1,1,5,9],[1,1,5,10],[1,1,6,8],[1,1,6,9],[1,1,6,10],[1,1,7,9],[1,1,7,10],[1,1,8,10]].

        
test_imp2 =>
    [X,Y,U,V] :: -2..2,
    X #>= Y #=> U #>=V,
    Sols = solve_all((X,Y,U,V)).sort(),
    Sols = [(-2,-2,-2,-2),(-2,-2,-1,-2),(-2,-2,-1,-1),(-2,-2,0,-2),(-2,-2,0,-1),(-2,-2,0,0),(-2,-2,1,-2),(-2,-2,1,-1),(-2,-2,1,0),(-2,-2,1,1),(-2,-2,2,-2),(-2,-2,2,-1),(-2,-2,2,0),(-2,-2,2,1),(-2,-2,2,2),(-2,-1,-2,-2),(-2,-1,-2,-1),(-2,-1,-2,0),(-2,-1,-2,1),(-2,-1,-2,2),(-2,-1,-1,-2),(-2,-1,-1,-1),(-2,-1,-1,0),(-2,-1,-1,1),(-2,-1,-1,2),(-2,-1,0,-2),(-2,-1,0,-1),(-2,-1,0,0),(-2,-1,0,1),(-2,-1,0,2),(-2,-1,1,-2),(-2,-1,1,-1),(-2,-1,1,0),(-2,-1,1,1),(-2,-1,1,2),(-2,-1,2,-2),(-2,-1,2,-1),(-2,-1,2,0),(-2,-1,2,1),(-2,-1,2,2),(-2,0,-2,-2),(-2,0,-2,-1),(-2,0,-2,0),(-2,0,-2,1),(-2,0,-2,2),(-2,0,-1,-2),(-2,0,-1,-1),(-2,0,-1,0),(-2,0,-1,1),(-2,0,-1,2),(-2,0,0,-2),(-2,0,0,-1),(-2,0,0,0),(-2,0,0,1),(-2,0,0,2),(-2,0,1,-2),(-2,0,1,-1),(-2,0,1,0),(-2,0,1,1),(-2,0,1,2),(-2,0,2,-2),(-2,0,2,-1),(-2,0,2,0),(-2,0,2,1),(-2,0,2,2),(-2,1,-2,-2),(-2,1,-2,-1),(-2,1,-2,0),(-2,1,-2,1),(-2,1,-2,2),(-2,1,-1,-2),(-2,1,-1,-1),(-2,1,-1,0),(-2,1,-1,1),(-2,1,-1,2),(-2,1,0,-2),(-2,1,0,-1),(-2,1,0,0),(-2,1,0,1),(-2,1,0,2),(-2,1,1,-2),(-2,1,1,-1),(-2,1,1,0),(-2,1,1,1),(-2,1,1,2),(-2,1,2,-2),(-2,1,2,-1),(-2,1,2,0),(-2,1,2,1),(-2,1,2,2),(-2,2,-2,-2),(-2,2,-2,-1),(-2,2,-2,0),(-2,2,-2,1),(-2,2,-2,2),(-2,2,-1,-2),(-2,2,-1,-1),(-2,2,-1,0),(-2,2,-1,1),(-2,2,-1,2),(-2,2,0,-2),(-2,2,0,-1),(-2,2,0,0),(-2,2,0,1),(-2,2,0,2),(-2,2,1,-2),(-2,2,1,-1),(-2,2,1,0),(-2,2,1,1),(-2,2,1,2),(-2,2,2,-2),(-2,2,2,-1),(-2,2,2,0),(-2,2,2,1),(-2,2,2,2),(-1,-2,-2,-2),(-1,-2,-1,-2),(-1,-2,-1,-1),(-1,-2,0,-2),(-1,-2,0,-1),(-1,-2,0,0),(-1,-2,1,-2),(-1,-2,1,-1),(-1,-2,1,0),(-1,-2,1,1),(-1,-2,2,-2),(-1,-2,2,-1),(-1,-2,2,0),(-1,-2,2,1),(-1,-2,2,2),(-1,-1,-2,-2),(-1,-1,-1,-2),(-1,-1,-1,-1),(-1,-1,0,-2),(-1,-1,0,-1),(-1,-1,0,0),(-1,-1,1,-2),(-1,-1,1,-1),(-1,-1,1,0),(-1,-1,1,1),(-1,-1,2,-2),(-1,-1,2,-1),(-1,-1,2,0),(-1,-1,2,1),(-1,-1,2,2),(-1,0,-2,-2),(-1,0,-2,-1),(-1,0,-2,0),(-1,0,-2,1),(-1,0,-2,2),(-1,0,-1,-2),(-1,0,-1,-1),(-1,0,-1,0),(-1,0,-1,1),(-1,0,-1,2),(-1,0,0,-2),(-1,0,0,-1),(-1,0,0,0),(-1,0,0,1),(-1,0,0,2),(-1,0,1,-2),(-1,0,1,-1),(-1,0,1,0),(-1,0,1,1),(-1,0,1,2),(-1,0,2,-2),(-1,0,2,-1),(-1,0,2,0),(-1,0,2,1),(-1,0,2,2),(-1,1,-2,-2),(-1,1,-2,-1),(-1,1,-2,0),(-1,1,-2,1),(-1,1,-2,2),(-1,1,-1,-2),(-1,1,-1,-1),(-1,1,-1,0),(-1,1,-1,1),(-1,1,-1,2),(-1,1,0,-2),(-1,1,0,-1),(-1,1,0,0),(-1,1,0,1),(-1,1,0,2),(-1,1,1,-2),(-1,1,1,-1),(-1,1,1,0),(-1,1,1,1),(-1,1,1,2),(-1,1,2,-2),(-1,1,2,-1),(-1,1,2,0),(-1,1,2,1),(-1,1,2,2),(-1,2,-2,-2),(-1,2,-2,-1),(-1,2,-2,0),(-1,2,-2,1),(-1,2,-2,2),(-1,2,-1,-2),(-1,2,-1,-1),(-1,2,-1,0),(-1,2,-1,1),(-1,2,-1,2),(-1,2,0,-2),(-1,2,0,-1),(-1,2,0,0),(-1,2,0,1),(-1,2,0,2),(-1,2,1,-2),(-1,2,1,-1),(-1,2,1,0),(-1,2,1,1),(-1,2,1,2),(-1,2,2,-2),(-1,2,2,-1),(-1,2,2,0),(-1,2,2,1),(-1,2,2,2),(0,-2,-2,-2),(0,-2,-1,-2),(0,-2,-1,-1),(0,-2,0,-2),(0,-2,0,-1),(0,-2,0,0),(0,-2,1,-2),(0,-2,1,-1),(0,-2,1,0),(0,-2,1,1),(0,-2,2,-2),(0,-2,2,-1),(0,-2,2,0),(0,-2,2,1),(0,-2,2,2),(0,-1,-2,-2),(0,-1,-1,-2),(0,-1,-1,-1),(0,-1,0,-2),(0,-1,0,-1),(0,-1,0,0),(0,-1,1,-2),(0,-1,1,-1),(0,-1,1,0),(0,-1,1,1),(0,-1,2,-2),(0,-1,2,-1),(0,-1,2,0),(0,-1,2,1),(0,-1,2,2),(0,0,-2,-2),(0,0,-1,-2),(0,0,-1,-1),(0,0,0,-2),(0,0,0,-1),(0,0,0,0),(0,0,1,-2),(0,0,1,-1),(0,0,1,0),(0,0,1,1),(0,0,2,-2),(0,0,2,-1),(0,0,2,0),(0,0,2,1),(0,0,2,2),(0,1,-2,-2),(0,1,-2,-1),(0,1,-2,0),(0,1,-2,1),(0,1,-2,2),(0,1,-1,-2),(0,1,-1,-1),(0,1,-1,0),(0,1,-1,1),(0,1,-1,2),(0,1,0,-2),(0,1,0,-1),(0,1,0,0),(0,1,0,1),(0,1,0,2),(0,1,1,-2),(0,1,1,-1),(0,1,1,0),(0,1,1,1),(0,1,1,2),(0,1,2,-2),(0,1,2,-1),(0,1,2,0),(0,1,2,1),(0,1,2,2),(0,2,-2,-2),(0,2,-2,-1),(0,2,-2,0),(0,2,-2,1),(0,2,-2,2),(0,2,-1,-2),(0,2,-1,-1),(0,2,-1,0),(0,2,-1,1),(0,2,-1,2),(0,2,0,-2),(0,2,0,-1),(0,2,0,0),(0,2,0,1),(0,2,0,2),(0,2,1,-2),(0,2,1,-1),(0,2,1,0),(0,2,1,1),(0,2,1,2),(0,2,2,-2),(0,2,2,-1),(0,2,2,0),(0,2,2,1),(0,2,2,2),(1,-2,-2,-2),(1,-2,-1,-2),(1,-2,-1,-1),(1,-2,0,-2),(1,-2,0,-1),(1,-2,0,0),(1,-2,1,-2),(1,-2,1,-1),(1,-2,1,0),(1,-2,1,1),(1,-2,2,-2),(1,-2,2,-1),(1,-2,2,0),(1,-2,2,1),(1,-2,2,2),(1,-1,-2,-2),(1,-1,-1,-2),(1,-1,-1,-1),(1,-1,0,-2),(1,-1,0,-1),(1,-1,0,0),(1,-1,1,-2),(1,-1,1,-1),(1,-1,1,0),(1,-1,1,1),(1,-1,2,-2),(1,-1,2,-1),(1,-1,2,0),(1,-1,2,1),(1,-1,2,2),(1,0,-2,-2),(1,0,-1,-2),(1,0,-1,-1),(1,0,0,-2),(1,0,0,-1),(1,0,0,0),(1,0,1,-2),(1,0,1,-1),(1,0,1,0),(1,0,1,1),(1,0,2,-2),(1,0,2,-1),(1,0,2,0),(1,0,2,1),(1,0,2,2),(1,1,-2,-2),(1,1,-1,-2),(1,1,-1,-1),(1,1,0,-2),(1,1,0,-1),(1,1,0,0),(1,1,1,-2),(1,1,1,-1),(1,1,1,0),(1,1,1,1),(1,1,2,-2),(1,1,2,-1),(1,1,2,0),(1,1,2,1),(1,1,2,2),(1,2,-2,-2),(1,2,-2,-1),(1,2,-2,0),(1,2,-2,1),(1,2,-2,2),(1,2,-1,-2),(1,2,-1,-1),(1,2,-1,0),(1,2,-1,1),(1,2,-1,2),(1,2,0,-2),(1,2,0,-1),(1,2,0,0),(1,2,0,1),(1,2,0,2),(1,2,1,-2),(1,2,1,-1),(1,2,1,0),(1,2,1,1),(1,2,1,2),(1,2,2,-2),(1,2,2,-1),(1,2,2,0),(1,2,2,1),(1,2,2,2),(2,-2,-2,-2),(2,-2,-1,-2),(2,-2,-1,-1),(2,-2,0,-2),(2,-2,0,-1),(2,-2,0,0),(2,-2,1,-2),(2,-2,1,-1),(2,-2,1,0),(2,-2,1,1),(2,-2,2,-2),(2,-2,2,-1),(2,-2,2,0),(2,-2,2,1),(2,-2,2,2),(2,-1,-2,-2),(2,-1,-1,-2),(2,-1,-1,-1),(2,-1,0,-2),(2,-1,0,-1),(2,-1,0,0),(2,-1,1,-2),(2,-1,1,-1),(2,-1,1,0),(2,-1,1,1),(2,-1,2,-2),(2,-1,2,-1),(2,-1,2,0),(2,-1,2,1),(2,-1,2,2),(2,0,-2,-2),(2,0,-1,-2),(2,0,-1,-1),(2,0,0,-2),(2,0,0,-1),(2,0,0,0),(2,0,1,-2),(2,0,1,-1),(2,0,1,0),(2,0,1,1),(2,0,2,-2),(2,0,2,-1),(2,0,2,0),(2,0,2,1),(2,0,2,2),(2,1,-2,-2),(2,1,-1,-2),(2,1,-1,-1),(2,1,0,-2),(2,1,0,-1),(2,1,0,0),(2,1,1,-2),(2,1,1,-1),(2,1,1,0),(2,1,1,1),(2,1,2,-2),(2,1,2,-1),(2,1,2,0),(2,1,2,1),(2,1,2,2),(2,2,-2,-2),(2,2,-1,-2),(2,2,-1,-1),(2,2,0,-2),(2,2,0,-1),(2,2,0,0),(2,2,1,-2),(2,2,1,-1),(2,2,1,0),(2,2,1,1),(2,2,2,-2),(2,2,2,-1),(2,2,2,0),(2,2,2,1),(2,2,2,2)].

test_imp3 =>
    [X,Y,U,V] :: -2..2,
    X #>= Y #/\ U #>=V #=> 1,
    Sols = solve_all((X,Y,U,V)).sort(),
    Sols = [(-2,-2,-2,-2),(-2,-2,-2,-1),(-2,-2,-2,0),(-2,-2,-2,1),(-2,-2,-2,2),(-2,-2,-1,-2),(-2,-2,-1,-1),(-2,-2,-1,0),(-2,-2,-1,1),(-2,-2,-1,2),(-2,-2,0,-2),(-2,-2,0,-1),(-2,-2,0,0),(-2,-2,0,1),(-2,-2,0,2),(-2,-2,1,-2),(-2,-2,1,-1),(-2,-2,1,0),(-2,-2,1,1),(-2,-2,1,2),(-2,-2,2,-2),(-2,-2,2,-1),(-2,-2,2,0),(-2,-2,2,1),(-2,-2,2,2),(-2,-1,-2,-2),(-2,-1,-2,-1),(-2,-1,-2,0),(-2,-1,-2,1),(-2,-1,-2,2),(-2,-1,-1,-2),(-2,-1,-1,-1),(-2,-1,-1,0),(-2,-1,-1,1),(-2,-1,-1,2),(-2,-1,0,-2),(-2,-1,0,-1),(-2,-1,0,0),(-2,-1,0,1),(-2,-1,0,2),(-2,-1,1,-2),(-2,-1,1,-1),(-2,-1,1,0),(-2,-1,1,1),(-2,-1,1,2),(-2,-1,2,-2),(-2,-1,2,-1),(-2,-1,2,0),(-2,-1,2,1),(-2,-1,2,2),(-2,0,-2,-2),(-2,0,-2,-1),(-2,0,-2,0),(-2,0,-2,1),(-2,0,-2,2),(-2,0,-1,-2),(-2,0,-1,-1),(-2,0,-1,0),(-2,0,-1,1),(-2,0,-1,2),(-2,0,0,-2),(-2,0,0,-1),(-2,0,0,0),(-2,0,0,1),(-2,0,0,2),(-2,0,1,-2),(-2,0,1,-1),(-2,0,1,0),(-2,0,1,1),(-2,0,1,2),(-2,0,2,-2),(-2,0,2,-1),(-2,0,2,0),(-2,0,2,1),(-2,0,2,2),(-2,1,-2,-2),(-2,1,-2,-1),(-2,1,-2,0),(-2,1,-2,1),(-2,1,-2,2),(-2,1,-1,-2),(-2,1,-1,-1),(-2,1,-1,0),(-2,1,-1,1),(-2,1,-1,2),(-2,1,0,-2),(-2,1,0,-1),(-2,1,0,0),(-2,1,0,1),(-2,1,0,2),(-2,1,1,-2),(-2,1,1,-1),(-2,1,1,0),(-2,1,1,1),(-2,1,1,2),(-2,1,2,-2),(-2,1,2,-1),(-2,1,2,0),(-2,1,2,1),(-2,1,2,2),(-2,2,-2,-2),(-2,2,-2,-1),(-2,2,-2,0),(-2,2,-2,1),(-2,2,-2,2),(-2,2,-1,-2),(-2,2,-1,-1),(-2,2,-1,0),(-2,2,-1,1),(-2,2,-1,2),(-2,2,0,-2),(-2,2,0,-1),(-2,2,0,0),(-2,2,0,1),(-2,2,0,2),(-2,2,1,-2),(-2,2,1,-1),(-2,2,1,0),(-2,2,1,1),(-2,2,1,2),(-2,2,2,-2),(-2,2,2,-1),(-2,2,2,0),(-2,2,2,1),(-2,2,2,2),(-1,-2,-2,-2),(-1,-2,-2,-1),(-1,-2,-2,0),(-1,-2,-2,1),(-1,-2,-2,2),(-1,-2,-1,-2),(-1,-2,-1,-1),(-1,-2,-1,0),(-1,-2,-1,1),(-1,-2,-1,2),(-1,-2,0,-2),(-1,-2,0,-1),(-1,-2,0,0),(-1,-2,0,1),(-1,-2,0,2),(-1,-2,1,-2),(-1,-2,1,-1),(-1,-2,1,0),(-1,-2,1,1),(-1,-2,1,2),(-1,-2,2,-2),(-1,-2,2,-1),(-1,-2,2,0),(-1,-2,2,1),(-1,-2,2,2),(-1,-1,-2,-2),(-1,-1,-2,-1),(-1,-1,-2,0),(-1,-1,-2,1),(-1,-1,-2,2),(-1,-1,-1,-2),(-1,-1,-1,-1),(-1,-1,-1,0),(-1,-1,-1,1),(-1,-1,-1,2),(-1,-1,0,-2),(-1,-1,0,-1),(-1,-1,0,0),(-1,-1,0,1),(-1,-1,0,2),(-1,-1,1,-2),(-1,-1,1,-1),(-1,-1,1,0),(-1,-1,1,1),(-1,-1,1,2),(-1,-1,2,-2),(-1,-1,2,-1),(-1,-1,2,0),(-1,-1,2,1),(-1,-1,2,2),(-1,0,-2,-2),(-1,0,-2,-1),(-1,0,-2,0),(-1,0,-2,1),(-1,0,-2,2),(-1,0,-1,-2),(-1,0,-1,-1),(-1,0,-1,0),(-1,0,-1,1),(-1,0,-1,2),(-1,0,0,-2),(-1,0,0,-1),(-1,0,0,0),(-1,0,0,1),(-1,0,0,2),(-1,0,1,-2),(-1,0,1,-1),(-1,0,1,0),(-1,0,1,1),(-1,0,1,2),(-1,0,2,-2),(-1,0,2,-1),(-1,0,2,0),(-1,0,2,1),(-1,0,2,2),(-1,1,-2,-2),(-1,1,-2,-1),(-1,1,-2,0),(-1,1,-2,1),(-1,1,-2,2),(-1,1,-1,-2),(-1,1,-1,-1),(-1,1,-1,0),(-1,1,-1,1),(-1,1,-1,2),(-1,1,0,-2),(-1,1,0,-1),(-1,1,0,0),(-1,1,0,1),(-1,1,0,2),(-1,1,1,-2),(-1,1,1,-1),(-1,1,1,0),(-1,1,1,1),(-1,1,1,2),(-1,1,2,-2),(-1,1,2,-1),(-1,1,2,0),(-1,1,2,1),(-1,1,2,2),(-1,2,-2,-2),(-1,2,-2,-1),(-1,2,-2,0),(-1,2,-2,1),(-1,2,-2,2),(-1,2,-1,-2),(-1,2,-1,-1),(-1,2,-1,0),(-1,2,-1,1),(-1,2,-1,2),(-1,2,0,-2),(-1,2,0,-1),(-1,2,0,0),(-1,2,0,1),(-1,2,0,2),(-1,2,1,-2),(-1,2,1,-1),(-1,2,1,0),(-1,2,1,1),(-1,2,1,2),(-1,2,2,-2),(-1,2,2,-1),(-1,2,2,0),(-1,2,2,1),(-1,2,2,2),(0,-2,-2,-2),(0,-2,-2,-1),(0,-2,-2,0),(0,-2,-2,1),(0,-2,-2,2),(0,-2,-1,-2),(0,-2,-1,-1),(0,-2,-1,0),(0,-2,-1,1),(0,-2,-1,2),(0,-2,0,-2),(0,-2,0,-1),(0,-2,0,0),(0,-2,0,1),(0,-2,0,2),(0,-2,1,-2),(0,-2,1,-1),(0,-2,1,0),(0,-2,1,1),(0,-2,1,2),(0,-2,2,-2),(0,-2,2,-1),(0,-2,2,0),(0,-2,2,1),(0,-2,2,2),(0,-1,-2,-2),(0,-1,-2,-1),(0,-1,-2,0),(0,-1,-2,1),(0,-1,-2,2),(0,-1,-1,-2),(0,-1,-1,-1),(0,-1,-1,0),(0,-1,-1,1),(0,-1,-1,2),(0,-1,0,-2),(0,-1,0,-1),(0,-1,0,0),(0,-1,0,1),(0,-1,0,2),(0,-1,1,-2),(0,-1,1,-1),(0,-1,1,0),(0,-1,1,1),(0,-1,1,2),(0,-1,2,-2),(0,-1,2,-1),(0,-1,2,0),(0,-1,2,1),(0,-1,2,2),(0,0,-2,-2),(0,0,-2,-1),(0,0,-2,0),(0,0,-2,1),(0,0,-2,2),(0,0,-1,-2),(0,0,-1,-1),(0,0,-1,0),(0,0,-1,1),(0,0,-1,2),(0,0,0,-2),(0,0,0,-1),(0,0,0,0),(0,0,0,1),(0,0,0,2),(0,0,1,-2),(0,0,1,-1),(0,0,1,0),(0,0,1,1),(0,0,1,2),(0,0,2,-2),(0,0,2,-1),(0,0,2,0),(0,0,2,1),(0,0,2,2),(0,1,-2,-2),(0,1,-2,-1),(0,1,-2,0),(0,1,-2,1),(0,1,-2,2),(0,1,-1,-2),(0,1,-1,-1),(0,1,-1,0),(0,1,-1,1),(0,1,-1,2),(0,1,0,-2),(0,1,0,-1),(0,1,0,0),(0,1,0,1),(0,1,0,2),(0,1,1,-2),(0,1,1,-1),(0,1,1,0),(0,1,1,1),(0,1,1,2),(0,1,2,-2),(0,1,2,-1),(0,1,2,0),(0,1,2,1),(0,1,2,2),(0,2,-2,-2),(0,2,-2,-1),(0,2,-2,0),(0,2,-2,1),(0,2,-2,2),(0,2,-1,-2),(0,2,-1,-1),(0,2,-1,0),(0,2,-1,1),(0,2,-1,2),(0,2,0,-2),(0,2,0,-1),(0,2,0,0),(0,2,0,1),(0,2,0,2),(0,2,1,-2),(0,2,1,-1),(0,2,1,0),(0,2,1,1),(0,2,1,2),(0,2,2,-2),(0,2,2,-1),(0,2,2,0),(0,2,2,1),(0,2,2,2),(1,-2,-2,-2),(1,-2,-2,-1),(1,-2,-2,0),(1,-2,-2,1),(1,-2,-2,2),(1,-2,-1,-2),(1,-2,-1,-1),(1,-2,-1,0),(1,-2,-1,1),(1,-2,-1,2),(1,-2,0,-2),(1,-2,0,-1),(1,-2,0,0),(1,-2,0,1),(1,-2,0,2),(1,-2,1,-2),(1,-2,1,-1),(1,-2,1,0),(1,-2,1,1),(1,-2,1,2),(1,-2,2,-2),(1,-2,2,-1),(1,-2,2,0),(1,-2,2,1),(1,-2,2,2),(1,-1,-2,-2),(1,-1,-2,-1),(1,-1,-2,0),(1,-1,-2,1),(1,-1,-2,2),(1,-1,-1,-2),(1,-1,-1,-1),(1,-1,-1,0),(1,-1,-1,1),(1,-1,-1,2),(1,-1,0,-2),(1,-1,0,-1),(1,-1,0,0),(1,-1,0,1),(1,-1,0,2),(1,-1,1,-2),(1,-1,1,-1),(1,-1,1,0),(1,-1,1,1),(1,-1,1,2),(1,-1,2,-2),(1,-1,2,-1),(1,-1,2,0),(1,-1,2,1),(1,-1,2,2),(1,0,-2,-2),(1,0,-2,-1),(1,0,-2,0),(1,0,-2,1),(1,0,-2,2),(1,0,-1,-2),(1,0,-1,-1),(1,0,-1,0),(1,0,-1,1),(1,0,-1,2),(1,0,0,-2),(1,0,0,-1),(1,0,0,0),(1,0,0,1),(1,0,0,2),(1,0,1,-2),(1,0,1,-1),(1,0,1,0),(1,0,1,1),(1,0,1,2),(1,0,2,-2),(1,0,2,-1),(1,0,2,0),(1,0,2,1),(1,0,2,2),(1,1,-2,-2),(1,1,-2,-1),(1,1,-2,0),(1,1,-2,1),(1,1,-2,2),(1,1,-1,-2),(1,1,-1,-1),(1,1,-1,0),(1,1,-1,1),(1,1,-1,2),(1,1,0,-2),(1,1,0,-1),(1,1,0,0),(1,1,0,1),(1,1,0,2),(1,1,1,-2),(1,1,1,-1),(1,1,1,0),(1,1,1,1),(1,1,1,2),(1,1,2,-2),(1,1,2,-1),(1,1,2,0),(1,1,2,1),(1,1,2,2),(1,2,-2,-2),(1,2,-2,-1),(1,2,-2,0),(1,2,-2,1),(1,2,-2,2),(1,2,-1,-2),(1,2,-1,-1),(1,2,-1,0),(1,2,-1,1),(1,2,-1,2),(1,2,0,-2),(1,2,0,-1),(1,2,0,0),(1,2,0,1),(1,2,0,2),(1,2,1,-2),(1,2,1,-1),(1,2,1,0),(1,2,1,1),(1,2,1,2),(1,2,2,-2),(1,2,2,-1),(1,2,2,0),(1,2,2,1),(1,2,2,2),(2,-2,-2,-2),(2,-2,-2,-1),(2,-2,-2,0),(2,-2,-2,1),(2,-2,-2,2),(2,-2,-1,-2),(2,-2,-1,-1),(2,-2,-1,0),(2,-2,-1,1),(2,-2,-1,2),(2,-2,0,-2),(2,-2,0,-1),(2,-2,0,0),(2,-2,0,1),(2,-2,0,2),(2,-2,1,-2),(2,-2,1,-1),(2,-2,1,0),(2,-2,1,1),(2,-2,1,2),(2,-2,2,-2),(2,-2,2,-1),(2,-2,2,0),(2,-2,2,1),(2,-2,2,2),(2,-1,-2,-2),(2,-1,-2,-1),(2,-1,-2,0),(2,-1,-2,1),(2,-1,-2,2),(2,-1,-1,-2),(2,-1,-1,-1),(2,-1,-1,0),(2,-1,-1,1),(2,-1,-1,2),(2,-1,0,-2),(2,-1,0,-1),(2,-1,0,0),(2,-1,0,1),(2,-1,0,2),(2,-1,1,-2),(2,-1,1,-1),(2,-1,1,0),(2,-1,1,1),(2,-1,1,2),(2,-1,2,-2),(2,-1,2,-1),(2,-1,2,0),(2,-1,2,1),(2,-1,2,2),(2,0,-2,-2),(2,0,-2,-1),(2,0,-2,0),(2,0,-2,1),(2,0,-2,2),(2,0,-1,-2),(2,0,-1,-1),(2,0,-1,0),(2,0,-1,1),(2,0,-1,2),(2,0,0,-2),(2,0,0,-1),(2,0,0,0),(2,0,0,1),(2,0,0,2),(2,0,1,-2),(2,0,1,-1),(2,0,1,0),(2,0,1,1),(2,0,1,2),(2,0,2,-2),(2,0,2,-1),(2,0,2,0),(2,0,2,1),(2,0,2,2),(2,1,-2,-2),(2,1,-2,-1),(2,1,-2,0),(2,1,-2,1),(2,1,-2,2),(2,1,-1,-2),(2,1,-1,-1),(2,1,-1,0),(2,1,-1,1),(2,1,-1,2),(2,1,0,-2),(2,1,0,-1),(2,1,0,0),(2,1,0,1),(2,1,0,2),(2,1,1,-2),(2,1,1,-1),(2,1,1,0),(2,1,1,1),(2,1,1,2),(2,1,2,-2),(2,1,2,-1),(2,1,2,0),(2,1,2,1),(2,1,2,2),(2,2,-2,-2),(2,2,-2,-1),(2,2,-2,0),(2,2,-2,1),(2,2,-2,2),(2,2,-1,-2),(2,2,-1,-1),(2,2,-1,0),(2,2,-1,1),(2,2,-1,2),(2,2,0,-2),(2,2,0,-1),(2,2,0,0),(2,2,0,1),(2,2,0,2),(2,2,1,-2),(2,2,1,-1),(2,2,1,0),(2,2,1,1),(2,2,1,2),(2,2,2,-2),(2,2,2,-1),(2,2,2,0),(2,2,2,1),(2,2,2,2)].


test_imp4 =>
    [X,Y,U,V] :: -2..2,
    X #>= Y #/\ U #>=V #=> 0,
    Sols = solve_all((X,Y,U,V)).sort(),
    Sols = [(-2,-2,-2,-1),(-2,-2,-2,0),(-2,-2,-2,1),(-2,-2,-2,2),(-2,-2,-1,0),(-2,-2,-1,1),(-2,-2,-1,2),(-2,-2,0,1),(-2,-2,0,2),(-2,-2,1,2),(-2,-1,-2,-2),(-2,-1,-2,-1),(-2,-1,-2,0),(-2,-1,-2,1),(-2,-1,-2,2),(-2,-1,-1,-2),(-2,-1,-1,-1),(-2,-1,-1,0),(-2,-1,-1,1),(-2,-1,-1,2),(-2,-1,0,-2),(-2,-1,0,-1),(-2,-1,0,0),(-2,-1,0,1),(-2,-1,0,2),(-2,-1,1,-2),(-2,-1,1,-1),(-2,-1,1,0),(-2,-1,1,1),(-2,-1,1,2),(-2,-1,2,-2),(-2,-1,2,-1),(-2,-1,2,0),(-2,-1,2,1),(-2,-1,2,2),(-2,0,-2,-2),(-2,0,-2,-1),(-2,0,-2,0),(-2,0,-2,1),(-2,0,-2,2),(-2,0,-1,-2),(-2,0,-1,-1),(-2,0,-1,0),(-2,0,-1,1),(-2,0,-1,2),(-2,0,0,-2),(-2,0,0,-1),(-2,0,0,0),(-2,0,0,1),(-2,0,0,2),(-2,0,1,-2),(-2,0,1,-1),(-2,0,1,0),(-2,0,1,1),(-2,0,1,2),(-2,0,2,-2),(-2,0,2,-1),(-2,0,2,0),(-2,0,2,1),(-2,0,2,2),(-2,1,-2,-2),(-2,1,-2,-1),(-2,1,-2,0),(-2,1,-2,1),(-2,1,-2,2),(-2,1,-1,-2),(-2,1,-1,-1),(-2,1,-1,0),(-2,1,-1,1),(-2,1,-1,2),(-2,1,0,-2),(-2,1,0,-1),(-2,1,0,0),(-2,1,0,1),(-2,1,0,2),(-2,1,1,-2),(-2,1,1,-1),(-2,1,1,0),(-2,1,1,1),(-2,1,1,2),(-2,1,2,-2),(-2,1,2,-1),(-2,1,2,0),(-2,1,2,1),(-2,1,2,2),(-2,2,-2,-2),(-2,2,-2,-1),(-2,2,-2,0),(-2,2,-2,1),(-2,2,-2,2),(-2,2,-1,-2),(-2,2,-1,-1),(-2,2,-1,0),(-2,2,-1,1),(-2,2,-1,2),(-2,2,0,-2),(-2,2,0,-1),(-2,2,0,0),(-2,2,0,1),(-2,2,0,2),(-2,2,1,-2),(-2,2,1,-1),(-2,2,1,0),(-2,2,1,1),(-2,2,1,2),(-2,2,2,-2),(-2,2,2,-1),(-2,2,2,0),(-2,2,2,1),(-2,2,2,2),(-1,-2,-2,-1),(-1,-2,-2,0),(-1,-2,-2,1),(-1,-2,-2,2),(-1,-2,-1,0),(-1,-2,-1,1),(-1,-2,-1,2),(-1,-2,0,1),(-1,-2,0,2),(-1,-2,1,2),(-1,-1,-2,-1),(-1,-1,-2,0),(-1,-1,-2,1),(-1,-1,-2,2),(-1,-1,-1,0),(-1,-1,-1,1),(-1,-1,-1,2),(-1,-1,0,1),(-1,-1,0,2),(-1,-1,1,2),(-1,0,-2,-2),(-1,0,-2,-1),(-1,0,-2,0),(-1,0,-2,1),(-1,0,-2,2),(-1,0,-1,-2),(-1,0,-1,-1),(-1,0,-1,0),(-1,0,-1,1),(-1,0,-1,2),(-1,0,0,-2),(-1,0,0,-1),(-1,0,0,0),(-1,0,0,1),(-1,0,0,2),(-1,0,1,-2),(-1,0,1,-1),(-1,0,1,0),(-1,0,1,1),(-1,0,1,2),(-1,0,2,-2),(-1,0,2,-1),(-1,0,2,0),(-1,0,2,1),(-1,0,2,2),(-1,1,-2,-2),(-1,1,-2,-1),(-1,1,-2,0),(-1,1,-2,1),(-1,1,-2,2),(-1,1,-1,-2),(-1,1,-1,-1),(-1,1,-1,0),(-1,1,-1,1),(-1,1,-1,2),(-1,1,0,-2),(-1,1,0,-1),(-1,1,0,0),(-1,1,0,1),(-1,1,0,2),(-1,1,1,-2),(-1,1,1,-1),(-1,1,1,0),(-1,1,1,1),(-1,1,1,2),(-1,1,2,-2),(-1,1,2,-1),(-1,1,2,0),(-1,1,2,1),(-1,1,2,2),(-1,2,-2,-2),(-1,2,-2,-1),(-1,2,-2,0),(-1,2,-2,1),(-1,2,-2,2),(-1,2,-1,-2),(-1,2,-1,-1),(-1,2,-1,0),(-1,2,-1,1),(-1,2,-1,2),(-1,2,0,-2),(-1,2,0,-1),(-1,2,0,0),(-1,2,0,1),(-1,2,0,2),(-1,2,1,-2),(-1,2,1,-1),(-1,2,1,0),(-1,2,1,1),(-1,2,1,2),(-1,2,2,-2),(-1,2,2,-1),(-1,2,2,0),(-1,2,2,1),(-1,2,2,2),(0,-2,-2,-1),(0,-2,-2,0),(0,-2,-2,1),(0,-2,-2,2),(0,-2,-1,0),(0,-2,-1,1),(0,-2,-1,2),(0,-2,0,1),(0,-2,0,2),(0,-2,1,2),(0,-1,-2,-1),(0,-1,-2,0),(0,-1,-2,1),(0,-1,-2,2),(0,-1,-1,0),(0,-1,-1,1),(0,-1,-1,2),(0,-1,0,1),(0,-1,0,2),(0,-1,1,2),(0,0,-2,-1),(0,0,-2,0),(0,0,-2,1),(0,0,-2,2),(0,0,-1,0),(0,0,-1,1),(0,0,-1,2),(0,0,0,1),(0,0,0,2),(0,0,1,2),(0,1,-2,-2),(0,1,-2,-1),(0,1,-2,0),(0,1,-2,1),(0,1,-2,2),(0,1,-1,-2),(0,1,-1,-1),(0,1,-1,0),(0,1,-1,1),(0,1,-1,2),(0,1,0,-2),(0,1,0,-1),(0,1,0,0),(0,1,0,1),(0,1,0,2),(0,1,1,-2),(0,1,1,-1),(0,1,1,0),(0,1,1,1),(0,1,1,2),(0,1,2,-2),(0,1,2,-1),(0,1,2,0),(0,1,2,1),(0,1,2,2),(0,2,-2,-2),(0,2,-2,-1),(0,2,-2,0),(0,2,-2,1),(0,2,-2,2),(0,2,-1,-2),(0,2,-1,-1),(0,2,-1,0),(0,2,-1,1),(0,2,-1,2),(0,2,0,-2),(0,2,0,-1),(0,2,0,0),(0,2,0,1),(0,2,0,2),(0,2,1,-2),(0,2,1,-1),(0,2,1,0),(0,2,1,1),(0,2,1,2),(0,2,2,-2),(0,2,2,-1),(0,2,2,0),(0,2,2,1),(0,2,2,2),(1,-2,-2,-1),(1,-2,-2,0),(1,-2,-2,1),(1,-2,-2,2),(1,-2,-1,0),(1,-2,-1,1),(1,-2,-1,2),(1,-2,0,1),(1,-2,0,2),(1,-2,1,2),(1,-1,-2,-1),(1,-1,-2,0),(1,-1,-2,1),(1,-1,-2,2),(1,-1,-1,0),(1,-1,-1,1),(1,-1,-1,2),(1,-1,0,1),(1,-1,0,2),(1,-1,1,2),(1,0,-2,-1),(1,0,-2,0),(1,0,-2,1),(1,0,-2,2),(1,0,-1,0),(1,0,-1,1),(1,0,-1,2),(1,0,0,1),(1,0,0,2),(1,0,1,2),(1,1,-2,-1),(1,1,-2,0),(1,1,-2,1),(1,1,-2,2),(1,1,-1,0),(1,1,-1,1),(1,1,-1,2),(1,1,0,1),(1,1,0,2),(1,1,1,2),(1,2,-2,-2),(1,2,-2,-1),(1,2,-2,0),(1,2,-2,1),(1,2,-2,2),(1,2,-1,-2),(1,2,-1,-1),(1,2,-1,0),(1,2,-1,1),(1,2,-1,2),(1,2,0,-2),(1,2,0,-1),(1,2,0,0),(1,2,0,1),(1,2,0,2),(1,2,1,-2),(1,2,1,-1),(1,2,1,0),(1,2,1,1),(1,2,1,2),(1,2,2,-2),(1,2,2,-1),(1,2,2,0),(1,2,2,1),(1,2,2,2),(2,-2,-2,-1),(2,-2,-2,0),(2,-2,-2,1),(2,-2,-2,2),(2,-2,-1,0),(2,-2,-1,1),(2,-2,-1,2),(2,-2,0,1),(2,-2,0,2),(2,-2,1,2),(2,-1,-2,-1),(2,-1,-2,0),(2,-1,-2,1),(2,-1,-2,2),(2,-1,-1,0),(2,-1,-1,1),(2,-1,-1,2),(2,-1,0,1),(2,-1,0,2),(2,-1,1,2),(2,0,-2,-1),(2,0,-2,0),(2,0,-2,1),(2,0,-2,2),(2,0,-1,0),(2,0,-1,1),(2,0,-1,2),(2,0,0,1),(2,0,0,2),(2,0,1,2),(2,1,-2,-1),(2,1,-2,0),(2,1,-2,1),(2,1,-2,2),(2,1,-1,0),(2,1,-1,1),(2,1,-1,2),(2,1,0,1),(2,1,0,2),(2,1,1,2),(2,2,-2,-1),(2,2,-2,0),(2,2,-2,1),(2,2,-2,2),(2,2,-1,0),(2,2,-1,1),(2,2,-1,2),(2,2,0,1),(2,2,0,2),(2,2,1,2)].

test_eq =>                                        
    N = 3,
    L = new_array(100),
    L :: 0..N,
    foreach (I in 1..100-1)
       if even(I) then
           L[I+1] #= L[I]+1
       else
           L[I+1] #= L[I]-1
       end
    end,
    Sols = solve_all(L).sort(),
    Sols = [{1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0},{2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1},{3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2}].

test_inc =>
    N = 100,
    L = new_array(N),
    L[1] :: 0..1,
    foreach (I in 1..N-1)
        L[I+1] #= L[I]+1
    end,
    Sols = solve_all(L).sort(),
    Sols = [{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99},{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100}].

test_neq =>
    N = 2,
    L = new_list(5),
    L :: 0..N,
    myneq(L),
    Sols = solve_all(L).sort(),
    Sols = [[0,0,0,0,0],[0,0,0,0,1],[0,0,0,0,2],[0,0,0,1,1],[0,0,0,1,2],[0,0,0,2,0],[0,0,0,2,2],[0,0,1,1,1],[0,0,1,1,2],[0,0,1,2,0],[0,0,1,2,2],[0,0,2,0,0],[0,0,2,0,1],[0,0,2,0,2],[0,0,2,2,0],[0,0,2,2,2],[0,1,1,1,1],[0,1,1,1,2],[0,1,1,2,0],[0,1,1,2,2],[0,1,2,0,0],[0,1,2,0,1],[0,1,2,0,2],[0,1,2,2,0],[0,1,2,2,2],[0,2,0,0,0],[0,2,0,0,1],[0,2,0,0,2],[0,2,0,1,1],[0,2,0,1,2],[0,2,0,2,0],[0,2,0,2,2],[0,2,2,0,0],[0,2,2,0,1],[0,2,2,0,2],[0,2,2,2,0],[0,2,2,2,2],[1,1,1,1,1],[1,1,1,1,2],[1,1,1,2,0],[1,1,1,2,2],[1,1,2,0,0],[1,1,2,0,1],[1,1,2,0,2],[1,1,2,2,0],[1,1,2,2,2],[1,2,0,0,0],[1,2,0,0,1],[1,2,0,0,2],[1,2,0,1,1],[1,2,0,1,2],[1,2,0,2,0],[1,2,0,2,2],[1,2,2,0,0],[1,2,2,0,1],[1,2,2,0,2],[1,2,2,2,0],[1,2,2,2,2],[2,0,0,0,0],[2,0,0,0,1],[2,0,0,0,2],[2,0,0,1,1],[2,0,0,1,2],[2,0,0,2,0],[2,0,0,2,2],[2,0,1,1,1],[2,0,1,1,2],[2,0,1,2,0],[2,0,1,2,2],[2,0,2,0,0],[2,0,2,0,1],[2,0,2,0,2],[2,0,2,2,0],[2,0,2,2,2],[2,2,0,0,0],[2,2,0,0,1],[2,2,0,0,2],[2,2,0,1,1],[2,2,0,1,2],[2,2,0,2,0],[2,2,0,2,2],[2,2,2,0,0],[2,2,2,0,1],[2,2,2,0,2],[2,2,2,2,0],[2,2,2,2,2]].

myneq([_]) => true.
myneq([X,Y|L]) =>
    X #!= Y+1,
    myneq([Y|L]).

test_mul =>
    B :: 0..1,
    [X,Y] :: -4..4,
    B*X #= Y,
    Sols = solve_all([B,X,Y]).sort(),
    Sols = [[0,-4,0],[0,-3,0],[0,-2,0],[0,-1,0],[0,0,0],[0,1,0],[0,2,0],[0,3,0],[0,4,0],[1,-4,-4],[1,-3,-3],[1,-2,-2],[1,-1,-1],[1,0,0],[1,1,1],[1,2,2],[1,3,3],[1,4,4]].

test_mul2 =>
    X :: 0..3,
    [Y,Z] :: -100..100,
    X*Y #= Z,
    Sols = solve_all([X,Y,Z]).sort(),
    Sols = [[0,-100,0],[0,-99,0],[0,-98,0],[0,-97,0],[0,-96,0],[0,-95,0],[0,-94,0],[0,-93,0],[0,-92,0],[0,-91,0],[0,-90,0],[0,-89,0],[0,-88,0],[0,-87,0],[0,-86,0],[0,-85,0],[0,-84,0],[0,-83,0],[0,-82,0],[0,-81,0],[0,-80,0],[0,-79,0],[0,-78,0],[0,-77,0],[0,-76,0],[0,-75,0],[0,-74,0],[0,-73,0],[0,-72,0],[0,-71,0],[0,-70,0],[0,-69,0],[0,-68,0],[0,-67,0],[0,-66,0],[0,-65,0],[0,-64,0],[0,-63,0],[0,-62,0],[0,-61,0],[0,-60,0],[0,-59,0],[0,-58,0],[0,-57,0],[0,-56,0],[0,-55,0],[0,-54,0],[0,-53,0],[0,-52,0],[0,-51,0],[0,-50,0],[0,-49,0],[0,-48,0],[0,-47,0],[0,-46,0],[0,-45,0],[0,-44,0],[0,-43,0],[0,-42,0],[0,-41,0],[0,-40,0],[0,-39,0],[0,-38,0],[0,-37,0],[0,-36,0],[0,-35,0],[0,-34,0],[0,-33,0],[0,-32,0],[0,-31,0],[0,-30,0],[0,-29,0],[0,-28,0],[0,-27,0],[0,-26,0],[0,-25,0],[0,-24,0],[0,-23,0],[0,-22,0],[0,-21,0],[0,-20,0],[0,-19,0],[0,-18,0],[0,-17,0],[0,-16,0],[0,-15,0],[0,-14,0],[0,-13,0],[0,-12,0],[0,-11,0],[0,-10,0],[0,-9,0],[0,-8,0],[0,-7,0],[0,-6,0],[0,-5,0],[0,-4,0],[0,-3,0],[0,-2,0],[0,-1,0],[0,0,0],[0,1,0],[0,2,0],[0,3,0],[0,4,0],[0,5,0],[0,6,0],[0,7,0],[0,8,0],[0,9,0],[0,10,0],[0,11,0],[0,12,0],[0,13,0],[0,14,0],[0,15,0],[0,16,0],[0,17,0],[0,18,0],[0,19,0],[0,20,0],[0,21,0],[0,22,0],[0,23,0],[0,24,0],[0,25,0],[0,26,0],[0,27,0],[0,28,0],[0,29,0],[0,30,0],[0,31,0],[0,32,0],[0,33,0],[0,34,0],[0,35,0],[0,36,0],[0,37,0],[0,38,0],[0,39,0],[0,40,0],[0,41,0],[0,42,0],[0,43,0],[0,44,0],[0,45,0],[0,46,0],[0,47,0],[0,48,0],[0,49,0],[0,50,0],[0,51,0],[0,52,0],[0,53,0],[0,54,0],[0,55,0],[0,56,0],[0,57,0],[0,58,0],[0,59,0],[0,60,0],[0,61,0],[0,62,0],[0,63,0],[0,64,0],[0,65,0],[0,66,0],[0,67,0],[0,68,0],[0,69,0],[0,70,0],[0,71,0],[0,72,0],[0,73,0],[0,74,0],[0,75,0],[0,76,0],[0,77,0],[0,78,0],[0,79,0],[0,80,0],[0,81,0],[0,82,0],[0,83,0],[0,84,0],[0,85,0],[0,86,0],[0,87,0],[0,88,0],[0,89,0],[0,90,0],[0,91,0],[0,92,0],[0,93,0],[0,94,0],[0,95,0],[0,96,0],[0,97,0],[0,98,0],[0,99,0],[0,100,0],[1,-100,-100],[1,-99,-99],[1,-98,-98],[1,-97,-97],[1,-96,-96],[1,-95,-95],[1,-94,-94],[1,-93,-93],[1,-92,-92],[1,-91,-91],[1,-90,-90],[1,-89,-89],[1,-88,-88],[1,-87,-87],[1,-86,-86],[1,-85,-85],[1,-84,-84],[1,-83,-83],[1,-82,-82],[1,-81,-81],[1,-80,-80],[1,-79,-79],[1,-78,-78],[1,-77,-77],[1,-76,-76],[1,-75,-75],[1,-74,-74],[1,-73,-73],[1,-72,-72],[1,-71,-71],[1,-70,-70],[1,-69,-69],[1,-68,-68],[1,-67,-67],[1,-66,-66],[1,-65,-65],[1,-64,-64],[1,-63,-63],[1,-62,-62],[1,-61,-61],[1,-60,-60],[1,-59,-59],[1,-58,-58],[1,-57,-57],[1,-56,-56],[1,-55,-55],[1,-54,-54],[1,-53,-53],[1,-52,-52],[1,-51,-51],[1,-50,-50],[1,-49,-49],[1,-48,-48],[1,-47,-47],[1,-46,-46],[1,-45,-45],[1,-44,-44],[1,-43,-43],[1,-42,-42],[1,-41,-41],[1,-40,-40],[1,-39,-39],[1,-38,-38],[1,-37,-37],[1,-36,-36],[1,-35,-35],[1,-34,-34],[1,-33,-33],[1,-32,-32],[1,-31,-31],[1,-30,-30],[1,-29,-29],[1,-28,-28],[1,-27,-27],[1,-26,-26],[1,-25,-25],[1,-24,-24],[1,-23,-23],[1,-22,-22],[1,-21,-21],[1,-20,-20],[1,-19,-19],[1,-18,-18],[1,-17,-17],[1,-16,-16],[1,-15,-15],[1,-14,-14],[1,-13,-13],[1,-12,-12],[1,-11,-11],[1,-10,-10],[1,-9,-9],[1,-8,-8],[1,-7,-7],[1,-6,-6],[1,-5,-5],[1,-4,-4],[1,-3,-3],[1,-2,-2],[1,-1,-1],[1,0,0],[1,1,1],[1,2,2],[1,3,3],[1,4,4],[1,5,5],[1,6,6],[1,7,7],[1,8,8],[1,9,9],[1,10,10],[1,11,11],[1,12,12],[1,13,13],[1,14,14],[1,15,15],[1,16,16],[1,17,17],[1,18,18],[1,19,19],[1,20,20],[1,21,21],[1,22,22],[1,23,23],[1,24,24],[1,25,25],[1,26,26],[1,27,27],[1,28,28],[1,29,29],[1,30,30],[1,31,31],[1,32,32],[1,33,33],[1,34,34],[1,35,35],[1,36,36],[1,37,37],[1,38,38],[1,39,39],[1,40,40],[1,41,41],[1,42,42],[1,43,43],[1,44,44],[1,45,45],[1,46,46],[1,47,47],[1,48,48],[1,49,49],[1,50,50],[1,51,51],[1,52,52],[1,53,53],[1,54,54],[1,55,55],[1,56,56],[1,57,57],[1,58,58],[1,59,59],[1,60,60],[1,61,61],[1,62,62],[1,63,63],[1,64,64],[1,65,65],[1,66,66],[1,67,67],[1,68,68],[1,69,69],[1,70,70],[1,71,71],[1,72,72],[1,73,73],[1,74,74],[1,75,75],[1,76,76],[1,77,77],[1,78,78],[1,79,79],[1,80,80],[1,81,81],[1,82,82],[1,83,83],[1,84,84],[1,85,85],[1,86,86],[1,87,87],[1,88,88],[1,89,89],[1,90,90],[1,91,91],[1,92,92],[1,93,93],[1,94,94],[1,95,95],[1,96,96],[1,97,97],[1,98,98],[1,99,99],[1,100,100],[2,-50,-100],[2,-49,-98],[2,-48,-96],[2,-47,-94],[2,-46,-92],[2,-45,-90],[2,-44,-88],[2,-43,-86],[2,-42,-84],[2,-41,-82],[2,-40,-80],[2,-39,-78],[2,-38,-76],[2,-37,-74],[2,-36,-72],[2,-35,-70],[2,-34,-68],[2,-33,-66],[2,-32,-64],[2,-31,-62],[2,-30,-60],[2,-29,-58],[2,-28,-56],[2,-27,-54],[2,-26,-52],[2,-25,-50],[2,-24,-48],[2,-23,-46],[2,-22,-44],[2,-21,-42],[2,-20,-40],[2,-19,-38],[2,-18,-36],[2,-17,-34],[2,-16,-32],[2,-15,-30],[2,-14,-28],[2,-13,-26],[2,-12,-24],[2,-11,-22],[2,-10,-20],[2,-9,-18],[2,-8,-16],[2,-7,-14],[2,-6,-12],[2,-5,-10],[2,-4,-8],[2,-3,-6],[2,-2,-4],[2,-1,-2],[2,0,0],[2,1,2],[2,2,4],[2,3,6],[2,4,8],[2,5,10],[2,6,12],[2,7,14],[2,8,16],[2,9,18],[2,10,20],[2,11,22],[2,12,24],[2,13,26],[2,14,28],[2,15,30],[2,16,32],[2,17,34],[2,18,36],[2,19,38],[2,20,40],[2,21,42],[2,22,44],[2,23,46],[2,24,48],[2,25,50],[2,26,52],[2,27,54],[2,28,56],[2,29,58],[2,30,60],[2,31,62],[2,32,64],[2,33,66],[2,34,68],[2,35,70],[2,36,72],[2,37,74],[2,38,76],[2,39,78],[2,40,80],[2,41,82],[2,42,84],[2,43,86],[2,44,88],[2,45,90],[2,46,92],[2,47,94],[2,48,96],[2,49,98],[2,50,100],[3,-33,-99],[3,-32,-96],[3,-31,-93],[3,-30,-90],[3,-29,-87],[3,-28,-84],[3,-27,-81],[3,-26,-78],[3,-25,-75],[3,-24,-72],[3,-23,-69],[3,-22,-66],[3,-21,-63],[3,-20,-60],[3,-19,-57],[3,-18,-54],[3,-17,-51],[3,-16,-48],[3,-15,-45],[3,-14,-42],[3,-13,-39],[3,-12,-36],[3,-11,-33],[3,-10,-30],[3,-9,-27],[3,-8,-24],[3,-7,-21],[3,-6,-18],[3,-5,-15],[3,-4,-12],[3,-3,-9],[3,-2,-6],[3,-1,-3],[3,0,0],[3,1,3],[3,2,6],[3,3,9],[3,4,12],[3,5,15],[3,6,18],[3,7,21],[3,8,24],[3,9,27],[3,10,30],[3,11,33],[3,12,36],[3,13,39],[3,14,42],[3,15,45],[3,16,48],[3,17,51],[3,18,54],[3,19,57],[3,20,60],[3,21,63],[3,22,66],[3,23,69],[3,24,72],[3,25,75],[3,26,78],[3,27,81],[3,28,84],[3,29,87],[3,30,90],[3,31,93],[3,32,96],[3,33,99]].

test_lex1 =>
    L1=[_],L2=[_,_],L1++L2 :: 1..2, lex_lt(L1,L2),
    Sols = solve_all(L1++L2).sort(),
    Sols = [[1,1,1],[1,1,2],[1,2,1],[1,2,2],[2,2,1],[2,2,2]].

test_lex2 =>
    L1=[_,_],L2=[_],L1++L2 :: 1..2, lex_lt(L1,L2),
    Sols = solve_all(L1++L2).sort(),
    Sols = [[1,1,2],[1,2,2]].

test_lex3 =>
    L1=[_],L2=[_,_],L1++L2 :: 1..2, lex_le(L1,L2),
    Sols = solve_all(L1++L2).sort(),
    Sols = [[1,1,1],[1,1,2],[1,2,1],[1,2,2],[2,2,1],[2,2,2]].
    
test_lex4 =>
    L1=[_,_],L2=[_],L1++L2 :: 1..2, lex_le(L1,L2),
    Sols = solve_all(L1++L2).sort(),
    Sols = [[1,1,2],[1,2,2]].

test_lex5 =>
    Vs=[X1,X2,X3,Y1,Y2,Y3],
    Vs :: 1..2, 
    lex_le([X1,X2,X3],[Y1,Y2,Y3]),
    Sols = solve_all(Vs).sort(),
    Sols = [[1,1,1,1,1,1],[1,1,1,1,1,2],[1,1,1,1,2,1],[1,1,1,1,2,2],[1,1,1,2,1,1],[1,1,1,2,1,2],[1,1,1,2,2,1],[1,1,1,2,2,2],[1,1,2,1,1,2],[1,1,2,1,2,1],[1,1,2,1,2,2],[1,1,2,2,1,1],[1,1,2,2,1,2],[1,1,2,2,2,1],[1,1,2,2,2,2],[1,2,1,1,2,1],[1,2,1,1,2,2],[1,2,1,2,1,1],[1,2,1,2,1,2],[1,2,1,2,2,1],[1,2,1,2,2,2],[1,2,2,1,2,2],[1,2,2,2,1,1],[1,2,2,2,1,2],[1,2,2,2,2,1],[1,2,2,2,2,2],[2,1,1,2,1,1],[2,1,1,2,1,2],[2,1,1,2,2,1],[2,1,1,2,2,2],[2,1,2,2,1,2],[2,1,2,2,2,1],[2,1,2,2,2,2],[2,2,1,2,2,1],[2,2,1,2,2,2],[2,2,2,2,2,2]].

test_lex6 =>
    Vs=[X1,X2,X3,Y1,Y2,Y3],
    Vs :: 1..2, 
    lex_lt([X1,X2,X3],[Y1,Y2,Y3]),
    Sols = solve_all(Vs).sort(),
    Sols = [[1,1,1,1,1,2],[1,1,1,1,2,1],[1,1,1,1,2,2],[1,1,1,2,1,1],[1,1,1,2,1,2],[1,1,1,2,2,1],[1,1,1,2,2,2],[1,1,2,1,2,1],[1,1,2,1,2,2],[1,1,2,2,1,1],[1,1,2,2,1,2],[1,1,2,2,2,1],[1,1,2,2,2,2],[1,2,1,1,2,2],[1,2,1,2,1,1],[1,2,1,2,1,2],[1,2,1,2,2,1],[1,2,1,2,2,2],[1,2,2,2,1,1],[1,2,2,2,1,2],[1,2,2,2,2,1],[1,2,2,2,2,2],[2,1,1,2,1,2],[2,1,1,2,2,1],[2,1,1,2,2,2],[2,1,2,2,2,1],[2,1,2,2,2,2],[2,2,1,2,2,2]].
    
test_lex7 =>
    Vs=[X1,X2,Y1,Y2,Y3],
    Vs :: 1..2, 
    lex_le([X1,X2],[Y1,Y2,Y3]), 
    Sols = solve_all(Vs).sort(),
    Sols = [[1,1,1,1,1],[1,1,1,1,2],[1,1,1,2,1],[1,1,1,2,2],[1,1,2,1,1],[1,1,2,1,2],[1,1,2,2,1],[1,1,2,2,2],[1,2,1,2,1],[1,2,1,2,2],[1,2,2,1,1],[1,2,2,1,2],[1,2,2,2,1],[1,2,2,2,2],[2,1,2,1,1],[2,1,2,1,2],[2,1,2,2,1],[2,1,2,2,2],[2,2,2,2,1],[2,2,2,2,2]].

test_lex8 =>
    Vs=[X1,X2,X3,Y1,Y2],
    Vs :: 1..2, 
    lex_lt([X1,X2,X3],[Y1,Y2]), 
    Sols = solve_all(Vs).sort(),
    Sols = [[1,1,1,1,2],[1,1,1,2,1],[1,1,1,2,2],[1,1,2,1,2],[1,1,2,2,1],[1,1,2,2,2],[1,2,1,2,1],[1,2,1,2,2],[1,2,2,2,1],[1,2,2,2,2],[2,1,1,2,2],[2,1,2,2,2]].

test_reif_ge1 =>
    X :: 0..1000,
    B #<=> X #>= 999,
    Sols = solve_all([X,B]).sort(),
    Sols = [[0,0],[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[8,0],[9,0],[10,0],[11,0],[12,0],[13,0],[14,0],[15,0],[16,0],[17,0],[18,0],[19,0],[20,0],[21,0],[22,0],[23,0],[24,0],[25,0],[26,0],[27,0],[28,0],[29,0],[30,0],[31,0],[32,0],[33,0],[34,0],[35,0],[36,0],[37,0],[38,0],[39,0],[40,0],[41,0],[42,0],[43,0],[44,0],[45,0],[46,0],[47,0],[48,0],[49,0],[50,0],[51,0],[52,0],[53,0],[54,0],[55,0],[56,0],[57,0],[58,0],[59,0],[60,0],[61,0],[62,0],[63,0],[64,0],[65,0],[66,0],[67,0],[68,0],[69,0],[70,0],[71,0],[72,0],[73,0],[74,0],[75,0],[76,0],[77,0],[78,0],[79,0],[80,0],[81,0],[82,0],[83,0],[84,0],[85,0],[86,0],[87,0],[88,0],[89,0],[90,0],[91,0],[92,0],[93,0],[94,0],[95,0],[96,0],[97,0],[98,0],[99,0],[100,0],[101,0],[102,0],[103,0],[104,0],[105,0],[106,0],[107,0],[108,0],[109,0],[110,0],[111,0],[112,0],[113,0],[114,0],[115,0],[116,0],[117,0],[118,0],[119,0],[120,0],[121,0],[122,0],[123,0],[124,0],[125,0],[126,0],[127,0],[128,0],[129,0],[130,0],[131,0],[132,0],[133,0],[134,0],[135,0],[136,0],[137,0],[138,0],[139,0],[140,0],[141,0],[142,0],[143,0],[144,0],[145,0],[146,0],[147,0],[148,0],[149,0],[150,0],[151,0],[152,0],[153,0],[154,0],[155,0],[156,0],[157,0],[158,0],[159,0],[160,0],[161,0],[162,0],[163,0],[164,0],[165,0],[166,0],[167,0],[168,0],[169,0],[170,0],[171,0],[172,0],[173,0],[174,0],[175,0],[176,0],[177,0],[178,0],[179,0],[180,0],[181,0],[182,0],[183,0],[184,0],[185,0],[186,0],[187,0],[188,0],[189,0],[190,0],[191,0],[192,0],[193,0],[194,0],[195,0],[196,0],[197,0],[198,0],[199,0],[200,0],[201,0],[202,0],[203,0],[204,0],[205,0],[206,0],[207,0],[208,0],[209,0],[210,0],[211,0],[212,0],[213,0],[214,0],[215,0],[216,0],[217,0],[218,0],[219,0],[220,0],[221,0],[222,0],[223,0],[224,0],[225,0],[226,0],[227,0],[228,0],[229,0],[230,0],[231,0],[232,0],[233,0],[234,0],[235,0],[236,0],[237,0],[238,0],[239,0],[240,0],[241,0],[242,0],[243,0],[244,0],[245,0],[246,0],[247,0],[248,0],[249,0],[250,0],[251,0],[252,0],[253,0],[254,0],[255,0],[256,0],[257,0],[258,0],[259,0],[260,0],[261,0],[262,0],[263,0],[264,0],[265,0],[266,0],[267,0],[268,0],[269,0],[270,0],[271,0],[272,0],[273,0],[274,0],[275,0],[276,0],[277,0],[278,0],[279,0],[280,0],[281,0],[282,0],[283,0],[284,0],[285,0],[286,0],[287,0],[288,0],[289,0],[290,0],[291,0],[292,0],[293,0],[294,0],[295,0],[296,0],[297,0],[298,0],[299,0],[300,0],[301,0],[302,0],[303,0],[304,0],[305,0],[306,0],[307,0],[308,0],[309,0],[310,0],[311,0],[312,0],[313,0],[314,0],[315,0],[316,0],[317,0],[318,0],[319,0],[320,0],[321,0],[322,0],[323,0],[324,0],[325,0],[326,0],[327,0],[328,0],[329,0],[330,0],[331,0],[332,0],[333,0],[334,0],[335,0],[336,0],[337,0],[338,0],[339,0],[340,0],[341,0],[342,0],[343,0],[344,0],[345,0],[346,0],[347,0],[348,0],[349,0],[350,0],[351,0],[352,0],[353,0],[354,0],[355,0],[356,0],[357,0],[358,0],[359,0],[360,0],[361,0],[362,0],[363,0],[364,0],[365,0],[366,0],[367,0],[368,0],[369,0],[370,0],[371,0],[372,0],[373,0],[374,0],[375,0],[376,0],[377,0],[378,0],[379,0],[380,0],[381,0],[382,0],[383,0],[384,0],[385,0],[386,0],[387,0],[388,0],[389,0],[390,0],[391,0],[392,0],[393,0],[394,0],[395,0],[396,0],[397,0],[398,0],[399,0],[400,0],[401,0],[402,0],[403,0],[404,0],[405,0],[406,0],[407,0],[408,0],[409,0],[410,0],[411,0],[412,0],[413,0],[414,0],[415,0],[416,0],[417,0],[418,0],[419,0],[420,0],[421,0],[422,0],[423,0],[424,0],[425,0],[426,0],[427,0],[428,0],[429,0],[430,0],[431,0],[432,0],[433,0],[434,0],[435,0],[436,0],[437,0],[438,0],[439,0],[440,0],[441,0],[442,0],[443,0],[444,0],[445,0],[446,0],[447,0],[448,0],[449,0],[450,0],[451,0],[452,0],[453,0],[454,0],[455,0],[456,0],[457,0],[458,0],[459,0],[460,0],[461,0],[462,0],[463,0],[464,0],[465,0],[466,0],[467,0],[468,0],[469,0],[470,0],[471,0],[472,0],[473,0],[474,0],[475,0],[476,0],[477,0],[478,0],[479,0],[480,0],[481,0],[482,0],[483,0],[484,0],[485,0],[486,0],[487,0],[488,0],[489,0],[490,0],[491,0],[492,0],[493,0],[494,0],[495,0],[496,0],[497,0],[498,0],[499,0],[500,0],[501,0],[502,0],[503,0],[504,0],[505,0],[506,0],[507,0],[508,0],[509,0],[510,0],[511,0],[512,0],[513,0],[514,0],[515,0],[516,0],[517,0],[518,0],[519,0],[520,0],[521,0],[522,0],[523,0],[524,0],[525,0],[526,0],[527,0],[528,0],[529,0],[530,0],[531,0],[532,0],[533,0],[534,0],[535,0],[536,0],[537,0],[538,0],[539,0],[540,0],[541,0],[542,0],[543,0],[544,0],[545,0],[546,0],[547,0],[548,0],[549,0],[550,0],[551,0],[552,0],[553,0],[554,0],[555,0],[556,0],[557,0],[558,0],[559,0],[560,0],[561,0],[562,0],[563,0],[564,0],[565,0],[566,0],[567,0],[568,0],[569,0],[570,0],[571,0],[572,0],[573,0],[574,0],[575,0],[576,0],[577,0],[578,0],[579,0],[580,0],[581,0],[582,0],[583,0],[584,0],[585,0],[586,0],[587,0],[588,0],[589,0],[590,0],[591,0],[592,0],[593,0],[594,0],[595,0],[596,0],[597,0],[598,0],[599,0],[600,0],[601,0],[602,0],[603,0],[604,0],[605,0],[606,0],[607,0],[608,0],[609,0],[610,0],[611,0],[612,0],[613,0],[614,0],[615,0],[616,0],[617,0],[618,0],[619,0],[620,0],[621,0],[622,0],[623,0],[624,0],[625,0],[626,0],[627,0],[628,0],[629,0],[630,0],[631,0],[632,0],[633,0],[634,0],[635,0],[636,0],[637,0],[638,0],[639,0],[640,0],[641,0],[642,0],[643,0],[644,0],[645,0],[646,0],[647,0],[648,0],[649,0],[650,0],[651,0],[652,0],[653,0],[654,0],[655,0],[656,0],[657,0],[658,0],[659,0],[660,0],[661,0],[662,0],[663,0],[664,0],[665,0],[666,0],[667,0],[668,0],[669,0],[670,0],[671,0],[672,0],[673,0],[674,0],[675,0],[676,0],[677,0],[678,0],[679,0],[680,0],[681,0],[682,0],[683,0],[684,0],[685,0],[686,0],[687,0],[688,0],[689,0],[690,0],[691,0],[692,0],[693,0],[694,0],[695,0],[696,0],[697,0],[698,0],[699,0],[700,0],[701,0],[702,0],[703,0],[704,0],[705,0],[706,0],[707,0],[708,0],[709,0],[710,0],[711,0],[712,0],[713,0],[714,0],[715,0],[716,0],[717,0],[718,0],[719,0],[720,0],[721,0],[722,0],[723,0],[724,0],[725,0],[726,0],[727,0],[728,0],[729,0],[730,0],[731,0],[732,0],[733,0],[734,0],[735,0],[736,0],[737,0],[738,0],[739,0],[740,0],[741,0],[742,0],[743,0],[744,0],[745,0],[746,0],[747,0],[748,0],[749,0],[750,0],[751,0],[752,0],[753,0],[754,0],[755,0],[756,0],[757,0],[758,0],[759,0],[760,0],[761,0],[762,0],[763,0],[764,0],[765,0],[766,0],[767,0],[768,0],[769,0],[770,0],[771,0],[772,0],[773,0],[774,0],[775,0],[776,0],[777,0],[778,0],[779,0],[780,0],[781,0],[782,0],[783,0],[784,0],[785,0],[786,0],[787,0],[788,0],[789,0],[790,0],[791,0],[792,0],[793,0],[794,0],[795,0],[796,0],[797,0],[798,0],[799,0],[800,0],[801,0],[802,0],[803,0],[804,0],[805,0],[806,0],[807,0],[808,0],[809,0],[810,0],[811,0],[812,0],[813,0],[814,0],[815,0],[816,0],[817,0],[818,0],[819,0],[820,0],[821,0],[822,0],[823,0],[824,0],[825,0],[826,0],[827,0],[828,0],[829,0],[830,0],[831,0],[832,0],[833,0],[834,0],[835,0],[836,0],[837,0],[838,0],[839,0],[840,0],[841,0],[842,0],[843,0],[844,0],[845,0],[846,0],[847,0],[848,0],[849,0],[850,0],[851,0],[852,0],[853,0],[854,0],[855,0],[856,0],[857,0],[858,0],[859,0],[860,0],[861,0],[862,0],[863,0],[864,0],[865,0],[866,0],[867,0],[868,0],[869,0],[870,0],[871,0],[872,0],[873,0],[874,0],[875,0],[876,0],[877,0],[878,0],[879,0],[880,0],[881,0],[882,0],[883,0],[884,0],[885,0],[886,0],[887,0],[888,0],[889,0],[890,0],[891,0],[892,0],[893,0],[894,0],[895,0],[896,0],[897,0],[898,0],[899,0],[900,0],[901,0],[902,0],[903,0],[904,0],[905,0],[906,0],[907,0],[908,0],[909,0],[910,0],[911,0],[912,0],[913,0],[914,0],[915,0],[916,0],[917,0],[918,0],[919,0],[920,0],[921,0],[922,0],[923,0],[924,0],[925,0],[926,0],[927,0],[928,0],[929,0],[930,0],[931,0],[932,0],[933,0],[934,0],[935,0],[936,0],[937,0],[938,0],[939,0],[940,0],[941,0],[942,0],[943,0],[944,0],[945,0],[946,0],[947,0],[948,0],[949,0],[950,0],[951,0],[952,0],[953,0],[954,0],[955,0],[956,0],[957,0],[958,0],[959,0],[960,0],[961,0],[962,0],[963,0],[964,0],[965,0],[966,0],[967,0],[968,0],[969,0],[970,0],[971,0],[972,0],[973,0],[974,0],[975,0],[976,0],[977,0],[978,0],[979,0],[980,0],[981,0],[982,0],[983,0],[984,0],[985,0],[986,0],[987,0],[988,0],[989,0],[990,0],[991,0],[992,0],[993,0],[994,0],[995,0],[996,0],[997,0],[998,0],[999,1],[1000,1]].
    
test_reif_ge2 =>
    X :: 0..1000,
    B #<=> X #=< 999,
    Sols = solve_all([X,B]).sort(),
    Sols = [[0,1],[1,1],[2,1],[3,1],[4,1],[5,1],[6,1],[7,1],[8,1],[9,1],[10,1],[11,1],[12,1],[13,1],[14,1],[15,1],[16,1],[17,1],[18,1],[19,1],[20,1],[21,1],[22,1],[23,1],[24,1],[25,1],[26,1],[27,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[37,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[53,1],[54,1],[55,1],[56,1],[57,1],[58,1],[59,1],[60,1],[61,1],[62,1],[63,1],[64,1],[65,1],[66,1],[67,1],[68,1],[69,1],[70,1],[71,1],[72,1],[73,1],[74,1],[75,1],[76,1],[77,1],[78,1],[79,1],[80,1],[81,1],[82,1],[83,1],[84,1],[85,1],[86,1],[87,1],[88,1],[89,1],[90,1],[91,1],[92,1],[93,1],[94,1],[95,1],[96,1],[97,1],[98,1],[99,1],[100,1],[101,1],[102,1],[103,1],[104,1],[105,1],[106,1],[107,1],[108,1],[109,1],[110,1],[111,1],[112,1],[113,1],[114,1],[115,1],[116,1],[117,1],[118,1],[119,1],[120,1],[121,1],[122,1],[123,1],[124,1],[125,1],[126,1],[127,1],[128,1],[129,1],[130,1],[131,1],[132,1],[133,1],[134,1],[135,1],[136,1],[137,1],[138,1],[139,1],[140,1],[141,1],[142,1],[143,1],[144,1],[145,1],[146,1],[147,1],[148,1],[149,1],[150,1],[151,1],[152,1],[153,1],[154,1],[155,1],[156,1],[157,1],[158,1],[159,1],[160,1],[161,1],[162,1],[163,1],[164,1],[165,1],[166,1],[167,1],[168,1],[169,1],[170,1],[171,1],[172,1],[173,1],[174,1],[175,1],[176,1],[177,1],[178,1],[179,1],[180,1],[181,1],[182,1],[183,1],[184,1],[185,1],[186,1],[187,1],[188,1],[189,1],[190,1],[191,1],[192,1],[193,1],[194,1],[195,1],[196,1],[197,1],[198,1],[199,1],[200,1],[201,1],[202,1],[203,1],[204,1],[205,1],[206,1],[207,1],[208,1],[209,1],[210,1],[211,1],[212,1],[213,1],[214,1],[215,1],[216,1],[217,1],[218,1],[219,1],[220,1],[221,1],[222,1],[223,1],[224,1],[225,1],[226,1],[227,1],[228,1],[229,1],[230,1],[231,1],[232,1],[233,1],[234,1],[235,1],[236,1],[237,1],[238,1],[239,1],[240,1],[241,1],[242,1],[243,1],[244,1],[245,1],[246,1],[247,1],[248,1],[249,1],[250,1],[251,1],[252,1],[253,1],[254,1],[255,1],[256,1],[257,1],[258,1],[259,1],[260,1],[261,1],[262,1],[263,1],[264,1],[265,1],[266,1],[267,1],[268,1],[269,1],[270,1],[271,1],[272,1],[273,1],[274,1],[275,1],[276,1],[277,1],[278,1],[279,1],[280,1],[281,1],[282,1],[283,1],[284,1],[285,1],[286,1],[287,1],[288,1],[289,1],[290,1],[291,1],[292,1],[293,1],[294,1],[295,1],[296,1],[297,1],[298,1],[299,1],[300,1],[301,1],[302,1],[303,1],[304,1],[305,1],[306,1],[307,1],[308,1],[309,1],[310,1],[311,1],[312,1],[313,1],[314,1],[315,1],[316,1],[317,1],[318,1],[319,1],[320,1],[321,1],[322,1],[323,1],[324,1],[325,1],[326,1],[327,1],[328,1],[329,1],[330,1],[331,1],[332,1],[333,1],[334,1],[335,1],[336,1],[337,1],[338,1],[339,1],[340,1],[341,1],[342,1],[343,1],[344,1],[345,1],[346,1],[347,1],[348,1],[349,1],[350,1],[351,1],[352,1],[353,1],[354,1],[355,1],[356,1],[357,1],[358,1],[359,1],[360,1],[361,1],[362,1],[363,1],[364,1],[365,1],[366,1],[367,1],[368,1],[369,1],[370,1],[371,1],[372,1],[373,1],[374,1],[375,1],[376,1],[377,1],[378,1],[379,1],[380,1],[381,1],[382,1],[383,1],[384,1],[385,1],[386,1],[387,1],[388,1],[389,1],[390,1],[391,1],[392,1],[393,1],[394,1],[395,1],[396,1],[397,1],[398,1],[399,1],[400,1],[401,1],[402,1],[403,1],[404,1],[405,1],[406,1],[407,1],[408,1],[409,1],[410,1],[411,1],[412,1],[413,1],[414,1],[415,1],[416,1],[417,1],[418,1],[419,1],[420,1],[421,1],[422,1],[423,1],[424,1],[425,1],[426,1],[427,1],[428,1],[429,1],[430,1],[431,1],[432,1],[433,1],[434,1],[435,1],[436,1],[437,1],[438,1],[439,1],[440,1],[441,1],[442,1],[443,1],[444,1],[445,1],[446,1],[447,1],[448,1],[449,1],[450,1],[451,1],[452,1],[453,1],[454,1],[455,1],[456,1],[457,1],[458,1],[459,1],[460,1],[461,1],[462,1],[463,1],[464,1],[465,1],[466,1],[467,1],[468,1],[469,1],[470,1],[471,1],[472,1],[473,1],[474,1],[475,1],[476,1],[477,1],[478,1],[479,1],[480,1],[481,1],[482,1],[483,1],[484,1],[485,1],[486,1],[487,1],[488,1],[489,1],[490,1],[491,1],[492,1],[493,1],[494,1],[495,1],[496,1],[497,1],[498,1],[499,1],[500,1],[501,1],[502,1],[503,1],[504,1],[505,1],[506,1],[507,1],[508,1],[509,1],[510,1],[511,1],[512,1],[513,1],[514,1],[515,1],[516,1],[517,1],[518,1],[519,1],[520,1],[521,1],[522,1],[523,1],[524,1],[525,1],[526,1],[527,1],[528,1],[529,1],[530,1],[531,1],[532,1],[533,1],[534,1],[535,1],[536,1],[537,1],[538,1],[539,1],[540,1],[541,1],[542,1],[543,1],[544,1],[545,1],[546,1],[547,1],[548,1],[549,1],[550,1],[551,1],[552,1],[553,1],[554,1],[555,1],[556,1],[557,1],[558,1],[559,1],[560,1],[561,1],[562,1],[563,1],[564,1],[565,1],[566,1],[567,1],[568,1],[569,1],[570,1],[571,1],[572,1],[573,1],[574,1],[575,1],[576,1],[577,1],[578,1],[579,1],[580,1],[581,1],[582,1],[583,1],[584,1],[585,1],[586,1],[587,1],[588,1],[589,1],[590,1],[591,1],[592,1],[593,1],[594,1],[595,1],[596,1],[597,1],[598,1],[599,1],[600,1],[601,1],[602,1],[603,1],[604,1],[605,1],[606,1],[607,1],[608,1],[609,1],[610,1],[611,1],[612,1],[613,1],[614,1],[615,1],[616,1],[617,1],[618,1],[619,1],[620,1],[621,1],[622,1],[623,1],[624,1],[625,1],[626,1],[627,1],[628,1],[629,1],[630,1],[631,1],[632,1],[633,1],[634,1],[635,1],[636,1],[637,1],[638,1],[639,1],[640,1],[641,1],[642,1],[643,1],[644,1],[645,1],[646,1],[647,1],[648,1],[649,1],[650,1],[651,1],[652,1],[653,1],[654,1],[655,1],[656,1],[657,1],[658,1],[659,1],[660,1],[661,1],[662,1],[663,1],[664,1],[665,1],[666,1],[667,1],[668,1],[669,1],[670,1],[671,1],[672,1],[673,1],[674,1],[675,1],[676,1],[677,1],[678,1],[679,1],[680,1],[681,1],[682,1],[683,1],[684,1],[685,1],[686,1],[687,1],[688,1],[689,1],[690,1],[691,1],[692,1],[693,1],[694,1],[695,1],[696,1],[697,1],[698,1],[699,1],[700,1],[701,1],[702,1],[703,1],[704,1],[705,1],[706,1],[707,1],[708,1],[709,1],[710,1],[711,1],[712,1],[713,1],[714,1],[715,1],[716,1],[717,1],[718,1],[719,1],[720,1],[721,1],[722,1],[723,1],[724,1],[725,1],[726,1],[727,1],[728,1],[729,1],[730,1],[731,1],[732,1],[733,1],[734,1],[735,1],[736,1],[737,1],[738,1],[739,1],[740,1],[741,1],[742,1],[743,1],[744,1],[745,1],[746,1],[747,1],[748,1],[749,1],[750,1],[751,1],[752,1],[753,1],[754,1],[755,1],[756,1],[757,1],[758,1],[759,1],[760,1],[761,1],[762,1],[763,1],[764,1],[765,1],[766,1],[767,1],[768,1],[769,1],[770,1],[771,1],[772,1],[773,1],[774,1],[775,1],[776,1],[777,1],[778,1],[779,1],[780,1],[781,1],[782,1],[783,1],[784,1],[785,1],[786,1],[787,1],[788,1],[789,1],[790,1],[791,1],[792,1],[793,1],[794,1],[795,1],[796,1],[797,1],[798,1],[799,1],[800,1],[801,1],[802,1],[803,1],[804,1],[805,1],[806,1],[807,1],[808,1],[809,1],[810,1],[811,1],[812,1],[813,1],[814,1],[815,1],[816,1],[817,1],[818,1],[819,1],[820,1],[821,1],[822,1],[823,1],[824,1],[825,1],[826,1],[827,1],[828,1],[829,1],[830,1],[831,1],[832,1],[833,1],[834,1],[835,1],[836,1],[837,1],[838,1],[839,1],[840,1],[841,1],[842,1],[843,1],[844,1],[845,1],[846,1],[847,1],[848,1],[849,1],[850,1],[851,1],[852,1],[853,1],[854,1],[855,1],[856,1],[857,1],[858,1],[859,1],[860,1],[861,1],[862,1],[863,1],[864,1],[865,1],[866,1],[867,1],[868,1],[869,1],[870,1],[871,1],[872,1],[873,1],[874,1],[875,1],[876,1],[877,1],[878,1],[879,1],[880,1],[881,1],[882,1],[883,1],[884,1],[885,1],[886,1],[887,1],[888,1],[889,1],[890,1],[891,1],[892,1],[893,1],[894,1],[895,1],[896,1],[897,1],[898,1],[899,1],[900,1],[901,1],[902,1],[903,1],[904,1],[905,1],[906,1],[907,1],[908,1],[909,1],[910,1],[911,1],[912,1],[913,1],[914,1],[915,1],[916,1],[917,1],[918,1],[919,1],[920,1],[921,1],[922,1],[923,1],[924,1],[925,1],[926,1],[927,1],[928,1],[929,1],[930,1],[931,1],[932,1],[933,1],[934,1],[935,1],[936,1],[937,1],[938,1],[939,1],[940,1],[941,1],[942,1],[943,1],[944,1],[945,1],[946,1],[947,1],[948,1],[949,1],[950,1],[951,1],[952,1],[953,1],[954,1],[955,1],[956,1],[957,1],[958,1],[959,1],[960,1],[961,1],[962,1],[963,1],[964,1],[965,1],[966,1],[967,1],[968,1],[969,1],[970,1],[971,1],[972,1],[973,1],[974,1],[975,1],[976,1],[977,1],[978,1],[979,1],[980,1],[981,1],[982,1],[983,1],[984,1],[985,1],[986,1],[987,1],[988,1],[989,1],[990,1],[991,1],[992,1],[993,1],[994,1],[995,1],[996,1],[997,1],[998,1],[999,1],[1000,0]].

test_reif_ge3 =>
    X :: 0..3,
    Y :: 0..3,
    B #<=> X #=< Y,
    Sols = solve_all([X,Y,B]).sort(),
    Sols = [[0,0,1],[0,1,1],[0,2,1],[0,3,1],[1,0,0],[1,1,1],[1,2,1],[1,3,1],[2,0,0],[2,1,0],[2,2,1],[2,3,1],[3,0,0],[3,1,0],[3,2,0],[3,3,1]].

    
test_reif_ge4 =>
    X :: -3..3,
    Y :: -3..3        ,
    B #<=> X #=< Y,
    Sols = solve_all([X,Y,B]).sort(),
    Sols = [[-3,-3,1],[-3,-2,1],[-3,-1,1],[-3,0,1],[-3,1,1],[-3,2,1],[-3,3,1],[-2,-3,0],[-2,-2,1],[-2,-1,1],[-2,0,1],[-2,1,1],[-2,2,1],[-2,3,1],[-1,-3,0],[-1,-2,0],[-1,-1,1],[-1,0,1],[-1,1,1],[-1,2,1],[-1,3,1],[0,-3,0],[0,-2,0],[0,-1,0],[0,0,1],[0,1,1],[0,2,1],[0,3,1],[1,-3,0],[1,-2,0],[1,-1,0],[1,0,0],[1,1,1],[1,2,1],[1,3,1],[2,-3,0],[2,-2,0],[2,-1,0],[2,0,0],[2,1,0],[2,2,1],[2,3,1],[3,-3,0],[3,-2,0],[3,-1,0],[3,0,0],[3,1,0],[3,2,0],[3,3,1]].

test_reif_ge5 =>
    X :: -7..7,
    B #<=> X #>= -1,
    Sols = solve_all([B,X]).sort(),
    Sols = [[0,-7],[0,-6],[0,-5],[0,-4],[0,-3],[0,-2],[1,-1],[1,0],[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7]].

test_reif_ge6 =>
    X :: -7..7,
    B #<=> X #>= 2,
    Sols = solve_all([B,X]).sort(),
    Sols = [[0,-7],[0,-6],[0,-5],[0,-4],[0,-3],[0,-2],[0,-1],[0,0],[0,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7]].

test_reif_ge7 =>
    X :: -7..7,
    B #<=> X #>= 6,
    Sols = solve_all([B,X]).sort(),
    Sols = [[0,-7],[0,-6],[0,-5],[0,-4],[0,-3],[0,-2],[0,-1],[0,0],[0,1],[0,2],[0,3],[0,4],[0,5],[1,6],[1,7]].
    
test_reif_ge8 =>
    X :: -7..7,
    B #<=> -1 #>= X,
    Sols = solve_all([B,X]).sort(),
    Sols = [[0,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[1,-7],[1,-6],[1,-5],[1,-4],[1,-3],[1,-2],[1,-1]].

test_reif_ge9 =>
    X :: -7..7,
    B #<=> 2 #>= X,
    Sols = solve_all([B,X]).sort(),
    Sols = [[0,3],[0,4],[0,5],[0,6],[0,7],[1,-7],[1,-6],[1,-5],[1,-4],[1,-3],[1,-2],[1,-1],[1,0],[1,1],[1,2]].

test_reif_ge10 =>
    X :: -7..7,
    B #<=> 6 #>= X,
    Sols = solve_all([B,X]).sort(),
    Sols = [[0,7],[1,-7],[1,-6],[1,-5],[1,-4],[1,-3],[1,-2],[1,-1],[1,0],[1,1],[1,2],[1,3],[1,4],[1,5],[1,6]].

test_imp_ge5 =>
    X :: -7..7,
    B #=> X #>= -1,
    Sols = solve_all([B,X]).sort(),
    Sols = [[0,-7],[0,-6],[0,-5],[0,-4],[0,-3],[0,-2],[0,-1],[0,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[1,-1],[1,0],[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7]].
    
test_imp_ge6 =>
    X :: -7..7,
    B #=> X #>= 2,
    Sols = solve_all([B,X]).sort(),
    Sols = [[0,-7],[0,-6],[0,-5],[0,-4],[0,-3],[0,-2],[0,-1],[0,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7]].

test_imp_ge7 =>
    X :: -7..7,
    B #=> X #>= 6,
    Sols = solve_all([B,X]).sort(),
    Sols = [[0,-7],[0,-6],[0,-5],[0,-4],[0,-3],[0,-2],[0,-1],[0,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[1,6],[1,7]].
    
test_imp_ge8 =>
    X :: -7..7,
    B #=> -1 #>= X,
    Sols = solve_all([B,X]).sort(),
    Sols = [[0,-7],[0,-6],[0,-5],[0,-4],[0,-3],[0,-2],[0,-1],[0,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[1,-7],[1,-6],[1,-5],[1,-4],[1,-3],[1,-2],[1,-1]].

test_imp_ge9 =>
    X :: -7..7,
    B #=> 2 #>= X,
    Sols = solve_all([B,X]).sort(),
    Sols = [[0,-7],[0,-6],[0,-5],[0,-4],[0,-3],[0,-2],[0,-1],[0,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[1,-7],[1,-6],[1,-5],[1,-4],[1,-3],[1,-2],[1,-1],[1,0],[1,1],[1,2]].

test_imp_ge10 =>
    X :: -7..7,
    B #=> 6 #>= X,
    Sols = solve_all([B,X]).sort(),
    Sols = [[0,-7],[0,-6],[0,-5],[0,-4],[0,-3],[0,-2],[0,-1],[0,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[1,-7],[1,-6],[1,-5],[1,-4],[1,-3],[1,-2],[1,-1],[1,0],[1,1],[1,2],[1,3],[1,4],[1,5],[1,6]].

        
test_nonlinear1 ?=>
    random_dom(D1), V1 :: D1,
    random_dom(D2), V2 :: D2,
    random_dom(D3),    V3 :: D3,
    syms(Rs),
    member(R,Rs),
    Exp = new_struct(R,[V1,V2]),
    Exp #= V3,
    solve([V1,V2,V3]),
    (V3 is Exp->true;writeln($fail(Exp#=V3))),
    fail.
test_nonlinear1 => true.
    
test_nonlinear2 ?=> 
    random_dom(D1), V1 :: D1,
    random_dom(D2), V2 :: D2,
    random_dom(D3),    V3 :: D3,
    syms(Rs),
    member(R,Rs),
    Exp = new_struct(R,[V1,V2]),
    V3 #= Exp,
    solve([V1,V2,V3]),
    (V3 is Exp ->true;writeln($fail(V3#=Exp))),
    fail.
test_nonlinear2 =>     true.

test_nonlinear3 ?=>
    random_dom(D1), V1 :: D1,
    random_dom(D2), V2 :: D2,
    (V1*V2#>0) #<=> B,
    solve([B,V1,V2]),
    (V1*V2>0,B==0->writeln($wrong_top1(V1,V2,B));true),
    (V1*V2=<0,B==1->writeln($wrong_top1(V1,V2,B));true),
    fail.
test_nonlinear3 => true.
    
test_nonlinear4 ?=>
    random_dom(D1), V1 :: D1,
    random_dom(D2), V2 :: D2,
    V1*V2#<0 #<=> B,
    solve([B,V1,V2]),
    (V1*V2<0,B==0->writeln($wrong_top2(V1,V2,B));true),
    (V1*V2>=0,B==1->writeln($wrong_top2(V1,V2,B));true),
    fail.
test_nonlinear4 =>true.

test_nonlinear5 ?=>
    random_dom(D1), V1 :: D1,
    random_dom(D2), V2 :: D2,
    (V1 #>= V2) #<=> B,
    solve([B,V1,V2]),
    (V1>=V2,B==0->writeln($wrong_top3(V1,V2,B));true),
    (V1<V2,B==1->writeln($wrong_top3(V1,V2,B));true),
    fail.
test_nonlinear5 => true.
    
test_nonlinear6 ?=> 
    random_dom(D1), V1 :: D1,
    random_dom(D2), V2 :: D2,
    (V1 #>= V2+10) #<=> B,
    solve([B,V1,V2]),
    (V1>=V2+10,B==0->writeln($wrong_top3(V1,V2,B));true),
    (V1<V2+10,B==1->writeln($wrong_top3(V1,V2,B));true),
    fail.
test_nonlinear6 => true.

test_nonlinear7 ?=> 
    V1 :: [0,2,3,4,5,6,7,8,9,12,15,16,17,19,22,23,25,28,29,31],
    V2 :: [0,1,6,10,11,13,15,16,18,20,25,28,31,32],
    (V1 #>= V2) #<=> B,
    solve([B,V1,V2]),
    (V1>=V2,B==0->writeln($wrong_top5(V1,V2,B));true),
    (V1<V2,B==1->writeln($wrong_top5(V1,V2,B));true),
    fail.
test_nonlinear7 =>     true.

test_nonlinear8 ?=>
    V1 :: [0,2,3,4,5,6,7,8,9,12,15,16,17,19,22,23,25,28,29,31],
    V2 :: [0,1,6,10,11,13,15,16,18,20,25,28,31,32],
    (V1 #>= V2-10) #<=> B,
    solve([B,V1,V2]),
    (V1>=V2-10,B==0->writeln($wrong_top6(V1,V2,B));true),
    (V1<V2-10,B==1->writeln($wrong_top6(V1,V2,B));true),
    fail.
test_nonlinear8 =>    true.
    

test_nonlinear9 ?=>
    V1 :: [0,2,3,4,5,6,7,8,9,12,15,16,17,19,22,23,25,28,29,31],
    V2 :: [0,1,6,10,11,13,15,16,18,20,25,28,31,32],
    (V1 #> V2) #<=> B,
    solve([B,V1,V2]),
    (V1>V2,B==0->writeln($wrong_top7(V1,V2,B));true),
    (V1=<V2,B==1->writeln($wrong_top7(V1,V2,B));true),
    fail.
test_nonlinear9 =>    true.

index (-)
syms(['*',mod,min,max]).

test_div =>
    X :: 0..1000,
    X div 8 #= Z,
    Sols = solve_all((X,Z)).sort(),
    Sols = [(0,0),(1,0),(2,0),(3,0),(4,0),(5,0),(6,0),(7,0),(8,1),(9,1),(10,1),(11,1),(12,1),(13,1),(14,1),(15,1),(16,2),(17,2),(18,2),(19,2),(20,2),(21,2),(22,2),(23,2),(24,3),(25,3),(26,3),(27,3),(28,3),(29,3),(30,3),(31,3),(32,4),(33,4),(34,4),(35,4),(36,4),(37,4),(38,4),(39,4),(40,5),(41,5),(42,5),(43,5),(44,5),(45,5),(46,5),(47,5),(48,6),(49,6),(50,6),(51,6),(52,6),(53,6),(54,6),(55,6),(56,7),(57,7),(58,7),(59,7),(60,7),(61,7),(62,7),(63,7),(64,8),(65,8),(66,8),(67,8),(68,8),(69,8),(70,8),(71,8),(72,9),(73,9),(74,9),(75,9),(76,9),(77,9),(78,9),(79,9),(80,10),(81,10),(82,10),(83,10),(84,10),(85,10),(86,10),(87,10),(88,11),(89,11),(90,11),(91,11),(92,11),(93,11),(94,11),(95,11),(96,12),(97,12),(98,12),(99,12),(100,12),(101,12),(102,12),(103,12),(104,13),(105,13),(106,13),(107,13),(108,13),(109,13),(110,13),(111,13),(112,14),(113,14),(114,14),(115,14),(116,14),(117,14),(118,14),(119,14),(120,15),(121,15),(122,15),(123,15),(124,15),(125,15),(126,15),(127,15),(128,16),(129,16),(130,16),(131,16),(132,16),(133,16),(134,16),(135,16),(136,17),(137,17),(138,17),(139,17),(140,17),(141,17),(142,17),(143,17),(144,18),(145,18),(146,18),(147,18),(148,18),(149,18),(150,18),(151,18),(152,19),(153,19),(154,19),(155,19),(156,19),(157,19),(158,19),(159,19),(160,20),(161,20),(162,20),(163,20),(164,20),(165,20),(166,20),(167,20),(168,21),(169,21),(170,21),(171,21),(172,21),(173,21),(174,21),(175,21),(176,22),(177,22),(178,22),(179,22),(180,22),(181,22),(182,22),(183,22),(184,23),(185,23),(186,23),(187,23),(188,23),(189,23),(190,23),(191,23),(192,24),(193,24),(194,24),(195,24),(196,24),(197,24),(198,24),(199,24),(200,25),(201,25),(202,25),(203,25),(204,25),(205,25),(206,25),(207,25),(208,26),(209,26),(210,26),(211,26),(212,26),(213,26),(214,26),(215,26),(216,27),(217,27),(218,27),(219,27),(220,27),(221,27),(222,27),(223,27),(224,28),(225,28),(226,28),(227,28),(228,28),(229,28),(230,28),(231,28),(232,29),(233,29),(234,29),(235,29),(236,29),(237,29),(238,29),(239,29),(240,30),(241,30),(242,30),(243,30),(244,30),(245,30),(246,30),(247,30),(248,31),(249,31),(250,31),(251,31),(252,31),(253,31),(254,31),(255,31),(256,32),(257,32),(258,32),(259,32),(260,32),(261,32),(262,32),(263,32),(264,33),(265,33),(266,33),(267,33),(268,33),(269,33),(270,33),(271,33),(272,34),(273,34),(274,34),(275,34),(276,34),(277,34),(278,34),(279,34),(280,35),(281,35),(282,35),(283,35),(284,35),(285,35),(286,35),(287,35),(288,36),(289,36),(290,36),(291,36),(292,36),(293,36),(294,36),(295,36),(296,37),(297,37),(298,37),(299,37),(300,37),(301,37),(302,37),(303,37),(304,38),(305,38),(306,38),(307,38),(308,38),(309,38),(310,38),(311,38),(312,39),(313,39),(314,39),(315,39),(316,39),(317,39),(318,39),(319,39),(320,40),(321,40),(322,40),(323,40),(324,40),(325,40),(326,40),(327,40),(328,41),(329,41),(330,41),(331,41),(332,41),(333,41),(334,41),(335,41),(336,42),(337,42),(338,42),(339,42),(340,42),(341,42),(342,42),(343,42),(344,43),(345,43),(346,43),(347,43),(348,43),(349,43),(350,43),(351,43),(352,44),(353,44),(354,44),(355,44),(356,44),(357,44),(358,44),(359,44),(360,45),(361,45),(362,45),(363,45),(364,45),(365,45),(366,45),(367,45),(368,46),(369,46),(370,46),(371,46),(372,46),(373,46),(374,46),(375,46),(376,47),(377,47),(378,47),(379,47),(380,47),(381,47),(382,47),(383,47),(384,48),(385,48),(386,48),(387,48),(388,48),(389,48),(390,48),(391,48),(392,49),(393,49),(394,49),(395,49),(396,49),(397,49),(398,49),(399,49),(400,50),(401,50),(402,50),(403,50),(404,50),(405,50),(406,50),(407,50),(408,51),(409,51),(410,51),(411,51),(412,51),(413,51),(414,51),(415,51),(416,52),(417,52),(418,52),(419,52),(420,52),(421,52),(422,52),(423,52),(424,53),(425,53),(426,53),(427,53),(428,53),(429,53),(430,53),(431,53),(432,54),(433,54),(434,54),(435,54),(436,54),(437,54),(438,54),(439,54),(440,55),(441,55),(442,55),(443,55),(444,55),(445,55),(446,55),(447,55),(448,56),(449,56),(450,56),(451,56),(452,56),(453,56),(454,56),(455,56),(456,57),(457,57),(458,57),(459,57),(460,57),(461,57),(462,57),(463,57),(464,58),(465,58),(466,58),(467,58),(468,58),(469,58),(470,58),(471,58),(472,59),(473,59),(474,59),(475,59),(476,59),(477,59),(478,59),(479,59),(480,60),(481,60),(482,60),(483,60),(484,60),(485,60),(486,60),(487,60),(488,61),(489,61),(490,61),(491,61),(492,61),(493,61),(494,61),(495,61),(496,62),(497,62),(498,62),(499,62),(500,62),(501,62),(502,62),(503,62),(504,63),(505,63),(506,63),(507,63),(508,63),(509,63),(510,63),(511,63),(512,64),(513,64),(514,64),(515,64),(516,64),(517,64),(518,64),(519,64),(520,65),(521,65),(522,65),(523,65),(524,65),(525,65),(526,65),(527,65),(528,66),(529,66),(530,66),(531,66),(532,66),(533,66),(534,66),(535,66),(536,67),(537,67),(538,67),(539,67),(540,67),(541,67),(542,67),(543,67),(544,68),(545,68),(546,68),(547,68),(548,68),(549,68),(550,68),(551,68),(552,69),(553,69),(554,69),(555,69),(556,69),(557,69),(558,69),(559,69),(560,70),(561,70),(562,70),(563,70),(564,70),(565,70),(566,70),(567,70),(568,71),(569,71),(570,71),(571,71),(572,71),(573,71),(574,71),(575,71),(576,72),(577,72),(578,72),(579,72),(580,72),(581,72),(582,72),(583,72),(584,73),(585,73),(586,73),(587,73),(588,73),(589,73),(590,73),(591,73),(592,74),(593,74),(594,74),(595,74),(596,74),(597,74),(598,74),(599,74),(600,75),(601,75),(602,75),(603,75),(604,75),(605,75),(606,75),(607,75),(608,76),(609,76),(610,76),(611,76),(612,76),(613,76),(614,76),(615,76),(616,77),(617,77),(618,77),(619,77),(620,77),(621,77),(622,77),(623,77),(624,78),(625,78),(626,78),(627,78),(628,78),(629,78),(630,78),(631,78),(632,79),(633,79),(634,79),(635,79),(636,79),(637,79),(638,79),(639,79),(640,80),(641,80),(642,80),(643,80),(644,80),(645,80),(646,80),(647,80),(648,81),(649,81),(650,81),(651,81),(652,81),(653,81),(654,81),(655,81),(656,82),(657,82),(658,82),(659,82),(660,82),(661,82),(662,82),(663,82),(664,83),(665,83),(666,83),(667,83),(668,83),(669,83),(670,83),(671,83),(672,84),(673,84),(674,84),(675,84),(676,84),(677,84),(678,84),(679,84),(680,85),(681,85),(682,85),(683,85),(684,85),(685,85),(686,85),(687,85),(688,86),(689,86),(690,86),(691,86),(692,86),(693,86),(694,86),(695,86),(696,87),(697,87),(698,87),(699,87),(700,87),(701,87),(702,87),(703,87),(704,88),(705,88),(706,88),(707,88),(708,88),(709,88),(710,88),(711,88),(712,89),(713,89),(714,89),(715,89),(716,89),(717,89),(718,89),(719,89),(720,90),(721,90),(722,90),(723,90),(724,90),(725,90),(726,90),(727,90),(728,91),(729,91),(730,91),(731,91),(732,91),(733,91),(734,91),(735,91),(736,92),(737,92),(738,92),(739,92),(740,92),(741,92),(742,92),(743,92),(744,93),(745,93),(746,93),(747,93),(748,93),(749,93),(750,93),(751,93),(752,94),(753,94),(754,94),(755,94),(756,94),(757,94),(758,94),(759,94),(760,95),(761,95),(762,95),(763,95),(764,95),(765,95),(766,95),(767,95),(768,96),(769,96),(770,96),(771,96),(772,96),(773,96),(774,96),(775,96),(776,97),(777,97),(778,97),(779,97),(780,97),(781,97),(782,97),(783,97),(784,98),(785,98),(786,98),(787,98),(788,98),(789,98),(790,98),(791,98),(792,99),(793,99),(794,99),(795,99),(796,99),(797,99),(798,99),(799,99),(800,100),(801,100),(802,100),(803,100),(804,100),(805,100),(806,100),(807,100),(808,101),(809,101),(810,101),(811,101),(812,101),(813,101),(814,101),(815,101),(816,102),(817,102),(818,102),(819,102),(820,102),(821,102),(822,102),(823,102),(824,103),(825,103),(826,103),(827,103),(828,103),(829,103),(830,103),(831,103),(832,104),(833,104),(834,104),(835,104),(836,104),(837,104),(838,104),(839,104),(840,105),(841,105),(842,105),(843,105),(844,105),(845,105),(846,105),(847,105),(848,106),(849,106),(850,106),(851,106),(852,106),(853,106),(854,106),(855,106),(856,107),(857,107),(858,107),(859,107),(860,107),(861,107),(862,107),(863,107),(864,108),(865,108),(866,108),(867,108),(868,108),(869,108),(870,108),(871,108),(872,109),(873,109),(874,109),(875,109),(876,109),(877,109),(878,109),(879,109),(880,110),(881,110),(882,110),(883,110),(884,110),(885,110),(886,110),(887,110),(888,111),(889,111),(890,111),(891,111),(892,111),(893,111),(894,111),(895,111),(896,112),(897,112),(898,112),(899,112),(900,112),(901,112),(902,112),(903,112),(904,113),(905,113),(906,113),(907,113),(908,113),(909,113),(910,113),(911,113),(912,114),(913,114),(914,114),(915,114),(916,114),(917,114),(918,114),(919,114),(920,115),(921,115),(922,115),(923,115),(924,115),(925,115),(926,115),(927,115),(928,116),(929,116),(930,116),(931,116),(932,116),(933,116),(934,116),(935,116),(936,117),(937,117),(938,117),(939,117),(940,117),(941,117),(942,117),(943,117),(944,118),(945,118),(946,118),(947,118),(948,118),(949,118),(950,118),(951,118),(952,119),(953,119),(954,119),(955,119),(956,119),(957,119),(958,119),(959,119),(960,120),(961,120),(962,120),(963,120),(964,120),(965,120),(966,120),(967,120),(968,121),(969,121),(970,121),(971,121),(972,121),(973,121),(974,121),(975,121),(976,122),(977,122),(978,122),(979,122),(980,122),(981,122),(982,122),(983,122),(984,123),(985,123),(986,123),(987,123),(988,123),(989,123),(990,123),(991,123),(992,124),(993,124),(994,124),(995,124),(996,124),(997,124),(998,124),(999,124),(1000,125)].

test_div2 =>
    X :: 0..5,
    152 div X #= Y,
    solve_all((X,Y)).sort()=L,
    writeln(L),
    L = [(1,152),(2,76),(3,50),(4,38),(5,30)].
    

test_mod =>
    X :: 0..1000,
    X mod 8 #= Z,
    Sols = solve_all((X,Z)).sort(),
    Sols = [(0,0),(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,0),(9,1),(10,2),(11,3),(12,4),(13,5),(14,6),(15,7),(16,0),(17,1),(18,2),(19,3),(20,4),(21,5),(22,6),(23,7),(24,0),(25,1),(26,2),(27,3),(28,4),(29,5),(30,6),(31,7),(32,0),(33,1),(34,2),(35,3),(36,4),(37,5),(38,6),(39,7),(40,0),(41,1),(42,2),(43,3),(44,4),(45,5),(46,6),(47,7),(48,0),(49,1),(50,2),(51,3),(52,4),(53,5),(54,6),(55,7),(56,0),(57,1),(58,2),(59,3),(60,4),(61,5),(62,6),(63,7),(64,0),(65,1),(66,2),(67,3),(68,4),(69,5),(70,6),(71,7),(72,0),(73,1),(74,2),(75,3),(76,4),(77,5),(78,6),(79,7),(80,0),(81,1),(82,2),(83,3),(84,4),(85,5),(86,6),(87,7),(88,0),(89,1),(90,2),(91,3),(92,4),(93,5),(94,6),(95,7),(96,0),(97,1),(98,2),(99,3),(100,4),(101,5),(102,6),(103,7),(104,0),(105,1),(106,2),(107,3),(108,4),(109,5),(110,6),(111,7),(112,0),(113,1),(114,2),(115,3),(116,4),(117,5),(118,6),(119,7),(120,0),(121,1),(122,2),(123,3),(124,4),(125,5),(126,6),(127,7),(128,0),(129,1),(130,2),(131,3),(132,4),(133,5),(134,6),(135,7),(136,0),(137,1),(138,2),(139,3),(140,4),(141,5),(142,6),(143,7),(144,0),(145,1),(146,2),(147,3),(148,4),(149,5),(150,6),(151,7),(152,0),(153,1),(154,2),(155,3),(156,4),(157,5),(158,6),(159,7),(160,0),(161,1),(162,2),(163,3),(164,4),(165,5),(166,6),(167,7),(168,0),(169,1),(170,2),(171,3),(172,4),(173,5),(174,6),(175,7),(176,0),(177,1),(178,2),(179,3),(180,4),(181,5),(182,6),(183,7),(184,0),(185,1),(186,2),(187,3),(188,4),(189,5),(190,6),(191,7),(192,0),(193,1),(194,2),(195,3),(196,4),(197,5),(198,6),(199,7),(200,0),(201,1),(202,2),(203,3),(204,4),(205,5),(206,6),(207,7),(208,0),(209,1),(210,2),(211,3),(212,4),(213,5),(214,6),(215,7),(216,0),(217,1),(218,2),(219,3),(220,4),(221,5),(222,6),(223,7),(224,0),(225,1),(226,2),(227,3),(228,4),(229,5),(230,6),(231,7),(232,0),(233,1),(234,2),(235,3),(236,4),(237,5),(238,6),(239,7),(240,0),(241,1),(242,2),(243,3),(244,4),(245,5),(246,6),(247,7),(248,0),(249,1),(250,2),(251,3),(252,4),(253,5),(254,6),(255,7),(256,0),(257,1),(258,2),(259,3),(260,4),(261,5),(262,6),(263,7),(264,0),(265,1),(266,2),(267,3),(268,4),(269,5),(270,6),(271,7),(272,0),(273,1),(274,2),(275,3),(276,4),(277,5),(278,6),(279,7),(280,0),(281,1),(282,2),(283,3),(284,4),(285,5),(286,6),(287,7),(288,0),(289,1),(290,2),(291,3),(292,4),(293,5),(294,6),(295,7),(296,0),(297,1),(298,2),(299,3),(300,4),(301,5),(302,6),(303,7),(304,0),(305,1),(306,2),(307,3),(308,4),(309,5),(310,6),(311,7),(312,0),(313,1),(314,2),(315,3),(316,4),(317,5),(318,6),(319,7),(320,0),(321,1),(322,2),(323,3),(324,4),(325,5),(326,6),(327,7),(328,0),(329,1),(330,2),(331,3),(332,4),(333,5),(334,6),(335,7),(336,0),(337,1),(338,2),(339,3),(340,4),(341,5),(342,6),(343,7),(344,0),(345,1),(346,2),(347,3),(348,4),(349,5),(350,6),(351,7),(352,0),(353,1),(354,2),(355,3),(356,4),(357,5),(358,6),(359,7),(360,0),(361,1),(362,2),(363,3),(364,4),(365,5),(366,6),(367,7),(368,0),(369,1),(370,2),(371,3),(372,4),(373,5),(374,6),(375,7),(376,0),(377,1),(378,2),(379,3),(380,4),(381,5),(382,6),(383,7),(384,0),(385,1),(386,2),(387,3),(388,4),(389,5),(390,6),(391,7),(392,0),(393,1),(394,2),(395,3),(396,4),(397,5),(398,6),(399,7),(400,0),(401,1),(402,2),(403,3),(404,4),(405,5),(406,6),(407,7),(408,0),(409,1),(410,2),(411,3),(412,4),(413,5),(414,6),(415,7),(416,0),(417,1),(418,2),(419,3),(420,4),(421,5),(422,6),(423,7),(424,0),(425,1),(426,2),(427,3),(428,4),(429,5),(430,6),(431,7),(432,0),(433,1),(434,2),(435,3),(436,4),(437,5),(438,6),(439,7),(440,0),(441,1),(442,2),(443,3),(444,4),(445,5),(446,6),(447,7),(448,0),(449,1),(450,2),(451,3),(452,4),(453,5),(454,6),(455,7),(456,0),(457,1),(458,2),(459,3),(460,4),(461,5),(462,6),(463,7),(464,0),(465,1),(466,2),(467,3),(468,4),(469,5),(470,6),(471,7),(472,0),(473,1),(474,2),(475,3),(476,4),(477,5),(478,6),(479,7),(480,0),(481,1),(482,2),(483,3),(484,4),(485,5),(486,6),(487,7),(488,0),(489,1),(490,2),(491,3),(492,4),(493,5),(494,6),(495,7),(496,0),(497,1),(498,2),(499,3),(500,4),(501,5),(502,6),(503,7),(504,0),(505,1),(506,2),(507,3),(508,4),(509,5),(510,6),(511,7),(512,0),(513,1),(514,2),(515,3),(516,4),(517,5),(518,6),(519,7),(520,0),(521,1),(522,2),(523,3),(524,4),(525,5),(526,6),(527,7),(528,0),(529,1),(530,2),(531,3),(532,4),(533,5),(534,6),(535,7),(536,0),(537,1),(538,2),(539,3),(540,4),(541,5),(542,6),(543,7),(544,0),(545,1),(546,2),(547,3),(548,4),(549,5),(550,6),(551,7),(552,0),(553,1),(554,2),(555,3),(556,4),(557,5),(558,6),(559,7),(560,0),(561,1),(562,2),(563,3),(564,4),(565,5),(566,6),(567,7),(568,0),(569,1),(570,2),(571,3),(572,4),(573,5),(574,6),(575,7),(576,0),(577,1),(578,2),(579,3),(580,4),(581,5),(582,6),(583,7),(584,0),(585,1),(586,2),(587,3),(588,4),(589,5),(590,6),(591,7),(592,0),(593,1),(594,2),(595,3),(596,4),(597,5),(598,6),(599,7),(600,0),(601,1),(602,2),(603,3),(604,4),(605,5),(606,6),(607,7),(608,0),(609,1),(610,2),(611,3),(612,4),(613,5),(614,6),(615,7),(616,0),(617,1),(618,2),(619,3),(620,4),(621,5),(622,6),(623,7),(624,0),(625,1),(626,2),(627,3),(628,4),(629,5),(630,6),(631,7),(632,0),(633,1),(634,2),(635,3),(636,4),(637,5),(638,6),(639,7),(640,0),(641,1),(642,2),(643,3),(644,4),(645,5),(646,6),(647,7),(648,0),(649,1),(650,2),(651,3),(652,4),(653,5),(654,6),(655,7),(656,0),(657,1),(658,2),(659,3),(660,4),(661,5),(662,6),(663,7),(664,0),(665,1),(666,2),(667,3),(668,4),(669,5),(670,6),(671,7),(672,0),(673,1),(674,2),(675,3),(676,4),(677,5),(678,6),(679,7),(680,0),(681,1),(682,2),(683,3),(684,4),(685,5),(686,6),(687,7),(688,0),(689,1),(690,2),(691,3),(692,4),(693,5),(694,6),(695,7),(696,0),(697,1),(698,2),(699,3),(700,4),(701,5),(702,6),(703,7),(704,0),(705,1),(706,2),(707,3),(708,4),(709,5),(710,6),(711,7),(712,0),(713,1),(714,2),(715,3),(716,4),(717,5),(718,6),(719,7),(720,0),(721,1),(722,2),(723,3),(724,4),(725,5),(726,6),(727,7),(728,0),(729,1),(730,2),(731,3),(732,4),(733,5),(734,6),(735,7),(736,0),(737,1),(738,2),(739,3),(740,4),(741,5),(742,6),(743,7),(744,0),(745,1),(746,2),(747,3),(748,4),(749,5),(750,6),(751,7),(752,0),(753,1),(754,2),(755,3),(756,4),(757,5),(758,6),(759,7),(760,0),(761,1),(762,2),(763,3),(764,4),(765,5),(766,6),(767,7),(768,0),(769,1),(770,2),(771,3),(772,4),(773,5),(774,6),(775,7),(776,0),(777,1),(778,2),(779,3),(780,4),(781,5),(782,6),(783,7),(784,0),(785,1),(786,2),(787,3),(788,4),(789,5),(790,6),(791,7),(792,0),(793,1),(794,2),(795,3),(796,4),(797,5),(798,6),(799,7),(800,0),(801,1),(802,2),(803,3),(804,4),(805,5),(806,6),(807,7),(808,0),(809,1),(810,2),(811,3),(812,4),(813,5),(814,6),(815,7),(816,0),(817,1),(818,2),(819,3),(820,4),(821,5),(822,6),(823,7),(824,0),(825,1),(826,2),(827,3),(828,4),(829,5),(830,6),(831,7),(832,0),(833,1),(834,2),(835,3),(836,4),(837,5),(838,6),(839,7),(840,0),(841,1),(842,2),(843,3),(844,4),(845,5),(846,6),(847,7),(848,0),(849,1),(850,2),(851,3),(852,4),(853,5),(854,6),(855,7),(856,0),(857,1),(858,2),(859,3),(860,4),(861,5),(862,6),(863,7),(864,0),(865,1),(866,2),(867,3),(868,4),(869,5),(870,6),(871,7),(872,0),(873,1),(874,2),(875,3),(876,4),(877,5),(878,6),(879,7),(880,0),(881,1),(882,2),(883,3),(884,4),(885,5),(886,6),(887,7),(888,0),(889,1),(890,2),(891,3),(892,4),(893,5),(894,6),(895,7),(896,0),(897,1),(898,2),(899,3),(900,4),(901,5),(902,6),(903,7),(904,0),(905,1),(906,2),(907,3),(908,4),(909,5),(910,6),(911,7),(912,0),(913,1),(914,2),(915,3),(916,4),(917,5),(918,6),(919,7),(920,0),(921,1),(922,2),(923,3),(924,4),(925,5),(926,6),(927,7),(928,0),(929,1),(930,2),(931,3),(932,4),(933,5),(934,6),(935,7),(936,0),(937,1),(938,2),(939,3),(940,4),(941,5),(942,6),(943,7),(944,0),(945,1),(946,2),(947,3),(948,4),(949,5),(950,6),(951,7),(952,0),(953,1),(954,2),(955,3),(956,4),(957,5),(958,6),(959,7),(960,0),(961,1),(962,2),(963,3),(964,4),(965,5),(966,6),(967,7),(968,0),(969,1),(970,2),(971,3),(972,4),(973,5),(974,6),(975,7),(976,0),(977,1),(978,2),(979,3),(980,4),(981,5),(982,6),(983,7),(984,0),(985,1),(986,2),(987,3),(988,4),(989,5),(990,6),(991,7),(992,0),(993,1),(994,2),(995,3),(996,4),(997,5),(998,6),(999,7),(1000,0)].

test_mod2 =>
    X :: 1..5,
    152 mod X #= Y,
    solve_all((X,Y)).sort()=L,
    L = [(1,0),(2,0),(3,2),(4,0),(5,2)].
    
        
random_dom(D) =>
    D = [I : I in 0..16, random() mod 2==1].

test_reif1 =>  % 7.47
    V1 :: [-15,-13,-12,-11,-10,-9,-8,-7,-6,-3,0,1,2,4,7,8,10,13,14,16],
    V2 :: [-16,-15,-10,-6,-5,-3,-1,0,2,4,9,12,15,16],
    (V1 #>= V2) #<=> B,
    Sols = solve_all([B,V1,V2]).sort(),
    Sols = [[0,-15,-10],[0,-15,-6],[0,-15,-5],[0,-15,-3],[0,-15,-1],[0,-15,0],[0,-15,2],[0,-15,4],[0,-15,9],[0,-15,12],[0,-15,15],[0,-15,16],[0,-13,-10],[0,-13,-6],[0,-13,-5],[0,-13,-3],[0,-13,-1],[0,-13,0],[0,-13,2],[0,-13,4],[0,-13,9],[0,-13,12],[0,-13,15],[0,-13,16],[0,-12,-10],[0,-12,-6],[0,-12,-5],[0,-12,-3],[0,-12,-1],[0,-12,0],[0,-12,2],[0,-12,4],[0,-12,9],[0,-12,12],[0,-12,15],[0,-12,16],[0,-11,-10],[0,-11,-6],[0,-11,-5],[0,-11,-3],[0,-11,-1],[0,-11,0],[0,-11,2],[0,-11,4],[0,-11,9],[0,-11,12],[0,-11,15],[0,-11,16],[0,-10,-6],[0,-10,-5],[0,-10,-3],[0,-10,-1],[0,-10,0],[0,-10,2],[0,-10,4],[0,-10,9],[0,-10,12],[0,-10,15],[0,-10,16],[0,-9,-6],[0,-9,-5],[0,-9,-3],[0,-9,-1],[0,-9,0],[0,-9,2],[0,-9,4],[0,-9,9],[0,-9,12],[0,-9,15],[0,-9,16],[0,-8,-6],[0,-8,-5],[0,-8,-3],[0,-8,-1],[0,-8,0],[0,-8,2],[0,-8,4],[0,-8,9],[0,-8,12],[0,-8,15],[0,-8,16],[0,-7,-6],[0,-7,-5],[0,-7,-3],[0,-7,-1],[0,-7,0],[0,-7,2],[0,-7,4],[0,-7,9],[0,-7,12],[0,-7,15],[0,-7,16],[0,-6,-5],[0,-6,-3],[0,-6,-1],[0,-6,0],[0,-6,2],[0,-6,4],[0,-6,9],[0,-6,12],[0,-6,15],[0,-6,16],[0,-3,-1],[0,-3,0],[0,-3,2],[0,-3,4],[0,-3,9],[0,-3,12],[0,-3,15],[0,-3,16],[0,0,2],[0,0,4],[0,0,9],[0,0,12],[0,0,15],[0,0,16],[0,1,2],[0,1,4],[0,1,9],[0,1,12],[0,1,15],[0,1,16],[0,2,4],[0,2,9],[0,2,12],[0,2,15],[0,2,16],[0,4,9],[0,4,12],[0,4,15],[0,4,16],[0,7,9],[0,7,12],[0,7,15],[0,7,16],[0,8,9],[0,8,12],[0,8,15],[0,8,16],[0,10,12],[0,10,15],[0,10,16],[0,13,15],[0,13,16],[0,14,15],[0,14,16],[1,-15,-16],[1,-15,-15],[1,-13,-16],[1,-13,-15],[1,-12,-16],[1,-12,-15],[1,-11,-16],[1,-11,-15],[1,-10,-16],[1,-10,-15],[1,-10,-10],[1,-9,-16],[1,-9,-15],[1,-9,-10],[1,-8,-16],[1,-8,-15],[1,-8,-10],[1,-7,-16],[1,-7,-15],[1,-7,-10],[1,-6,-16],[1,-6,-15],[1,-6,-10],[1,-6,-6],[1,-3,-16],[1,-3,-15],[1,-3,-10],[1,-3,-6],[1,-3,-5],[1,-3,-3],[1,0,-16],[1,0,-15],[1,0,-10],[1,0,-6],[1,0,-5],[1,0,-3],[1,0,-1],[1,0,0],[1,1,-16],[1,1,-15],[1,1,-10],[1,1,-6],[1,1,-5],[1,1,-3],[1,1,-1],[1,1,0],[1,2,-16],[1,2,-15],[1,2,-10],[1,2,-6],[1,2,-5],[1,2,-3],[1,2,-1],[1,2,0],[1,2,2],[1,4,-16],[1,4,-15],[1,4,-10],[1,4,-6],[1,4,-5],[1,4,-3],[1,4,-1],[1,4,0],[1,4,2],[1,4,4],[1,7,-16],[1,7,-15],[1,7,-10],[1,7,-6],[1,7,-5],[1,7,-3],[1,7,-1],[1,7,0],[1,7,2],[1,7,4],[1,8,-16],[1,8,-15],[1,8,-10],[1,8,-6],[1,8,-5],[1,8,-3],[1,8,-1],[1,8,0],[1,8,2],[1,8,4],[1,10,-16],[1,10,-15],[1,10,-10],[1,10,-6],[1,10,-5],[1,10,-3],[1,10,-1],[1,10,0],[1,10,2],[1,10,4],[1,10,9],[1,13,-16],[1,13,-15],[1,13,-10],[1,13,-6],[1,13,-5],[1,13,-3],[1,13,-1],[1,13,0],[1,13,2],[1,13,4],[1,13,9],[1,13,12],[1,14,-16],[1,14,-15],[1,14,-10],[1,14,-6],[1,14,-5],[1,14,-3],[1,14,-1],[1,14,0],[1,14,2],[1,14,4],[1,14,9],[1,14,12],[1,16,-16],[1,16,-15],[1,16,-10],[1,16,-6],[1,16,-5],[1,16,-3],[1,16,-1],[1,16,0],[1,16,2],[1,16,4],[1,16,9],[1,16,12],[1,16,15],[1,16,16]].

test_reif2 => % 6.81
    V1 :: [-15,-13,-12,-11,-10,-9,-8,-7,-6,-3,0,1,2,4,7,8,10,13,14,16],
    V2 :: [-16,-15,-10,-6,-5,-3,-1,0,2,4,9,12,15,16],
    (V1 #>= V2-10) #<=> B,
    Sols = solve_all([B,V1,V2]).sort(),
    Sols = [[0,-15,-3],[0,-15,-1],[0,-15,0],[0,-15,2],[0,-15,4],[0,-15,9],[0,-15,12],[0,-15,15],[0,-15,16],[0,-13,-1],[0,-13,0],[0,-13,2],[0,-13,4],[0,-13,9],[0,-13,12],[0,-13,15],[0,-13,16],[0,-12,-1],[0,-12,0],[0,-12,2],[0,-12,4],[0,-12,9],[0,-12,12],[0,-12,15],[0,-12,16],[0,-11,0],[0,-11,2],[0,-11,4],[0,-11,9],[0,-11,12],[0,-11,15],[0,-11,16],[0,-10,2],[0,-10,4],[0,-10,9],[0,-10,12],[0,-10,15],[0,-10,16],[0,-9,2],[0,-9,4],[0,-9,9],[0,-9,12],[0,-9,15],[0,-9,16],[0,-8,4],[0,-8,9],[0,-8,12],[0,-8,15],[0,-8,16],[0,-7,4],[0,-7,9],[0,-7,12],[0,-7,15],[0,-7,16],[0,-6,9],[0,-6,12],[0,-6,15],[0,-6,16],[0,-3,9],[0,-3,12],[0,-3,15],[0,-3,16],[0,0,12],[0,0,15],[0,0,16],[0,1,12],[0,1,15],[0,1,16],[0,2,15],[0,2,16],[0,4,15],[0,4,16],[1,-15,-16],[1,-15,-15],[1,-15,-10],[1,-15,-6],[1,-15,-5],[1,-13,-16],[1,-13,-15],[1,-13,-10],[1,-13,-6],[1,-13,-5],[1,-13,-3],[1,-12,-16],[1,-12,-15],[1,-12,-10],[1,-12,-6],[1,-12,-5],[1,-12,-3],[1,-11,-16],[1,-11,-15],[1,-11,-10],[1,-11,-6],[1,-11,-5],[1,-11,-3],[1,-11,-1],[1,-10,-16],[1,-10,-15],[1,-10,-10],[1,-10,-6],[1,-10,-5],[1,-10,-3],[1,-10,-1],[1,-10,0],[1,-9,-16],[1,-9,-15],[1,-9,-10],[1,-9,-6],[1,-9,-5],[1,-9,-3],[1,-9,-1],[1,-9,0],[1,-8,-16],[1,-8,-15],[1,-8,-10],[1,-8,-6],[1,-8,-5],[1,-8,-3],[1,-8,-1],[1,-8,0],[1,-8,2],[1,-7,-16],[1,-7,-15],[1,-7,-10],[1,-7,-6],[1,-7,-5],[1,-7,-3],[1,-7,-1],[1,-7,0],[1,-7,2],[1,-6,-16],[1,-6,-15],[1,-6,-10],[1,-6,-6],[1,-6,-5],[1,-6,-3],[1,-6,-1],[1,-6,0],[1,-6,2],[1,-6,4],[1,-3,-16],[1,-3,-15],[1,-3,-10],[1,-3,-6],[1,-3,-5],[1,-3,-3],[1,-3,-1],[1,-3,0],[1,-3,2],[1,-3,4],[1,0,-16],[1,0,-15],[1,0,-10],[1,0,-6],[1,0,-5],[1,0,-3],[1,0,-1],[1,0,0],[1,0,2],[1,0,4],[1,0,9],[1,1,-16],[1,1,-15],[1,1,-10],[1,1,-6],[1,1,-5],[1,1,-3],[1,1,-1],[1,1,0],[1,1,2],[1,1,4],[1,1,9],[1,2,-16],[1,2,-15],[1,2,-10],[1,2,-6],[1,2,-5],[1,2,-3],[1,2,-1],[1,2,0],[1,2,2],[1,2,4],[1,2,9],[1,2,12],[1,4,-16],[1,4,-15],[1,4,-10],[1,4,-6],[1,4,-5],[1,4,-3],[1,4,-1],[1,4,0],[1,4,2],[1,4,4],[1,4,9],[1,4,12],[1,7,-16],[1,7,-15],[1,7,-10],[1,7,-6],[1,7,-5],[1,7,-3],[1,7,-1],[1,7,0],[1,7,2],[1,7,4],[1,7,9],[1,7,12],[1,7,15],[1,7,16],[1,8,-16],[1,8,-15],[1,8,-10],[1,8,-6],[1,8,-5],[1,8,-3],[1,8,-1],[1,8,0],[1,8,2],[1,8,4],[1,8,9],[1,8,12],[1,8,15],[1,8,16],[1,10,-16],[1,10,-15],[1,10,-10],[1,10,-6],[1,10,-5],[1,10,-3],[1,10,-1],[1,10,0],[1,10,2],[1,10,4],[1,10,9],[1,10,12],[1,10,15],[1,10,16],[1,13,-16],[1,13,-15],[1,13,-10],[1,13,-6],[1,13,-5],[1,13,-3],[1,13,-1],[1,13,0],[1,13,2],[1,13,4],[1,13,9],[1,13,12],[1,13,15],[1,13,16],[1,14,-16],[1,14,-15],[1,14,-10],[1,14,-6],[1,14,-5],[1,14,-3],[1,14,-1],[1,14,0],[1,14,2],[1,14,4],[1,14,9],[1,14,12],[1,14,15],[1,14,16],[1,16,-16],[1,16,-15],[1,16,-10],[1,16,-6],[1,16,-5],[1,16,-3],[1,16,-1],[1,16,0],[1,16,2],[1,16,4],[1,16,9],[1,16,12],[1,16,15],[1,16,16]].

test_reif3 =>  % 8.82
    V1 :: [-15,-13,-12,-11,-10,-9,-8,-7,-6,-3,0,1,2,4,7,8,10,13,14,16],
    V2 :: [-16,-15,-10,-6,-5,-3,-1,0,2,4,9,12,15,16],
    (V1 #>= V2+10) #<=> B,
    Sols = solve_all([B,V1,V2]).sort(),
    Sols = [[0,-15,-16],[0,-15,-15],[0,-15,-10],[0,-15,-6],[0,-15,-5],[0,-15,-3],[0,-15,-1],[0,-15,0],[0,-15,2],[0,-15,4],[0,-15,9],[0,-15,12],[0,-15,15],[0,-15,16],[0,-13,-16],[0,-13,-15],[0,-13,-10],[0,-13,-6],[0,-13,-5],[0,-13,-3],[0,-13,-1],[0,-13,0],[0,-13,2],[0,-13,4],[0,-13,9],[0,-13,12],[0,-13,15],[0,-13,16],[0,-12,-16],[0,-12,-15],[0,-12,-10],[0,-12,-6],[0,-12,-5],[0,-12,-3],[0,-12,-1],[0,-12,0],[0,-12,2],[0,-12,4],[0,-12,9],[0,-12,12],[0,-12,15],[0,-12,16],[0,-11,-16],[0,-11,-15],[0,-11,-10],[0,-11,-6],[0,-11,-5],[0,-11,-3],[0,-11,-1],[0,-11,0],[0,-11,2],[0,-11,4],[0,-11,9],[0,-11,12],[0,-11,15],[0,-11,16],[0,-10,-16],[0,-10,-15],[0,-10,-10],[0,-10,-6],[0,-10,-5],[0,-10,-3],[0,-10,-1],[0,-10,0],[0,-10,2],[0,-10,4],[0,-10,9],[0,-10,12],[0,-10,15],[0,-10,16],[0,-9,-16],[0,-9,-15],[0,-9,-10],[0,-9,-6],[0,-9,-5],[0,-9,-3],[0,-9,-1],[0,-9,0],[0,-9,2],[0,-9,4],[0,-9,9],[0,-9,12],[0,-9,15],[0,-9,16],[0,-8,-16],[0,-8,-15],[0,-8,-10],[0,-8,-6],[0,-8,-5],[0,-8,-3],[0,-8,-1],[0,-8,0],[0,-8,2],[0,-8,4],[0,-8,9],[0,-8,12],[0,-8,15],[0,-8,16],[0,-7,-16],[0,-7,-15],[0,-7,-10],[0,-7,-6],[0,-7,-5],[0,-7,-3],[0,-7,-1],[0,-7,0],[0,-7,2],[0,-7,4],[0,-7,9],[0,-7,12],[0,-7,15],[0,-7,16],[0,-6,-15],[0,-6,-10],[0,-6,-6],[0,-6,-5],[0,-6,-3],[0,-6,-1],[0,-6,0],[0,-6,2],[0,-6,4],[0,-6,9],[0,-6,12],[0,-6,15],[0,-6,16],[0,-3,-10],[0,-3,-6],[0,-3,-5],[0,-3,-3],[0,-3,-1],[0,-3,0],[0,-3,2],[0,-3,4],[0,-3,9],[0,-3,12],[0,-3,15],[0,-3,16],[0,0,-6],[0,0,-5],[0,0,-3],[0,0,-1],[0,0,0],[0,0,2],[0,0,4],[0,0,9],[0,0,12],[0,0,15],[0,0,16],[0,1,-6],[0,1,-5],[0,1,-3],[0,1,-1],[0,1,0],[0,1,2],[0,1,4],[0,1,9],[0,1,12],[0,1,15],[0,1,16],[0,2,-6],[0,2,-5],[0,2,-3],[0,2,-1],[0,2,0],[0,2,2],[0,2,4],[0,2,9],[0,2,12],[0,2,15],[0,2,16],[0,4,-5],[0,4,-3],[0,4,-1],[0,4,0],[0,4,2],[0,4,4],[0,4,9],[0,4,12],[0,4,15],[0,4,16],[0,7,-1],[0,7,0],[0,7,2],[0,7,4],[0,7,9],[0,7,12],[0,7,15],[0,7,16],[0,8,-1],[0,8,0],[0,8,2],[0,8,4],[0,8,9],[0,8,12],[0,8,15],[0,8,16],[0,10,2],[0,10,4],[0,10,9],[0,10,12],[0,10,15],[0,10,16],[0,13,4],[0,13,9],[0,13,12],[0,13,15],[0,13,16],[0,14,9],[0,14,12],[0,14,15],[0,14,16],[0,16,9],[0,16,12],[0,16,15],[0,16,16],[1,-6,-16],[1,-3,-16],[1,-3,-15],[1,0,-16],[1,0,-15],[1,0,-10],[1,1,-16],[1,1,-15],[1,1,-10],[1,2,-16],[1,2,-15],[1,2,-10],[1,4,-16],[1,4,-15],[1,4,-10],[1,4,-6],[1,7,-16],[1,7,-15],[1,7,-10],[1,7,-6],[1,7,-5],[1,7,-3],[1,8,-16],[1,8,-15],[1,8,-10],[1,8,-6],[1,8,-5],[1,8,-3],[1,10,-16],[1,10,-15],[1,10,-10],[1,10,-6],[1,10,-5],[1,10,-3],[1,10,-1],[1,10,0],[1,13,-16],[1,13,-15],[1,13,-10],[1,13,-6],[1,13,-5],[1,13,-3],[1,13,-1],[1,13,0],[1,13,2],[1,14,-16],[1,14,-15],[1,14,-10],[1,14,-6],[1,14,-5],[1,14,-3],[1,14,-1],[1,14,0],[1,14,2],[1,14,4],[1,16,-16],[1,16,-15],[1,16,-10],[1,16,-6],[1,16,-5],[1,16,-3],[1,16,-1],[1,16,0],[1,16,2],[1,16,4]].

test_reif4 =>  % 
    V1 :: [0,2,3,4,5,6,7,8,9,12,15,16,17,19,22,23,25,28,29,31],
    V2 :: [0,1,6,10,11,13,15,16,18,20,25,28,31,32],
    (V1 #>= V2) #<=> B,
    Sols = solve_all([B,V1,V2]).sort(),
    Sols = [[0,0,1],[0,0,6],[0,0,10],[0,0,11],[0,0,13],[0,0,15],[0,0,16],[0,0,18],[0,0,20],[0,0,25],[0,0,28],[0,0,31],[0,0,32],[0,2,6],[0,2,10],[0,2,11],[0,2,13],[0,2,15],[0,2,16],[0,2,18],[0,2,20],[0,2,25],[0,2,28],[0,2,31],[0,2,32],[0,3,6],[0,3,10],[0,3,11],[0,3,13],[0,3,15],[0,3,16],[0,3,18],[0,3,20],[0,3,25],[0,3,28],[0,3,31],[0,3,32],[0,4,6],[0,4,10],[0,4,11],[0,4,13],[0,4,15],[0,4,16],[0,4,18],[0,4,20],[0,4,25],[0,4,28],[0,4,31],[0,4,32],[0,5,6],[0,5,10],[0,5,11],[0,5,13],[0,5,15],[0,5,16],[0,5,18],[0,5,20],[0,5,25],[0,5,28],[0,5,31],[0,5,32],[0,6,10],[0,6,11],[0,6,13],[0,6,15],[0,6,16],[0,6,18],[0,6,20],[0,6,25],[0,6,28],[0,6,31],[0,6,32],[0,7,10],[0,7,11],[0,7,13],[0,7,15],[0,7,16],[0,7,18],[0,7,20],[0,7,25],[0,7,28],[0,7,31],[0,7,32],[0,8,10],[0,8,11],[0,8,13],[0,8,15],[0,8,16],[0,8,18],[0,8,20],[0,8,25],[0,8,28],[0,8,31],[0,8,32],[0,9,10],[0,9,11],[0,9,13],[0,9,15],[0,9,16],[0,9,18],[0,9,20],[0,9,25],[0,9,28],[0,9,31],[0,9,32],[0,12,13],[0,12,15],[0,12,16],[0,12,18],[0,12,20],[0,12,25],[0,12,28],[0,12,31],[0,12,32],[0,15,16],[0,15,18],[0,15,20],[0,15,25],[0,15,28],[0,15,31],[0,15,32],[0,16,18],[0,16,20],[0,16,25],[0,16,28],[0,16,31],[0,16,32],[0,17,18],[0,17,20],[0,17,25],[0,17,28],[0,17,31],[0,17,32],[0,19,20],[0,19,25],[0,19,28],[0,19,31],[0,19,32],[0,22,25],[0,22,28],[0,22,31],[0,22,32],[0,23,25],[0,23,28],[0,23,31],[0,23,32],[0,25,28],[0,25,31],[0,25,32],[0,28,31],[0,28,32],[0,29,31],[0,29,32],[0,31,32],[1,0,0],[1,2,0],[1,2,1],[1,3,0],[1,3,1],[1,4,0],[1,4,1],[1,5,0],[1,5,1],[1,6,0],[1,6,1],[1,6,6],[1,7,0],[1,7,1],[1,7,6],[1,8,0],[1,8,1],[1,8,6],[1,9,0],[1,9,1],[1,9,6],[1,12,0],[1,12,1],[1,12,6],[1,12,10],[1,12,11],[1,15,0],[1,15,1],[1,15,6],[1,15,10],[1,15,11],[1,15,13],[1,15,15],[1,16,0],[1,16,1],[1,16,6],[1,16,10],[1,16,11],[1,16,13],[1,16,15],[1,16,16],[1,17,0],[1,17,1],[1,17,6],[1,17,10],[1,17,11],[1,17,13],[1,17,15],[1,17,16],[1,19,0],[1,19,1],[1,19,6],[1,19,10],[1,19,11],[1,19,13],[1,19,15],[1,19,16],[1,19,18],[1,22,0],[1,22,1],[1,22,6],[1,22,10],[1,22,11],[1,22,13],[1,22,15],[1,22,16],[1,22,18],[1,22,20],[1,23,0],[1,23,1],[1,23,6],[1,23,10],[1,23,11],[1,23,13],[1,23,15],[1,23,16],[1,23,18],[1,23,20],[1,25,0],[1,25,1],[1,25,6],[1,25,10],[1,25,11],[1,25,13],[1,25,15],[1,25,16],[1,25,18],[1,25,20],[1,25,25],[1,28,0],[1,28,1],[1,28,6],[1,28,10],[1,28,11],[1,28,13],[1,28,15],[1,28,16],[1,28,18],[1,28,20],[1,28,25],[1,28,28],[1,29,0],[1,29,1],[1,29,6],[1,29,10],[1,29,11],[1,29,13],[1,29,15],[1,29,16],[1,29,18],[1,29,20],[1,29,25],[1,29,28],[1,31,0],[1,31,1],[1,31,6],[1,31,10],[1,31,11],[1,31,13],[1,31,15],[1,31,16],[1,31,18],[1,31,20],[1,31,25],[1,31,28],[1,31,31]].

test_scc =>
    Vs = [{a,1}, {b,1}, {c,1}, {d,1}],
    Es = [{a,b,Bab}, {a,c,Bac}, {a,d,Bad},
          {b,c,Bbc}, {b,d,Bbd},
          {c,d,Bcd}],
    scc(Vs,Es),
    Sum #= Bab+Bac+Bad+Bbc+Bbd+Bcd,
    solve($[min(Sum)],Es),
    Sum = 3.

test_scc_grid =>
    N = 3,
    A = new_array(N,N),
    scc_grid(A),
    Sols = solve_all(A).sort(),
    Sols = [{{0,0,0},{0,0,0},{0,0,0}},{{0,0,0},{0,0,0},{0,0,1}},{{0,0,0},{0,0,0},{0,1,0}},{{0,0,0},{0,0,0},{0,1,1}},{{0,0,0},{0,0,0},{1,0,0}},{{0,0,0},{0,0,0},{1,1,0}},{{0,0,0},{0,0,0},{1,1,1}},{{0,0,0},{0,0,1},{0,0,0}},{{0,0,0},{0,0,1},{0,0,1}},{{0,0,0},{0,0,1},{0,1,1}},{{0,0,0},{0,0,1},{1,1,1}},{{0,0,0},{0,1,0},{0,0,0}},{{0,0,0},{0,1,0},{0,1,0}},{{0,0,0},{0,1,0},{0,1,1}},{{0,0,0},{0,1,0},{1,1,0}},{{0,0,0},{0,1,0},{1,1,1}},{{0,0,0},{0,1,1},{0,0,0}},{{0,0,0},{0,1,1},{0,0,1}},{{0,0,0},{0,1,1},{0,1,0}},{{0,0,0},{0,1,1},{0,1,1}},{{0,0,0},{0,1,1},{1,1,0}},{{0,0,0},{0,1,1},{1,1,1}},{{0,0,0},{1,0,0},{0,0,0}},{{0,0,0},{1,0,0},{1,0,0}},{{0,0,0},{1,0,0},{1,1,0}},{{0,0,0},{1,0,0},{1,1,1}},{{0,0,0},{1,0,1},{1,1,1}},{{0,0,0},{1,1,0},{0,0,0}},{{0,0,0},{1,1,0},{0,1,0}},{{0,0,0},{1,1,0},{0,1,1}},{{0,0,0},{1,1,0},{1,0,0}},{{0,0,0},{1,1,0},{1,1,0}},{{0,0,0},{1,1,0},{1,1,1}},{{0,0,0},{1,1,1},{0,0,0}},{{0,0,0},{1,1,1},{0,0,1}},{{0,0,0},{1,1,1},{0,1,0}},{{0,0,0},{1,1,1},{0,1,1}},{{0,0,0},{1,1,1},{1,0,0}},{{0,0,0},{1,1,1},{1,0,1}},{{0,0,0},{1,1,1},{1,1,0}},{{0,0,0},{1,1,1},{1,1,1}},{{0,0,1},{0,0,0},{0,0,0}},{{0,0,1},{0,0,1},{0,0,0}},{{0,0,1},{0,0,1},{0,0,1}},{{0,0,1},{0,0,1},{0,1,1}},{{0,0,1},{0,0,1},{1,1,1}},{{0,0,1},{0,1,1},{0,0,0}},{{0,0,1},{0,1,1},{0,0,1}},{{0,0,1},{0,1,1},{0,1,0}},{{0,0,1},{0,1,1},{0,1,1}},{{0,0,1},{0,1,1},{1,1,0}},{{0,0,1},{0,1,1},{1,1,1}},{{0,0,1},{1,0,1},{1,1,1}},{{0,0,1},{1,1,1},{0,0,0}},{{0,0,1},{1,1,1},{0,0,1}},{{0,0,1},{1,1,1},{0,1,0}},{{0,0,1},{1,1,1},{0,1,1}},{{0,0,1},{1,1,1},{1,0,0}},{{0,0,1},{1,1,1},{1,0,1}},{{0,0,1},{1,1,1},{1,1,0}},{{0,0,1},{1,1,1},{1,1,1}},{{0,1,0},{0,0,0},{0,0,0}},{{0,1,0},{0,1,0},{0,0,0}},{{0,1,0},{0,1,0},{0,1,0}},{{0,1,0},{0,1,0},{0,1,1}},{{0,1,0},{0,1,0},{1,1,0}},{{0,1,0},{0,1,0},{1,1,1}},{{0,1,0},{0,1,1},{0,0,0}},{{0,1,0},{0,1,1},{0,0,1}},{{0,1,0},{0,1,1},{0,1,0}},{{0,1,0},{0,1,1},{0,1,1}},{{0,1,0},{0,1,1},{1,1,0}},{{0,1,0},{0,1,1},{1,1,1}},{{0,1,0},{1,1,0},{0,0,0}},{{0,1,0},{1,1,0},{0,1,0}},{{0,1,0},{1,1,0},{0,1,1}},{{0,1,0},{1,1,0},{1,0,0}},{{0,1,0},{1,1,0},{1,1,0}},{{0,1,0},{1,1,0},{1,1,1}},{{0,1,0},{1,1,1},{0,0,0}},{{0,1,0},{1,1,1},{0,0,1}},{{0,1,0},{1,1,1},{0,1,0}},{{0,1,0},{1,1,1},{0,1,1}},{{0,1,0},{1,1,1},{1,0,0}},{{0,1,0},{1,1,1},{1,0,1}},{{0,1,0},{1,1,1},{1,1,0}},{{0,1,0},{1,1,1},{1,1,1}},{{0,1,1},{0,0,0},{0,0,0}},{{0,1,1},{0,0,1},{0,0,0}},{{0,1,1},{0,0,1},{0,0,1}},{{0,1,1},{0,0,1},{0,1,1}},{{0,1,1},{0,0,1},{1,1,1}},{{0,1,1},{0,1,0},{0,0,0}},{{0,1,1},{0,1,0},{0,1,0}},{{0,1,1},{0,1,0},{0,1,1}},{{0,1,1},{0,1,0},{1,1,0}},{{0,1,1},{0,1,0},{1,1,1}},{{0,1,1},{0,1,1},{0,0,0}},{{0,1,1},{0,1,1},{0,0,1}},{{0,1,1},{0,1,1},{0,1,0}},{{0,1,1},{0,1,1},{0,1,1}},{{0,1,1},{0,1,1},{1,1,0}},{{0,1,1},{0,1,1},{1,1,1}},{{0,1,1},{1,0,1},{1,1,1}},{{0,1,1},{1,1,0},{0,0,0}},{{0,1,1},{1,1,0},{0,1,0}},{{0,1,1},{1,1,0},{0,1,1}},{{0,1,1},{1,1,0},{1,0,0}},{{0,1,1},{1,1,0},{1,1,0}},{{0,1,1},{1,1,0},{1,1,1}},{{0,1,1},{1,1,1},{0,0,0}},{{0,1,1},{1,1,1},{0,0,1}},{{0,1,1},{1,1,1},{0,1,0}},{{0,1,1},{1,1,1},{0,1,1}},{{0,1,1},{1,1,1},{1,0,0}},{{0,1,1},{1,1,1},{1,0,1}},{{0,1,1},{1,1,1},{1,1,0}},{{0,1,1},{1,1,1},{1,1,1}},{{1,0,0},{0,0,0},{0,0,0}},{{1,0,0},{1,0,0},{0,0,0}},{{1,0,0},{1,0,0},{1,0,0}},{{1,0,0},{1,0,0},{1,1,0}},{{1,0,0},{1,0,0},{1,1,1}},{{1,0,0},{1,0,1},{1,1,1}},{{1,0,0},{1,1,0},{0,0,0}},{{1,0,0},{1,1,0},{0,1,0}},{{1,0,0},{1,1,0},{0,1,1}},{{1,0,0},{1,1,0},{1,0,0}},{{1,0,0},{1,1,0},{1,1,0}},{{1,0,0},{1,1,0},{1,1,1}},{{1,0,0},{1,1,1},{0,0,0}},{{1,0,0},{1,1,1},{0,0,1}},{{1,0,0},{1,1,1},{0,1,0}},{{1,0,0},{1,1,1},{0,1,1}},{{1,0,0},{1,1,1},{1,0,0}},{{1,0,0},{1,1,1},{1,0,1}},{{1,0,0},{1,1,1},{1,1,0}},{{1,0,0},{1,1,1},{1,1,1}},{{1,0,1},{1,0,1},{1,1,1}},{{1,0,1},{1,1,1},{0,0,0}},{{1,0,1},{1,1,1},{0,0,1}},{{1,0,1},{1,1,1},{0,1,0}},{{1,0,1},{1,1,1},{0,1,1}},{{1,0,1},{1,1,1},{1,0,0}},{{1,0,1},{1,1,1},{1,0,1}},{{1,0,1},{1,1,1},{1,1,0}},{{1,0,1},{1,1,1},{1,1,1}},{{1,1,0},{0,0,0},{0,0,0}},{{1,1,0},{0,1,0},{0,0,0}},{{1,1,0},{0,1,0},{0,1,0}},{{1,1,0},{0,1,0},{0,1,1}},{{1,1,0},{0,1,0},{1,1,0}},{{1,1,0},{0,1,0},{1,1,1}},{{1,1,0},{0,1,1},{0,0,0}},{{1,1,0},{0,1,1},{0,0,1}},{{1,1,0},{0,1,1},{0,1,0}},{{1,1,0},{0,1,1},{0,1,1}},{{1,1,0},{0,1,1},{1,1,0}},{{1,1,0},{0,1,1},{1,1,1}},{{1,1,0},{1,0,0},{0,0,0}},{{1,1,0},{1,0,0},{1,0,0}},{{1,1,0},{1,0,0},{1,1,0}},{{1,1,0},{1,0,0},{1,1,1}},{{1,1,0},{1,0,1},{1,1,1}},{{1,1,0},{1,1,0},{0,0,0}},{{1,1,0},{1,1,0},{0,1,0}},{{1,1,0},{1,1,0},{0,1,1}},{{1,1,0},{1,1,0},{1,0,0}},{{1,1,0},{1,1,0},{1,1,0}},{{1,1,0},{1,1,0},{1,1,1}},{{1,1,0},{1,1,1},{0,0,0}},{{1,1,0},{1,1,1},{0,0,1}},{{1,1,0},{1,1,1},{0,1,0}},{{1,1,0},{1,1,1},{0,1,1}},{{1,1,0},{1,1,1},{1,0,0}},{{1,1,0},{1,1,1},{1,0,1}},{{1,1,0},{1,1,1},{1,1,0}},{{1,1,0},{1,1,1},{1,1,1}},{{1,1,1},{0,0,0},{0,0,0}},{{1,1,1},{0,0,1},{0,0,0}},{{1,1,1},{0,0,1},{0,0,1}},{{1,1,1},{0,0,1},{0,1,1}},{{1,1,1},{0,0,1},{1,1,1}},{{1,1,1},{0,1,0},{0,0,0}},{{1,1,1},{0,1,0},{0,1,0}},{{1,1,1},{0,1,0},{0,1,1}},{{1,1,1},{0,1,0},{1,1,0}},{{1,1,1},{0,1,0},{1,1,1}},{{1,1,1},{0,1,1},{0,0,0}},{{1,1,1},{0,1,1},{0,0,1}},{{1,1,1},{0,1,1},{0,1,0}},{{1,1,1},{0,1,1},{0,1,1}},{{1,1,1},{0,1,1},{1,1,0}},{{1,1,1},{0,1,1},{1,1,1}},{{1,1,1},{1,0,0},{0,0,0}},{{1,1,1},{1,0,0},{1,0,0}},{{1,1,1},{1,0,0},{1,1,0}},{{1,1,1},{1,0,0},{1,1,1}},{{1,1,1},{1,0,1},{0,0,0}},{{1,1,1},{1,0,1},{0,0,1}},{{1,1,1},{1,0,1},{0,1,1}},{{1,1,1},{1,0,1},{1,0,0}},{{1,1,1},{1,0,1},{1,0,1}},{{1,1,1},{1,0,1},{1,1,0}},{{1,1,1},{1,0,1},{1,1,1}},{{1,1,1},{1,1,0},{0,0,0}},{{1,1,1},{1,1,0},{0,1,0}},{{1,1,1},{1,1,0},{0,1,1}},{{1,1,1},{1,1,0},{1,0,0}},{{1,1,1},{1,1,0},{1,1,0}},{{1,1,1},{1,1,0},{1,1,1}},{{1,1,1},{1,1,1},{0,0,0}},{{1,1,1},{1,1,1},{0,0,1}},{{1,1,1},{1,1,1},{0,1,0}},{{1,1,1},{1,1,1},{0,1,1}},{{1,1,1},{1,1,1},{1,0,0}},{{1,1,1},{1,1,1},{1,0,1}},{{1,1,1},{1,1,1},{1,1,0}},{{1,1,1},{1,1,1},{1,1,1}}].
    
test_bool_card ?=>
    between(0,3,K),
    member(R,["eq","le","ge","ne"]),
    L = new_list(10),
    L :: 0..1,
    B :: 0..1,
    post_bool_card_constr(R,L,K,B),
    solve([B|L]),
    (check_bool_card_constr(R,L,K,B) -> true; writeln($failed(check_bool_card_constr(R,L,K,B)))),
    fail.
test_bool_card => true.
    
post_bool_card_constr("eq",L,K,B) => B #<=> sum(L) #= K.
post_bool_card_constr("le",L,K,B) => B #<=> sum(L) #=< K.
post_bool_card_constr("ge",L,K,B) => B #<=> sum(L) #>= K.
post_bool_card_constr("ne",L,K,B) => B #<=> sum(L) #!= K.

check_bool_card_constr("eq",L,K,B) => (sum(L) == K -> B = 1; B = 0).
check_bool_card_constr("le",L,K,B) => (sum(L) =< K -> B = 1; B = 0).
check_bool_card_constr("ge",L,K,B) => (sum(L) >= K -> B = 1; B = 0).
check_bool_card_constr("ne",L,K,B) => (sum(L) != K -> B = 1; B = 0).

test_cum1 =>
    Ss = new_list(7),
    Ds = [16, 6,13, 7, 5,18, 4],
    Rs = [ 2, 9, 3, 7,10, 1,11],
    Ss :: 1..30,
    End :: 1..50,
    after(Ss, Ds, End),
    cumulative(Ss, Ds, Rs, 13),
    solve($[min(End)],Ss),
    End = 23.

test_cum2 =>
    Ss = [S1,S2,S3,S4,S5],
    S1 :: 0..69,
    S2 :: 1..2,
    S3 :: 0..3,
    S4 :: 0..3,
    S5 :: 2..3,
    Ds = [4,1,1,1,1],
    Rs = [1,4,2,2,1],
    cumulative(Ss, Ds, Rs, 4),
    End :: 0..69,
    after(Ss, Ds, End),
    solve($[min(End)],Ss),
    End = 6.

test_cum3 =>
    Ss = [S1,S2,S3],
    S1 :: 5..9,
    S2 :: 5..10,
    S3 :: 1..11,
    Ds = [3,4,5],
    Rs = [1,1,1],
    cumulative(Ss, Ds, Rs, 2),
    End :: 0..11,
    after(Ss, Ds, End),
    solve($[min(End)],Ss),
    End = 9.

test_cum4 =>
    Ss = [S1,S2,S3],
    S1 :: 7..10,
    S2 :: 5..12,
    S3 :: 8..14,
    Ds = [1,4,4],
    Rs = [2,2,2],
    cumulative(Ss, Ds, Rs, 2),
    End :: 0..14,
    after(Ss, Ds, End),
    solve($[min(End)],Ss),
    End = 14.

test_cum5 =>
    Ss = [S1,S2,S3],
    S1 :: 7..10,
    S2 :: 5..12,
    S3 :: 8..14,
    Ds = [1,4,4],
    Rs = [2,2,2],
    cumulative(Ss, Ds, Rs, 3),
    End :: 0..14,
    after(Ss, Ds, End),
    solve($[min(End)],Ss),
    End = 14.

test_cum6 =>
    Ss = [_,_,_],
    Ss :: 0..11,
    Ds = [3,4,5],
    Rs = [1,1,1],
    cumulative(Ss, Ds, Rs, 1),
    Sols = solve_all(Ss).sort(),
    Sols = [[0, 3, 7], [0, 3, 8], [0, 3, 9], [0, 3, 10], [0, 3, 11], [0, 4, 8], [0, 4, 9], [0, 4, 10], [0, 4, 11], [0, 5, 9], [0, 5, 10], [0, 5, 11], [0, 6, 10], [0, 6, 11], [0, 7, 11], [0, 8, 3], [0, 9, 3], [0, 9, 4], [0, 10, 3], [0, 10, 4], [0, 10, 5], [0, 11, 3], [0, 11, 4], [0, 11, 5], [0, 11, 6], [1, 4, 8], [1, 4, 9], [1, 4, 10], [1, 4, 11], [1, 5, 9], [1, 5, 10], [1, 5, 11], [1, 6, 10], [1, 6, 11], [1, 7, 11], [1, 9, 4], [1, 10, 4], [1, 10, 5], [1, 11, 4], [1, 11, 5], [1, 11, 6], [2, 5, 9], [2, 5, 10], [2, 5, 11], [2, 6, 10], [2, 6, 11], [2, 7, 11], [2, 10, 5], [2, 11, 5], [2, 11, 6], [3, 6, 10], [3, 6, 11], [3, 7, 11], [3, 11, 6], [4, 0, 7], [4, 0, 8], [4, 0, 9], [4, 0, 10], [4, 0, 11], [4, 7, 11], [5, 0, 8], [5, 0, 9], [5, 0, 10], [5, 0, 11], [5, 1, 8], [5, 1, 9], [5, 1, 10], [5, 1, 11], [5, 8, 0], [5, 9, 0], [5, 10, 0], [5, 11, 0], [6, 0, 9], [6, 0, 10], [6, 0, 11], [6, 1, 9], [6, 1, 10], [6, 1, 11], [6, 2, 9], [6, 2, 10], [6, 2, 11], [6, 9, 0], [6, 9, 1], [6, 10, 0], [6, 10, 1], [6, 11, 0], [6, 11, 1], [7, 0, 10], [7, 0, 11], [7, 1, 10], [7, 1, 11], [7, 2, 10], [7, 2, 11], [7, 3, 10], [7, 3, 11], [7, 10, 0], [7, 10, 1], [7, 10, 2], [7, 11, 0], [7, 11, 1], [7, 11, 2], [8, 0, 11], [8, 1, 11], [8, 2, 11], [8, 3, 11], [8, 4, 11], [8, 11, 0], [8, 11, 1], [8, 11, 2], [8, 11, 3], [9, 0, 4], [9, 5, 0], [10, 0, 4], [10, 0, 5], [10, 1, 5], [10, 5, 0], [10, 6, 0], [10, 6, 1], [11, 0, 4], [11, 0, 5], [11, 0, 6], [11, 1, 5], [11, 1, 6], [11, 2, 6], [11, 5, 0], [11, 6, 0], [11, 6, 1], [11, 7, 0], [11, 7, 1], [11, 7, 2]].

after([], [], _) => true.
after([S|Ss], [D|Ds], E)  => E #>= S+D, after(Ss, Ds, E).

test_circuit_bj =>
    N = 6,
    L = new_array(N),
    circuit_bj(L),
    Sols = solve_all(L).sort(),
    Sols = [{2,3,4,5,6,1},{2,3,4,6,1,5},{2,3,5,1,6,4},{2,3,5,6,4,1},{2,3,6,1,4,5},{2,3,6,5,1,4},{2,4,1,5,6,3},{2,4,1,6,3,5},{2,4,5,3,6,1},{2,4,5,6,1,3},{2,4,6,3,1,5},{2,4,6,5,3,1},{2,5,1,3,6,4},{2,5,1,6,4,3},{2,5,4,1,6,3},{2,5,4,6,3,1},{2,5,6,1,3,4},{2,5,6,3,4,1},{2,6,1,3,4,5},{2,6,1,5,3,4},{2,6,4,1,3,5},{2,6,4,5,1,3},{2,6,5,1,4,3},{2,6,5,3,1,4},{3,1,4,5,6,2},{3,1,4,6,2,5},{3,1,5,2,6,4},{3,1,5,6,4,2},{3,1,6,2,4,5},{3,1,6,5,2,4},{3,4,2,5,6,1},{3,4,2,6,1,5},{3,4,5,1,6,2},{3,4,5,6,2,1},{3,4,6,1,2,5},{3,4,6,5,1,2},{3,5,2,1,6,4},{3,5,2,6,4,1},{3,5,4,2,6,1},{3,5,4,6,1,2},{3,5,6,1,4,2},{3,5,6,2,1,4},{3,6,2,1,4,5},{3,6,2,5,1,4},{3,6,4,2,1,5},{3,6,4,5,2,1},{3,6,5,1,2,4},{3,6,5,2,4,1},{4,1,2,5,6,3},{4,1,2,6,3,5},{4,1,5,3,6,2},{4,1,5,6,2,3},{4,1,6,3,2,5},{4,1,6,5,3,2},{4,3,1,5,6,2},{4,3,1,6,2,5},{4,3,5,2,6,1},{4,3,5,6,1,2},{4,3,6,2,1,5},{4,3,6,5,2,1},{4,5,1,2,6,3},{4,5,1,6,3,2},{4,5,2,3,6,1},{4,5,2,6,1,3},{4,5,6,2,3,1},{4,5,6,3,1,2},{4,6,1,2,3,5},{4,6,1,5,2,3},{4,6,2,3,1,5},{4,6,2,5,3,1},{4,6,5,2,1,3},{4,6,5,3,2,1},{5,1,2,3,6,4},{5,1,2,6,4,3},{5,1,4,2,6,3},{5,1,4,6,3,2},{5,1,6,2,3,4},{5,1,6,3,4,2},{5,3,1,2,6,4},{5,3,1,6,4,2},{5,3,4,1,6,2},{5,3,4,6,2,1},{5,3,6,1,2,4},{5,3,6,2,4,1},{5,4,1,3,6,2},{5,4,1,6,2,3},{5,4,2,1,6,3},{5,4,2,6,3,1},{5,4,6,1,3,2},{5,4,6,3,2,1},{5,6,1,2,4,3},{5,6,1,3,2,4},{5,6,2,1,3,4},{5,6,2,3,4,1},{5,6,4,1,2,3},{5,6,4,2,3,1},{6,1,2,3,4,5},{6,1,2,5,3,4},{6,1,4,2,3,5},{6,1,4,5,2,3},{6,1,5,2,4,3},{6,1,5,3,2,4},{6,3,1,2,4,5},{6,3,1,5,2,4},{6,3,4,1,2,5},{6,3,4,5,1,2},{6,3,5,1,4,2},{6,3,5,2,1,4},{6,4,1,3,2,5},{6,4,1,5,3,2},{6,4,2,1,3,5},{6,4,2,5,1,3},{6,4,5,1,2,3},{6,4,5,3,1,2},{6,5,1,2,3,4},{6,5,1,3,4,2},{6,5,2,1,4,3},{6,5,2,3,1,4},{6,5,4,1,3,2},{6,5,4,2,1,3}].

circuit_bj(A) =>
    N = length(A),
    A :: 1..N,
    M = new_array(N,N),
    M[1,1] = 1,                                % vertex 1 is mapped to position 1
    foreach (J in 1..N, J !== 1)
        M[1,J] = 0
    end,
    M :: 0..1,
    foreach (J in 1..N)                        
        sum([M[I,J] : I in 1..N]) #= 1,        % each position J has exactly one vertex mapped to it
        sum([M[J,I] : I in 1..N]) #= 1           % each vertex is mapped to exactly one position
    end,
    %
    foreach (J in 1..N, I in 1..N)
        if (J == N) then
            Next = 1
        else
            Next = J+1
        end,
        foreach (K in 1..N, K !== I, not fd_true(A[I],K))
            #~M[I,J] #\/ #~M[K,Next]
        end,
        foreach (K in 1..N, K != I)
            M[I,J] #/\ M[K,Next] #=> (A[I] #= K)
        end
    end.

test_circuit_zinc =>
    N = 6,
    L = new_array(N),
    circuit_zinc(L),
    Sols = solve_all(L).sort(),
    Sols = [{2,3,4,5,6,1},{2,3,4,6,1,5},{2,3,5,1,6,4},{2,3,5,6,4,1},{2,3,6,1,4,5},{2,3,6,5,1,4},{2,4,1,5,6,3},{2,4,1,6,3,5},{2,4,5,3,6,1},{2,4,5,6,1,3},{2,4,6,3,1,5},{2,4,6,5,3,1},{2,5,1,3,6,4},{2,5,1,6,4,3},{2,5,4,1,6,3},{2,5,4,6,3,1},{2,5,6,1,3,4},{2,5,6,3,4,1},{2,6,1,3,4,5},{2,6,1,5,3,4},{2,6,4,1,3,5},{2,6,4,5,1,3},{2,6,5,1,4,3},{2,6,5,3,1,4},{3,1,4,5,6,2},{3,1,4,6,2,5},{3,1,5,2,6,4},{3,1,5,6,4,2},{3,1,6,2,4,5},{3,1,6,5,2,4},{3,4,2,5,6,1},{3,4,2,6,1,5},{3,4,5,1,6,2},{3,4,5,6,2,1},{3,4,6,1,2,5},{3,4,6,5,1,2},{3,5,2,1,6,4},{3,5,2,6,4,1},{3,5,4,2,6,1},{3,5,4,6,1,2},{3,5,6,1,4,2},{3,5,6,2,1,4},{3,6,2,1,4,5},{3,6,2,5,1,4},{3,6,4,2,1,5},{3,6,4,5,2,1},{3,6,5,1,2,4},{3,6,5,2,4,1},{4,1,2,5,6,3},{4,1,2,6,3,5},{4,1,5,3,6,2},{4,1,5,6,2,3},{4,1,6,3,2,5},{4,1,6,5,3,2},{4,3,1,5,6,2},{4,3,1,6,2,5},{4,3,5,2,6,1},{4,3,5,6,1,2},{4,3,6,2,1,5},{4,3,6,5,2,1},{4,5,1,2,6,3},{4,5,1,6,3,2},{4,5,2,3,6,1},{4,5,2,6,1,3},{4,5,6,2,3,1},{4,5,6,3,1,2},{4,6,1,2,3,5},{4,6,1,5,2,3},{4,6,2,3,1,5},{4,6,2,5,3,1},{4,6,5,2,1,3},{4,6,5,3,2,1},{5,1,2,3,6,4},{5,1,2,6,4,3},{5,1,4,2,6,3},{5,1,4,6,3,2},{5,1,6,2,3,4},{5,1,6,3,4,2},{5,3,1,2,6,4},{5,3,1,6,4,2},{5,3,4,1,6,2},{5,3,4,6,2,1},{5,3,6,1,2,4},{5,3,6,2,4,1},{5,4,1,3,6,2},{5,4,1,6,2,3},{5,4,2,1,6,3},{5,4,2,6,3,1},{5,4,6,1,3,2},{5,4,6,3,2,1},{5,6,1,2,4,3},{5,6,1,3,2,4},{5,6,2,1,3,4},{5,6,2,3,4,1},{5,6,4,1,2,3},{5,6,4,2,3,1},{6,1,2,3,4,5},{6,1,2,5,3,4},{6,1,4,2,3,5},{6,1,4,5,2,3},{6,1,5,2,4,3},{6,1,5,3,2,4},{6,3,1,2,4,5},{6,3,1,5,2,4},{6,3,4,1,2,5},{6,3,4,5,1,2},{6,3,5,1,4,2},{6,3,5,2,1,4},{6,4,1,3,2,5},{6,4,1,5,3,2},{6,4,2,1,3,5},{6,4,2,5,1,3},{6,4,5,1,2,3},{6,4,5,3,1,2},{6,5,1,2,3,4},{6,5,1,3,4,2},{6,5,2,1,4,3},{6,5,2,3,1,4},{6,5,4,1,3,2},{6,5,4,2,1,3}].


circuit_zinc(A) =>
    N=length(A),
    A :: 1..N,
    M = new_array(N,N),
    foreach(I in 1..N) M[I,I] = 0 end,          % not reflexive
    M :: 0..1,
    foreach(I in 1..N, J in 1..N, I !== J)      % channel
        M[I,J] #<=> (A[I] #= J)
    end,
    foreach (J in 1..N)                         % all_different(A)
        sum([M[I,J] : I in 1..N]) #= 1,
        sum([M[J,I] : I in 1..N]) #= 1
    end,
    %
    OrderM = new_array(N,N),                    % order the nodes, starting at 1, then A[1], ...
    foreach(I in 1..N) OrderM[I,I] = 0 end,     % not reflexive
    foreach (I in 2..N)
        OrderM[1,I] = 1,
        OrderM[I,1] = 0
    end,
    OrderM :: 0..1,
    foreach (I in 2..N, J in 2..N, I !== J)
        M[1,I] #=> OrderM[I,J],
        M[I,1] #=> OrderM[J,I],
        M[I,J] #=> OrderM[I,J],
        OrderM[I,J]+OrderM[J,I] #= 1,
        foreach (K in 2..N, K !== I, K !== J)   % transitive
            OrderM[I,K] #/\ OrderM[K,J] #=> OrderM[I,J]
        end
    end.
            
test_table_in =>
    Vars=[X1,X2,X3,X4,X5,X6,X7], 
    Words2=[{ord('I'),ord('N')},
            {ord('I'),ord('F')},
            {ord('A'),ord('S')},
            {ord('G'),ord('O')},
            {ord('T'),ord('O')}],
    Words3=[{ord('F'),ord('U'),ord('N')},
            {ord('T'),ord('A'),ord('D')},
            {ord('N'),ord('A'),ord('G')},
            {ord('S'),ord('A'),ord('G')}],
    table_in([{X1,X2},{X1,X3},{X5,X7},{X6,X7}], Words2),
    table_in([{X3,X4,X5},{X2,X4,X6}],Words3),
    Sols = solve_all(Vars).sort(),
    writeln(Sols),
    Sols = [[65,83,83,65,71,71,79],[73,78,78,65,71,71,79]].
    

test_diffn1 =>
    Vars=[X,Wx,Y,Wy], 
    Vars :: 1..4, 
    diffn([[X,Wx],[Y,Wy]]),
    Sols = solve_all(Vars).sort(),
    Sols = [[1,1,2,1],[1,1,2,2],[1,1,2,3],[1,1,2,4],[1,1,3,1],[1,1,3,2],[1,1,3,3],[1,1,3,4],[1,1,4,1],[1,1,4,2],[1,1,4,3],[1,1,4,4],[1,2,3,1],[1,2,3,2],[1,2,3,3],[1,2,3,4],[1,2,4,1],[1,2,4,2],[1,2,4,3],[1,2,4,4],[1,3,4,1],[1,3,4,2],[1,3,4,3],[1,3,4,4],[2,1,1,1],[2,1,3,1],[2,1,3,2],[2,1,3,3],[2,1,3,4],[2,1,4,1],[2,1,4,2],[2,1,4,3],[2,1,4,4],[2,2,1,1],[2,2,4,1],[2,2,4,2],[2,2,4,3],[2,2,4,4],[2,3,1,1],[2,4,1,1],[3,1,1,1],[3,1,1,2],[3,1,2,1],[3,1,4,1],[3,1,4,2],[3,1,4,3],[3,1,4,4],[3,2,1,1],[3,2,1,2],[3,2,2,1],[3,3,1,1],[3,3,1,2],[3,3,2,1],[3,4,1,1],[3,4,1,2],[3,4,2,1],[4,1,1,1],[4,1,1,2],[4,1,1,3],[4,1,2,1],[4,1,2,2],[4,1,3,1],[4,2,1,1],[4,2,1,2],[4,2,1,3],[4,2,2,1],[4,2,2,2],[4,2,3,1],[4,3,1,1],[4,3,1,2],[4,3,1,3],[4,3,2,1],[4,3,2,2],[4,3,3,1],[4,4,1,1],[4,4,1,2],[4,4,1,3],[4,4,2,1],[4,4,2,2],[4,4,3,1]].
    
test_diffn2 =>
    Vars=[X1,Y1,X2,Y2],
    Vars :: 1..4,
    diffn([[X1,Y1,3,3],[X2,Y2,1,1]]),
    Sols = solve_all(Vars).sort(),
    Sols = [[1,1,1,4],[1,1,2,4],[1,1,3,4],[1,1,4,1],[1,1,4,2],[1,1,4,3],[1,1,4,4],[1,2,1,1],[1,2,2,1],[1,2,3,1],[1,2,4,1],[1,2,4,2],[1,2,4,3],[1,2,4,4],[1,3,1,1],[1,3,1,2],[1,3,2,1],[1,3,2,2],[1,3,3,1],[1,3,3,2],[1,3,4,1],[1,3,4,2],[1,3,4,3],[1,3,4,4],[1,4,1,1],[1,4,1,2],[1,4,1,3],[1,4,2,1],[1,4,2,2],[1,4,2,3],[1,4,3,1],[1,4,3,2],[1,4,3,3],[1,4,4,1],[1,4,4,2],[1,4,4,3],[1,4,4,4],[2,1,1,1],[2,1,1,2],[2,1,1,3],[2,1,1,4],[2,1,2,4],[2,1,3,4],[2,1,4,4],[2,2,1,1],[2,2,1,2],[2,2,1,3],[2,2,1,4],[2,2,2,1],[2,2,3,1],[2,2,4,1],[2,3,1,1],[2,3,1,2],[2,3,1,3],[2,3,1,4],[2,3,2,1],[2,3,2,2],[2,3,3,1],[2,3,3,2],[2,3,4,1],[2,3,4,2],[2,4,1,1],[2,4,1,2],[2,4,1,3],[2,4,1,4],[2,4,2,1],[2,4,2,2],[2,4,2,3],[2,4,3,1],[2,4,3,2],[2,4,3,3],[2,4,4,1],[2,4,4,2],[2,4,4,3],[3,1,1,1],[3,1,1,2],[3,1,1,3],[3,1,1,4],[3,1,2,1],[3,1,2,2],[3,1,2,3],[3,1,2,4],[3,1,3,4],[3,1,4,4],[3,2,1,1],[3,2,1,2],[3,2,1,3],[3,2,1,4],[3,2,2,1],[3,2,2,2],[3,2,2,3],[3,2,2,4],[3,2,3,1],[3,2,4,1],[3,3,1,1],[3,3,1,2],[3,3,1,3],[3,3,1,4],[3,3,2,1],[3,3,2,2],[3,3,2,3],[3,3,2,4],[3,3,3,1],[3,3,3,2],[3,3,4,1],[3,3,4,2],[3,4,1,1],[3,4,1,2],[3,4,1,3],[3,4,1,4],[3,4,2,1],[3,4,2,2],[3,4,2,3],[3,4,2,4],[3,4,3,1],[3,4,3,2],[3,4,3,3],[3,4,4,1],[3,4,4,2],[3,4,4,3],[4,1,1,1],[4,1,1,2],[4,1,1,3],[4,1,1,4],[4,1,2,1],[4,1,2,2],[4,1,2,3],[4,1,2,4],[4,1,3,1],[4,1,3,2],[4,1,3,3],[4,1,3,4],[4,1,4,4],[4,2,1,1],[4,2,1,2],[4,2,1,3],[4,2,1,4],[4,2,2,1],[4,2,2,2],[4,2,2,3],[4,2,2,4],[4,2,3,1],[4,2,3,2],[4,2,3,3],[4,2,3,4],[4,2,4,1],[4,3,1,1],[4,3,1,2],[4,3,1,3],[4,3,1,4],[4,3,2,1],[4,3,2,2],[4,3,2,3],[4,3,2,4],[4,3,3,1],[4,3,3,2],[4,3,3,3],[4,3,3,4],[4,3,4,1],[4,3,4,2],[4,4,1,1],[4,4,1,2],[4,4,1,3],[4,4,1,4],[4,4,2,1],[4,4,2,2],[4,4,2,3],[4,4,2,4],[4,4,3,1],[4,4,3,2],[4,4,3,3],[4,4,3,4],[4,4,4,1],[4,4,4,2],[4,4,4,3]].

test_element1 =>
    [I1,I2,I3,X1,X2,X3,V1,V2,V3] :: 1..3,
    element(I1,[X1,X2,X3],V1),
    element(I2,[X1,X2,X3],V2),
    element(I3,[X1,X2,X3],V3),
    all_different([X1,X2,X3]),
    all_different([V1,V2,V3]),
    Sols = solve_all([I1,I2,I3,V1,V2,V3]).sort(),
    Sols = [[1,2,3,1,2,3],[1,2,3,1,3,2],[1,2,3,2,1,3],[1,2,3,2,3,1],[1,2,3,3,1,2],[1,2,3,3,2,1],[1,3,2,1,2,3],[1,3,2,1,3,2],[1,3,2,2,1,3],[1,3,2,2,3,1],[1,3,2,3,1,2],[1,3,2,3,2,1],[2,1,3,1,2,3],[2,1,3,1,3,2],[2,1,3,2,1,3],[2,1,3,2,3,1],[2,1,3,3,1,2],[2,1,3,3,2,1],[2,3,1,1,2,3],[2,3,1,1,3,2],[2,3,1,2,1,3],[2,3,1,2,3,1],[2,3,1,3,1,2],[2,3,1,3,2,1],[3,1,2,1,2,3],[3,1,2,1,3,2],[3,1,2,2,1,3],[3,1,2,2,3,1],[3,1,2,3,1,2],[3,1,2,3,2,1],[3,2,1,1,2,3],[3,2,1,1,3,2],[3,2,1,2,1,3],[3,2,1,2,3,1],[3,2,1,3,1,2],[3,2,1,3,2,1]].

test_element2 =>
    [I1,I2,I3,X1,X2,X3,V1,V2,V3] :: 1..3,
    element(I1,[X1,X2,X3],V1),
    element(I2,[X1,X2,X3],V2),
    element(I3,[X1,X2,X3],V3),
    all_different([X1,X2,X3]),
    all_different([V1,V2,V3]),
    Sols = solve_all([V1,V2,V3,I1,I2,I3]).sort(),
    Sols = [[1,2,3,1,2,3],[1,2,3,1,3,2],[1,2,3,2,1,3],[1,2,3,2,3,1],[1,2,3,3,1,2],[1,2,3,3,2,1],[1,3,2,1,2,3],[1,3,2,1,3,2],[1,3,2,2,1,3],[1,3,2,2,3,1],[1,3,2,3,1,2],[1,3,2,3,2,1],[2,1,3,1,2,3],[2,1,3,1,3,2],[2,1,3,2,1,3],[2,1,3,2,3,1],[2,1,3,3,1,2],[2,1,3,3,2,1],[2,3,1,1,2,3],[2,3,1,1,3,2],[2,3,1,2,1,3],[2,3,1,2,3,1],[2,3,1,3,1,2],[2,3,1,3,2,1],[3,1,2,1,2,3],[3,1,2,1,3,2],[3,1,2,2,1,3],[3,1,2,2,3,1],[3,1,2,3,1,2],[3,1,2,3,2,1],[3,2,1,1,2,3],[3,2,1,1,3,2],[3,2,1,2,1,3],[3,2,1,2,3,1],[3,2,1,3,1,2],[3,2,1,3,2,1]].

test_notin1 =>
    X :: -10..10,
    X notin [-1,-2,-3],
    Sols = solve_all(X).sort(),
    Sols = [-10,-9,-8,-7,-6,-5,-4,0,1,2,3,4,5,6,7,8,9,10].

test_notin2 =>
    X :: 0..10,
    B #<=> X notin [-1,-2,-3,1,2,3],
    Sols = solve_all((B,X)).sort(),
    Sols = [(0,1),(0,2),(0,3),(1,0),(1,4),(1,5),(1,6),(1,7),(1,8),(1,9),(1,10)].
    
test_notin3 =>
    X :: -10..-1,
    B #<=> X notin [-1,-2,-3,1,2,3],
    Sols = solve_all((B,X)).sort(),
    Sols = [(0,-3),(0,-2),(0,-1),(1,-10),(1,-9),(1,-8),(1,-7),(1,-6),(1,-5),(1,-4)].

test_pb1 =>
    Bs = [B1,B2,B3,B4,B5],
    Bs :: 0..1,
    1*B1+2*B2+3*B3+4*B4+5*B5 #= 10,
    Sols = solve_all(Bs).sort(),
    Sols = [[0,1,1,0,1],[1,0,0,1,1],[1,1,1,1,0]].

test_pb2 =>
    Bs = [X1,X2,X3,X4],
    Bs :: 0..1,
    40001*X1 + 30002*X2 + 20003*X3 + 10005*X4 #=< 50002,
    Sols = solve_all(Bs).sort(),
    Sols = [[0,0,0,0],[0,0,0,1],[0,0,1,0],[0,0,1,1],[0,1,0,0],[0,1,0,1],[1,0,0,0]].
    
test_pb3 =>
    Bs = [X1,X2,X3,X4,X5],
    Bs :: 0..1,      
    -2*X1-2*X2-1*X3+1*X4+1*X5 #>= -3,
    Sols = solve_all(Bs).sort(),
    Sols = [[0,0,0,0,0],[0,0,0,0,1],[0,0,0,1,0],[0,0,0,1,1],[0,0,1,0,0],[0,0,1,0,1],[0,0,1,1,0],[0,0,1,1,1],[0,1,0,0,0],[0,1,0,0,1],[0,1,0,1,0],[0,1,0,1,1],[0,1,1,0,0],[0,1,1,0,1],[0,1,1,1,0],[0,1,1,1,1],[1,0,0,0,0],[1,0,0,0,1],[1,0,0,1,0],[1,0,0,1,1],[1,0,1,0,0],[1,0,1,0,1],[1,0,1,1,0],[1,0,1,1,1],[1,1,0,0,1],[1,1,0,1,0],[1,1,0,1,1],[1,1,1,1,1]].
    
test_pb4 =>
    Bs = [X1,X2,X3,X4,X5],
    Bs :: 0..1,      
    -1*X1-1*X2+1*X3+1*X4+1*X5 #>= -1,
    Sols = solve_all(Bs).sort(),
    Sols = [[0,0,0,0,0],[0,0,0,0,1],[0,0,0,1,0],[0,0,0,1,1],[0,0,1,0,0],[0,0,1,0,1],[0,0,1,1,0],[0,0,1,1,1],[0,1,0,0,0],[0,1,0,0,1],[0,1,0,1,0],[0,1,0,1,1],[0,1,1,0,0],[0,1,1,0,1],[0,1,1,1,0],[0,1,1,1,1],[1,0,0,0,0],[1,0,0,0,1],[1,0,0,1,0],[1,0,0,1,1],[1,0,1,0,0],[1,0,1,0,1],[1,0,1,1,0],[1,0,1,1,1],[1,1,0,0,1],[1,1,0,1,0],[1,1,0,1,1],[1,1,1,0,0],[1,1,1,0,1],[1,1,1,1,0],[1,1,1,1,1]].


test_pb5 =>
    Bs = [X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11],
    Bs :: 0..1,      
    1*X1+1*X2+1*X3+1*X4+1*X5+X6+X7+X8+X9+X10+X11 #= 1,
    Sols = solve_all(Bs).sort(),
    Sols = [[0,0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0]].

test_pb6 =>
    Bs = [X1,X2,X3,X4,X5],
    Bs :: 0..1,      
    -2*X1+2*X2+1*X3-1*X4-1*X5 #>= -2,
    Sols = solve_all(Bs).sort(),
    Sols = [[0,0,0,0,0],[0,0,0,0,1],[0,0,0,1,0],[0,0,0,1,1],[0,0,1,0,0],[0,0,1,0,1],[0,0,1,1,0],[0,0,1,1,1],[0,1,0,0,0],[0,1,0,0,1],[0,1,0,1,0],[0,1,0,1,1],[0,1,1,0,0],[0,1,1,0,1],[0,1,1,1,0],[0,1,1,1,1],[1,0,0,0,0],[1,0,1,0,0],[1,0,1,0,1],[1,0,1,1,0],[1,1,0,0,0],[1,1,0,0,1],[1,1,0,1,0],[1,1,0,1,1],[1,1,1,0,0],[1,1,1,0,1],[1,1,1,1,0],[1,1,1,1,1]].

test_pb7 =>
    Bs = [X1,X2,X3,X4,X5],
    Bs :: 0..1,      
    X1+X2+X3+X4-X5 #>= 0,
    Sols = solve_all(Bs).sort(),
    Sols = [[0,0,0,0,0],[0,0,0,1,0],[0,0,0,1,1],[0,0,1,0,0],[0,0,1,0,1],[0,0,1,1,0],[0,0,1,1,1],[0,1,0,0,0],[0,1,0,0,1],[0,1,0,1,0],[0,1,0,1,1],[0,1,1,0,0],[0,1,1,0,1],[0,1,1,1,0],[0,1,1,1,1],[1,0,0,0,0],[1,0,0,0,1],[1,0,0,1,0],[1,0,0,1,1],[1,0,1,0,0],[1,0,1,0,1],[1,0,1,1,0],[1,0,1,1,1],[1,1,0,0,0],[1,1,0,0,1],[1,1,0,1,0],[1,1,0,1,1],[1,1,1,0,0],[1,1,1,0,1],[1,1,1,1,0],[1,1,1,1,1]].

test_pb8 =>
    Bs = [X1,X2,X3,X4,X5],
    Bs  :: 0..1,      
    X5 #=> X1+X2+X3+X4 #>= 1,
    Sols = solve_all(Bs).sort(),
    Sols = [[0,0,0,0,0],[0,0,0,1,0],[0,0,0,1,1],[0,0,1,0,0],[0,0,1,0,1],[0,0,1,1,0],[0,0,1,1,1],[0,1,0,0,0],[0,1,0,0,1],[0,1,0,1,0],[0,1,0,1,1],[0,1,1,0,0],[0,1,1,0,1],[0,1,1,1,0],[0,1,1,1,1],[1,0,0,0,0],[1,0,0,0,1],[1,0,0,1,0],[1,0,0,1,1],[1,0,1,0,0],[1,0,1,0,1],[1,0,1,1,0],[1,0,1,1,1],[1,1,0,0,0],[1,1,0,0,1],[1,1,0,1,0],[1,1,0,1,1],[1,1,1,0,0],[1,1,1,0,1],[1,1,1,1,0],[1,1,1,1,1]].

test_pb9 =>
    Bs = [X1,X2,X3,X4,X5],
    Bs :: 0..1,      
    X1+X2+X3+X4+X5 #>= 3,
    Sols = solve_all(Bs).sort(),
    Sols = [[0,0,1,1,1],[0,1,0,1,1],[0,1,1,0,1],[0,1,1,1,0],[0,1,1,1,1],[1,0,0,1,1],[1,0,1,0,1],[1,0,1,1,0],[1,0,1,1,1],[1,1,0,0,1],[1,1,0,1,0],[1,1,0,1,1],[1,1,1,0,0],[1,1,1,0,1],[1,1,1,1,0],[1,1,1,1,1]].

test_pb10 =>
    Bs = [X1,X2,X3],
    Bs :: 0..1,      
    X1+X2-X3 #>= 2,
    Sols = solve_all(Bs).sort(),
    Sols = [[1,1,0]].

test_pb11 =>
    Bs = [X1,X2,X3],
    Bs :: 0..1,      
    -X1-X2+X3 #=< 2,
    Sols = solve_all(Bs).sort(),
    Sols = [[0,0,0],[0,0,1],[0,1,0],[0,1,1],[1,0,0],[1,0,1],[1,1,0],[1,1,1]].

test_pb12 =>
    Bs = [X1,X2],
    Bs :: 0..1,      
    -1*X1-1*X2 #>= -1,
    Sols = solve_all(Bs).sort(),
    Sols = [[0,0],[0,1],[1,0]].

test_pb13 =>
    Bs = [X1,X2] ,
    Bs :: 0..1,      
    -1*X1+1*X2 #>= 0,
    Sols = solve_all(Bs).sort(),
    Sols = [[0,0],[0,1],[1,1]].

test_pb14 =>
    Vars = [X1,X2,X3,X4,Y1,Y2,Y3],
    Vars :: 0..1,
    4*X1+4*X2+4*X3+4*X4+2*Y1+Y2+Y3 #>= 4,
    Sols = solve_all(Vars).sort(),
    Sols = [[0,0,0,0,1,1,1],[0,0,0,1,0,0,0],[0,0,0,1,0,0,1],[0,0,0,1,0,1,0],[0,0,0,1,0,1,1],[0,0,0,1,1,0,0],[0,0,0,1,1,0,1],[0,0,0,1,1,1,0],[0,0,0,1,1,1,1],[0,0,1,0,0,0,0],[0,0,1,0,0,0,1],[0,0,1,0,0,1,0],[0,0,1,0,0,1,1],[0,0,1,0,1,0,0],[0,0,1,0,1,0,1],[0,0,1,0,1,1,0],[0,0,1,0,1,1,1],[0,0,1,1,0,0,0],[0,0,1,1,0,0,1],[0,0,1,1,0,1,0],[0,0,1,1,0,1,1],[0,0,1,1,1,0,0],[0,0,1,1,1,0,1],[0,0,1,1,1,1,0],[0,0,1,1,1,1,1],[0,1,0,0,0,0,0],[0,1,0,0,0,0,1],[0,1,0,0,0,1,0],[0,1,0,0,0,1,1],[0,1,0,0,1,0,0],[0,1,0,0,1,0,1],[0,1,0,0,1,1,0],[0,1,0,0,1,1,1],[0,1,0,1,0,0,0],[0,1,0,1,0,0,1],[0,1,0,1,0,1,0],[0,1,0,1,0,1,1],[0,1,0,1,1,0,0],[0,1,0,1,1,0,1],[0,1,0,1,1,1,0],[0,1,0,1,1,1,1],[0,1,1,0,0,0,0],[0,1,1,0,0,0,1],[0,1,1,0,0,1,0],[0,1,1,0,0,1,1],[0,1,1,0,1,0,0],[0,1,1,0,1,0,1],[0,1,1,0,1,1,0],[0,1,1,0,1,1,1],[0,1,1,1,0,0,0],[0,1,1,1,0,0,1],[0,1,1,1,0,1,0],[0,1,1,1,0,1,1],[0,1,1,1,1,0,0],[0,1,1,1,1,0,1],[0,1,1,1,1,1,0],[0,1,1,1,1,1,1],[1,0,0,0,0,0,0],[1,0,0,0,0,0,1],[1,0,0,0,0,1,0],[1,0,0,0,0,1,1],[1,0,0,0,1,0,0],[1,0,0,0,1,0,1],[1,0,0,0,1,1,0],[1,0,0,0,1,1,1],[1,0,0,1,0,0,0],[1,0,0,1,0,0,1],[1,0,0,1,0,1,0],[1,0,0,1,0,1,1],[1,0,0,1,1,0,0],[1,0,0,1,1,0,1],[1,0,0,1,1,1,0],[1,0,0,1,1,1,1],[1,0,1,0,0,0,0],[1,0,1,0,0,0,1],[1,0,1,0,0,1,0],[1,0,1,0,0,1,1],[1,0,1,0,1,0,0],[1,0,1,0,1,0,1],[1,0,1,0,1,1,0],[1,0,1,0,1,1,1],[1,0,1,1,0,0,0],[1,0,1,1,0,0,1],[1,0,1,1,0,1,0],[1,0,1,1,0,1,1],[1,0,1,1,1,0,0],[1,0,1,1,1,0,1],[1,0,1,1,1,1,0],[1,0,1,1,1,1,1],[1,1,0,0,0,0,0],[1,1,0,0,0,0,1],[1,1,0,0,0,1,0],[1,1,0,0,0,1,1],[1,1,0,0,1,0,0],[1,1,0,0,1,0,1],[1,1,0,0,1,1,0],[1,1,0,0,1,1,1],[1,1,0,1,0,0,0],[1,1,0,1,0,0,1],[1,1,0,1,0,1,0],[1,1,0,1,0,1,1],[1,1,0,1,1,0,0],[1,1,0,1,1,0,1],[1,1,0,1,1,1,0],[1,1,0,1,1,1,1],[1,1,1,0,0,0,0],[1,1,1,0,0,0,1],[1,1,1,0,0,1,0],[1,1,1,0,0,1,1],[1,1,1,0,1,0,0],[1,1,1,0,1,0,1],[1,1,1,0,1,1,0],[1,1,1,0,1,1,1],[1,1,1,1,0,0,0],[1,1,1,1,0,0,1],[1,1,1,1,0,1,0],[1,1,1,1,0,1,1],[1,1,1,1,1,0,0],[1,1,1,1,1,0,1],[1,1,1,1,1,1,0],[1,1,1,1,1,1,1]].

test_pb15 =>
    Vars = [X1,X2,X3,X4,Y1,Y2,Y3],
    Vars :: 0..1,
    Z :: 0..1,
    X1+X2+X3+X4 #>= Z,
    2*Y1+Y2+Y3+4*Z #>= 4,
    Sols = solve_all(Vars).sort(),
    Sols = [[0,0,0,0,1,1,1],[0,0,0,1,0,0,0],[0,0,0,1,0,0,1],[0,0,0,1,0,1,0],[0,0,0,1,0,1,1],[0,0,0,1,1,0,0],[0,0,0,1,1,0,1],[0,0,0,1,1,1,0],[0,0,0,1,1,1,1],[0,0,1,0,0,0,0],[0,0,1,0,0,0,1],[0,0,1,0,0,1,0],[0,0,1,0,0,1,1],[0,0,1,0,1,0,0],[0,0,1,0,1,0,1],[0,0,1,0,1,1,0],[0,0,1,0,1,1,1],[0,0,1,1,0,0,0],[0,0,1,1,0,0,1],[0,0,1,1,0,1,0],[0,0,1,1,0,1,1],[0,0,1,1,1,0,0],[0,0,1,1,1,0,1],[0,0,1,1,1,1,0],[0,0,1,1,1,1,1],[0,1,0,0,0,0,0],[0,1,0,0,0,0,1],[0,1,0,0,0,1,0],[0,1,0,0,0,1,1],[0,1,0,0,1,0,0],[0,1,0,0,1,0,1],[0,1,0,0,1,1,0],[0,1,0,0,1,1,1],[0,1,0,1,0,0,0],[0,1,0,1,0,0,1],[0,1,0,1,0,1,0],[0,1,0,1,0,1,1],[0,1,0,1,1,0,0],[0,1,0,1,1,0,1],[0,1,0,1,1,1,0],[0,1,0,1,1,1,1],[0,1,1,0,0,0,0],[0,1,1,0,0,0,1],[0,1,1,0,0,1,0],[0,1,1,0,0,1,1],[0,1,1,0,1,0,0],[0,1,1,0,1,0,1],[0,1,1,0,1,1,0],[0,1,1,0,1,1,1],[0,1,1,1,0,0,0],[0,1,1,1,0,0,1],[0,1,1,1,0,1,0],[0,1,1,1,0,1,1],[0,1,1,1,1,0,0],[0,1,1,1,1,0,1],[0,1,1,1,1,1,0],[0,1,1,1,1,1,1],[1,0,0,0,0,0,0],[1,0,0,0,0,0,1],[1,0,0,0,0,1,0],[1,0,0,0,0,1,1],[1,0,0,0,1,0,0],[1,0,0,0,1,0,1],[1,0,0,0,1,1,0],[1,0,0,0,1,1,1],[1,0,0,1,0,0,0],[1,0,0,1,0,0,1],[1,0,0,1,0,1,0],[1,0,0,1,0,1,1],[1,0,0,1,1,0,0],[1,0,0,1,1,0,1],[1,0,0,1,1,1,0],[1,0,0,1,1,1,1],[1,0,1,0,0,0,0],[1,0,1,0,0,0,1],[1,0,1,0,0,1,0],[1,0,1,0,0,1,1],[1,0,1,0,1,0,0],[1,0,1,0,1,0,1],[1,0,1,0,1,1,0],[1,0,1,0,1,1,1],[1,0,1,1,0,0,0],[1,0,1,1,0,0,1],[1,0,1,1,0,1,0],[1,0,1,1,0,1,1],[1,0,1,1,1,0,0],[1,0,1,1,1,0,1],[1,0,1,1,1,1,0],[1,0,1,1,1,1,1],[1,1,0,0,0,0,0],[1,1,0,0,0,0,1],[1,1,0,0,0,1,0],[1,1,0,0,0,1,1],[1,1,0,0,1,0,0],[1,1,0,0,1,0,1],[1,1,0,0,1,1,0],[1,1,0,0,1,1,1],[1,1,0,1,0,0,0],[1,1,0,1,0,0,1],[1,1,0,1,0,1,0],[1,1,0,1,0,1,1],[1,1,0,1,1,0,0],[1,1,0,1,1,0,1],[1,1,0,1,1,1,0],[1,1,0,1,1,1,1],[1,1,1,0,0,0,0],[1,1,1,0,0,0,1],[1,1,1,0,0,1,0],[1,1,1,0,0,1,1],[1,1,1,0,1,0,0],[1,1,1,0,1,0,1],[1,1,1,0,1,1,0],[1,1,1,0,1,1,1],[1,1,1,1,0,0,0],[1,1,1,1,0,0,1],[1,1,1,1,0,1,0],[1,1,1,1,0,1,1],[1,1,1,1,1,0,0],[1,1,1,1,1,0,1],[1,1,1,1,1,1,0],[1,1,1,1,1,1,1]].

test_tree1 =>
    A = {{_,_},{_,_}},
    my_tree_grid(A),
    Sols = solve_all(A).sort(),
    Sols = [{{0,0},{0,0}},{{0,0},{0,1}},{{0,0},{1,0}},{{0,0},{1,1}},{{0,1},{0,0}},{{0,1},{0,1}},{{0,1},{1,1}},{{1,0},{0,0}},{{1,0},{1,0}},{{1,0},{1,1}},{{1,1},{0,0}},{{1,1},{0,1}},{{1,1},{1,0}},{{1,1},{1,1}}].

test_tree2 =>
    N = 6,                                   % find all Hamilton cycles in the 
    L = new_list(N),
    L :: 1..N,
    my_tree1(L),
    Sols = solve_all(L).sort(),
    Sols = [[2,3,4,5,6,1],[2,3,4,5,6,2],[2,3,4,5,6,3],[2,3,4,5,6,4],[2,3,4,5,6,5],[2,3,4,5,6,6],[2,3,4,6,6,1],[2,3,4,6,6,2],[2,3,4,6,6,3],[2,3,4,6,6,4],[2,3,4,6,6,5],[2,3,4,6,6,6],[2,3,5,5,6,1],[2,3,5,5,6,2],[2,3,5,5,6,3],[2,3,5,5,6,4],[2,3,5,5,6,5],[2,3,5,5,6,6],[2,3,5,6,6,1],[2,3,5,6,6,2],[2,3,5,6,6,3],[2,3,5,6,6,4],[2,3,5,6,6,5],[2,3,5,6,6,6],[2,3,6,5,6,1],[2,3,6,5,6,2],[2,3,6,5,6,3],[2,3,6,5,6,4],[2,3,6,5,6,5],[2,3,6,5,6,6],[2,3,6,6,6,1],[2,3,6,6,6,2],[2,3,6,6,6,3],[2,3,6,6,6,4],[2,3,6,6,6,5],[2,3,6,6,6,6],[2,4,4,5,6,1],[2,4,4,5,6,2],[2,4,4,5,6,3],[2,4,4,5,6,4],[2,4,4,5,6,5],[2,4,4,5,6,6],[2,4,4,6,6,1],[2,4,4,6,6,2],[2,4,4,6,6,3],[2,4,4,6,6,4],[2,4,4,6,6,5],[2,4,4,6,6,6],[2,4,5,5,6,1],[2,4,5,5,6,2],[2,4,5,5,6,3],[2,4,5,5,6,4],[2,4,5,5,6,5],[2,4,5,5,6,6],[2,4,5,6,6,1],[2,4,5,6,6,2],[2,4,5,6,6,3],[2,4,5,6,6,4],[2,4,5,6,6,5],[2,4,5,6,6,6],[2,4,6,5,6,1],[2,4,6,5,6,2],[2,4,6,5,6,3],[2,4,6,5,6,4],[2,4,6,5,6,5],[2,4,6,5,6,6],[2,4,6,6,6,1],[2,4,6,6,6,2],[2,4,6,6,6,3],[2,4,6,6,6,4],[2,4,6,6,6,5],[2,4,6,6,6,6],[2,5,4,5,6,1],[2,5,4,5,6,2],[2,5,4,5,6,3],[2,5,4,5,6,4],[2,5,4,5,6,5],[2,5,4,5,6,6],[2,5,4,6,6,1],[2,5,4,6,6,2],[2,5,4,6,6,3],[2,5,4,6,6,4],[2,5,4,6,6,5],[2,5,4,6,6,6],[2,5,5,5,6,1],[2,5,5,5,6,2],[2,5,5,5,6,3],[2,5,5,5,6,4],[2,5,5,5,6,5],[2,5,5,5,6,6],[2,5,5,6,6,1],[2,5,5,6,6,2],[2,5,5,6,6,3],[2,5,5,6,6,4],[2,5,5,6,6,5],[2,5,5,6,6,6],[2,5,6,5,6,1],[2,5,6,5,6,2],[2,5,6,5,6,3],[2,5,6,5,6,4],[2,5,6,5,6,5],[2,5,6,5,6,6],[2,5,6,6,6,1],[2,5,6,6,6,2],[2,5,6,6,6,3],[2,5,6,6,6,4],[2,5,6,6,6,5],[2,5,6,6,6,6],[2,6,4,5,6,1],[2,6,4,5,6,2],[2,6,4,5,6,3],[2,6,4,5,6,4],[2,6,4,5,6,5],[2,6,4,5,6,6],[2,6,4,6,6,1],[2,6,4,6,6,2],[2,6,4,6,6,3],[2,6,4,6,6,4],[2,6,4,6,6,5],[2,6,4,6,6,6],[2,6,5,5,6,1],[2,6,5,5,6,2],[2,6,5,5,6,3],[2,6,5,5,6,4],[2,6,5,5,6,5],[2,6,5,5,6,6],[2,6,5,6,6,1],[2,6,5,6,6,2],[2,6,5,6,6,3],[2,6,5,6,6,4],[2,6,5,6,6,5],[2,6,5,6,6,6],[2,6,6,5,6,1],[2,6,6,5,6,2],[2,6,6,5,6,3],[2,6,6,5,6,4],[2,6,6,5,6,5],[2,6,6,5,6,6],[2,6,6,6,6,1],[2,6,6,6,6,2],[2,6,6,6,6,3],[2,6,6,6,6,4],[2,6,6,6,6,5],[2,6,6,6,6,6],[3,3,4,5,6,1],[3,3,4,5,6,2],[3,3,4,5,6,3],[3,3,4,5,6,4],[3,3,4,5,6,5],[3,3,4,5,6,6],[3,3,4,6,6,1],[3,3,4,6,6,2],[3,3,4,6,6,3],[3,3,4,6,6,4],[3,3,4,6,6,5],[3,3,4,6,6,6],[3,3,5,5,6,1],[3,3,5,5,6,2],[3,3,5,5,6,3],[3,3,5,5,6,4],[3,3,5,5,6,5],[3,3,5,5,6,6],[3,3,5,6,6,1],[3,3,5,6,6,2],[3,3,5,6,6,3],[3,3,5,6,6,4],[3,3,5,6,6,5],[3,3,5,6,6,6],[3,3,6,5,6,1],[3,3,6,5,6,2],[3,3,6,5,6,3],[3,3,6,5,6,4],[3,3,6,5,6,5],[3,3,6,5,6,6],[3,3,6,6,6,1],[3,3,6,6,6,2],[3,3,6,6,6,3],[3,3,6,6,6,4],[3,3,6,6,6,5],[3,3,6,6,6,6],[3,4,4,5,6,1],[3,4,4,5,6,2],[3,4,4,5,6,3],[3,4,4,5,6,4],[3,4,4,5,6,5],[3,4,4,5,6,6],[3,4,4,6,6,1],[3,4,4,6,6,2],[3,4,4,6,6,3],[3,4,4,6,6,4],[3,4,4,6,6,5],[3,4,4,6,6,6],[3,4,5,5,6,1],[3,4,5,5,6,2],[3,4,5,5,6,3],[3,4,5,5,6,4],[3,4,5,5,6,5],[3,4,5,5,6,6],[3,4,5,6,6,1],[3,4,5,6,6,2],[3,4,5,6,6,3],[3,4,5,6,6,4],[3,4,5,6,6,5],[3,4,5,6,6,6],[3,4,6,5,6,1],[3,4,6,5,6,2],[3,4,6,5,6,3],[3,4,6,5,6,4],[3,4,6,5,6,5],[3,4,6,5,6,6],[3,4,6,6,6,1],[3,4,6,6,6,2],[3,4,6,6,6,3],[3,4,6,6,6,4],[3,4,6,6,6,5],[3,4,6,6,6,6],[3,5,4,5,6,1],[3,5,4,5,6,2],[3,5,4,5,6,3],[3,5,4,5,6,4],[3,5,4,5,6,5],[3,5,4,5,6,6],[3,5,4,6,6,1],[3,5,4,6,6,2],[3,5,4,6,6,3],[3,5,4,6,6,4],[3,5,4,6,6,5],[3,5,4,6,6,6],[3,5,5,5,6,1],[3,5,5,5,6,2],[3,5,5,5,6,3],[3,5,5,5,6,4],[3,5,5,5,6,5],[3,5,5,5,6,6],[3,5,5,6,6,1],[3,5,5,6,6,2],[3,5,5,6,6,3],[3,5,5,6,6,4],[3,5,5,6,6,5],[3,5,5,6,6,6],[3,5,6,5,6,1],[3,5,6,5,6,2],[3,5,6,5,6,3],[3,5,6,5,6,4],[3,5,6,5,6,5],[3,5,6,5,6,6],[3,5,6,6,6,1],[3,5,6,6,6,2],[3,5,6,6,6,3],[3,5,6,6,6,4],[3,5,6,6,6,5],[3,5,6,6,6,6],[3,6,4,5,6,1],[3,6,4,5,6,2],[3,6,4,5,6,3],[3,6,4,5,6,4],[3,6,4,5,6,5],[3,6,4,5,6,6],[3,6,4,6,6,1],[3,6,4,6,6,2],[3,6,4,6,6,3],[3,6,4,6,6,4],[3,6,4,6,6,5],[3,6,4,6,6,6],[3,6,5,5,6,1],[3,6,5,5,6,2],[3,6,5,5,6,3],[3,6,5,5,6,4],[3,6,5,5,6,5],[3,6,5,5,6,6],[3,6,5,6,6,1],[3,6,5,6,6,2],[3,6,5,6,6,3],[3,6,5,6,6,4],[3,6,5,6,6,5],[3,6,5,6,6,6],[3,6,6,5,6,1],[3,6,6,5,6,2],[3,6,6,5,6,3],[3,6,6,5,6,4],[3,6,6,5,6,5],[3,6,6,5,6,6],[3,6,6,6,6,1],[3,6,6,6,6,2],[3,6,6,6,6,3],[3,6,6,6,6,4],[3,6,6,6,6,5],[3,6,6,6,6,6],[4,3,4,5,6,1],[4,3,4,5,6,2],[4,3,4,5,6,3],[4,3,4,5,6,4],[4,3,4,5,6,5],[4,3,4,5,6,6],[4,3,4,6,6,1],[4,3,4,6,6,2],[4,3,4,6,6,3],[4,3,4,6,6,4],[4,3,4,6,6,5],[4,3,4,6,6,6],[4,3,5,5,6,1],[4,3,5,5,6,2],[4,3,5,5,6,3],[4,3,5,5,6,4],[4,3,5,5,6,5],[4,3,5,5,6,6],[4,3,5,6,6,1],[4,3,5,6,6,2],[4,3,5,6,6,3],[4,3,5,6,6,4],[4,3,5,6,6,5],[4,3,5,6,6,6],[4,3,6,5,6,1],[4,3,6,5,6,2],[4,3,6,5,6,3],[4,3,6,5,6,4],[4,3,6,5,6,5],[4,3,6,5,6,6],[4,3,6,6,6,1],[4,3,6,6,6,2],[4,3,6,6,6,3],[4,3,6,6,6,4],[4,3,6,6,6,5],[4,3,6,6,6,6],[4,4,4,5,6,1],[4,4,4,5,6,2],[4,4,4,5,6,3],[4,4,4,5,6,4],[4,4,4,5,6,5],[4,4,4,5,6,6],[4,4,4,6,6,1],[4,4,4,6,6,2],[4,4,4,6,6,3],[4,4,4,6,6,4],[4,4,4,6,6,5],[4,4,4,6,6,6],[4,4,5,5,6,1],[4,4,5,5,6,2],[4,4,5,5,6,3],[4,4,5,5,6,4],[4,4,5,5,6,5],[4,4,5,5,6,6],[4,4,5,6,6,1],[4,4,5,6,6,2],[4,4,5,6,6,3],[4,4,5,6,6,4],[4,4,5,6,6,5],[4,4,5,6,6,6],[4,4,6,5,6,1],[4,4,6,5,6,2],[4,4,6,5,6,3],[4,4,6,5,6,4],[4,4,6,5,6,5],[4,4,6,5,6,6],[4,4,6,6,6,1],[4,4,6,6,6,2],[4,4,6,6,6,3],[4,4,6,6,6,4],[4,4,6,6,6,5],[4,4,6,6,6,6],[4,5,4,5,6,1],[4,5,4,5,6,2],[4,5,4,5,6,3],[4,5,4,5,6,4],[4,5,4,5,6,5],[4,5,4,5,6,6],[4,5,4,6,6,1],[4,5,4,6,6,2],[4,5,4,6,6,3],[4,5,4,6,6,4],[4,5,4,6,6,5],[4,5,4,6,6,6],[4,5,5,5,6,1],[4,5,5,5,6,2],[4,5,5,5,6,3],[4,5,5,5,6,4],[4,5,5,5,6,5],[4,5,5,5,6,6],[4,5,5,6,6,1],[4,5,5,6,6,2],[4,5,5,6,6,3],[4,5,5,6,6,4],[4,5,5,6,6,5],[4,5,5,6,6,6],[4,5,6,5,6,1],[4,5,6,5,6,2],[4,5,6,5,6,3],[4,5,6,5,6,4],[4,5,6,5,6,5],[4,5,6,5,6,6],[4,5,6,6,6,1],[4,5,6,6,6,2],[4,5,6,6,6,3],[4,5,6,6,6,4],[4,5,6,6,6,5],[4,5,6,6,6,6],[4,6,4,5,6,1],[4,6,4,5,6,2],[4,6,4,5,6,3],[4,6,4,5,6,4],[4,6,4,5,6,5],[4,6,4,5,6,6],[4,6,4,6,6,1],[4,6,4,6,6,2],[4,6,4,6,6,3],[4,6,4,6,6,4],[4,6,4,6,6,5],[4,6,4,6,6,6],[4,6,5,5,6,1],[4,6,5,5,6,2],[4,6,5,5,6,3],[4,6,5,5,6,4],[4,6,5,5,6,5],[4,6,5,5,6,6],[4,6,5,6,6,1],[4,6,5,6,6,2],[4,6,5,6,6,3],[4,6,5,6,6,4],[4,6,5,6,6,5],[4,6,5,6,6,6],[4,6,6,5,6,1],[4,6,6,5,6,2],[4,6,6,5,6,3],[4,6,6,5,6,4],[4,6,6,5,6,5],[4,6,6,5,6,6],[4,6,6,6,6,1],[4,6,6,6,6,2],[4,6,6,6,6,3],[4,6,6,6,6,4],[4,6,6,6,6,5],[4,6,6,6,6,6],[5,3,4,5,6,1],[5,3,4,5,6,2],[5,3,4,5,6,3],[5,3,4,5,6,4],[5,3,4,5,6,5],[5,3,4,5,6,6],[5,3,4,6,6,1],[5,3,4,6,6,2],[5,3,4,6,6,3],[5,3,4,6,6,4],[5,3,4,6,6,5],[5,3,4,6,6,6],[5,3,5,5,6,1],[5,3,5,5,6,2],[5,3,5,5,6,3],[5,3,5,5,6,4],[5,3,5,5,6,5],[5,3,5,5,6,6],[5,3,5,6,6,1],[5,3,5,6,6,2],[5,3,5,6,6,3],[5,3,5,6,6,4],[5,3,5,6,6,5],[5,3,5,6,6,6],[5,3,6,5,6,1],[5,3,6,5,6,2],[5,3,6,5,6,3],[5,3,6,5,6,4],[5,3,6,5,6,5],[5,3,6,5,6,6],[5,3,6,6,6,1],[5,3,6,6,6,2],[5,3,6,6,6,3],[5,3,6,6,6,4],[5,3,6,6,6,5],[5,3,6,6,6,6],[5,4,4,5,6,1],[5,4,4,5,6,2],[5,4,4,5,6,3],[5,4,4,5,6,4],[5,4,4,5,6,5],[5,4,4,5,6,6],[5,4,4,6,6,1],[5,4,4,6,6,2],[5,4,4,6,6,3],[5,4,4,6,6,4],[5,4,4,6,6,5],[5,4,4,6,6,6],[5,4,5,5,6,1],[5,4,5,5,6,2],[5,4,5,5,6,3],[5,4,5,5,6,4],[5,4,5,5,6,5],[5,4,5,5,6,6],[5,4,5,6,6,1],[5,4,5,6,6,2],[5,4,5,6,6,3],[5,4,5,6,6,4],[5,4,5,6,6,5],[5,4,5,6,6,6],[5,4,6,5,6,1],[5,4,6,5,6,2],[5,4,6,5,6,3],[5,4,6,5,6,4],[5,4,6,5,6,5],[5,4,6,5,6,6],[5,4,6,6,6,1],[5,4,6,6,6,2],[5,4,6,6,6,3],[5,4,6,6,6,4],[5,4,6,6,6,5],[5,4,6,6,6,6],[5,5,4,5,6,1],[5,5,4,5,6,2],[5,5,4,5,6,3],[5,5,4,5,6,4],[5,5,4,5,6,5],[5,5,4,5,6,6],[5,5,4,6,6,1],[5,5,4,6,6,2],[5,5,4,6,6,3],[5,5,4,6,6,4],[5,5,4,6,6,5],[5,5,4,6,6,6],[5,5,5,5,6,1],[5,5,5,5,6,2],[5,5,5,5,6,3],[5,5,5,5,6,4],[5,5,5,5,6,5],[5,5,5,5,6,6],[5,5,5,6,6,1],[5,5,5,6,6,2],[5,5,5,6,6,3],[5,5,5,6,6,4],[5,5,5,6,6,5],[5,5,5,6,6,6],[5,5,6,5,6,1],[5,5,6,5,6,2],[5,5,6,5,6,3],[5,5,6,5,6,4],[5,5,6,5,6,5],[5,5,6,5,6,6],[5,5,6,6,6,1],[5,5,6,6,6,2],[5,5,6,6,6,3],[5,5,6,6,6,4],[5,5,6,6,6,5],[5,5,6,6,6,6],[5,6,4,5,6,1],[5,6,4,5,6,2],[5,6,4,5,6,3],[5,6,4,5,6,4],[5,6,4,5,6,5],[5,6,4,5,6,6],[5,6,4,6,6,1],[5,6,4,6,6,2],[5,6,4,6,6,3],[5,6,4,6,6,4],[5,6,4,6,6,5],[5,6,4,6,6,6],[5,6,5,5,6,1],[5,6,5,5,6,2],[5,6,5,5,6,3],[5,6,5,5,6,4],[5,6,5,5,6,5],[5,6,5,5,6,6],[5,6,5,6,6,1],[5,6,5,6,6,2],[5,6,5,6,6,3],[5,6,5,6,6,4],[5,6,5,6,6,5],[5,6,5,6,6,6],[5,6,6,5,6,1],[5,6,6,5,6,2],[5,6,6,5,6,3],[5,6,6,5,6,4],[5,6,6,5,6,5],[5,6,6,5,6,6],[5,6,6,6,6,1],[5,6,6,6,6,2],[5,6,6,6,6,3],[5,6,6,6,6,4],[5,6,6,6,6,5],[5,6,6,6,6,6],[6,3,4,5,6,1],[6,3,4,5,6,2],[6,3,4,5,6,3],[6,3,4,5,6,4],[6,3,4,5,6,5],[6,3,4,5,6,6],[6,3,4,6,6,1],[6,3,4,6,6,2],[6,3,4,6,6,3],[6,3,4,6,6,4],[6,3,4,6,6,5],[6,3,4,6,6,6],[6,3,5,5,6,1],[6,3,5,5,6,2],[6,3,5,5,6,3],[6,3,5,5,6,4],[6,3,5,5,6,5],[6,3,5,5,6,6],[6,3,5,6,6,1],[6,3,5,6,6,2],[6,3,5,6,6,3],[6,3,5,6,6,4],[6,3,5,6,6,5],[6,3,5,6,6,6],[6,3,6,5,6,1],[6,3,6,5,6,2],[6,3,6,5,6,3],[6,3,6,5,6,4],[6,3,6,5,6,5],[6,3,6,5,6,6],[6,3,6,6,6,1],[6,3,6,6,6,2],[6,3,6,6,6,3],[6,3,6,6,6,4],[6,3,6,6,6,5],[6,3,6,6,6,6],[6,4,4,5,6,1],[6,4,4,5,6,2],[6,4,4,5,6,3],[6,4,4,5,6,4],[6,4,4,5,6,5],[6,4,4,5,6,6],[6,4,4,6,6,1],[6,4,4,6,6,2],[6,4,4,6,6,3],[6,4,4,6,6,4],[6,4,4,6,6,5],[6,4,4,6,6,6],[6,4,5,5,6,1],[6,4,5,5,6,2],[6,4,5,5,6,3],[6,4,5,5,6,4],[6,4,5,5,6,5],[6,4,5,5,6,6],[6,4,5,6,6,1],[6,4,5,6,6,2],[6,4,5,6,6,3],[6,4,5,6,6,4],[6,4,5,6,6,5],[6,4,5,6,6,6],[6,4,6,5,6,1],[6,4,6,5,6,2],[6,4,6,5,6,3],[6,4,6,5,6,4],[6,4,6,5,6,5],[6,4,6,5,6,6],[6,4,6,6,6,1],[6,4,6,6,6,2],[6,4,6,6,6,3],[6,4,6,6,6,4],[6,4,6,6,6,5],[6,4,6,6,6,6],[6,5,4,5,6,1],[6,5,4,5,6,2],[6,5,4,5,6,3],[6,5,4,5,6,4],[6,5,4,5,6,5],[6,5,4,5,6,6],[6,5,4,6,6,1],[6,5,4,6,6,2],[6,5,4,6,6,3],[6,5,4,6,6,4],[6,5,4,6,6,5],[6,5,4,6,6,6],[6,5,5,5,6,1],[6,5,5,5,6,2],[6,5,5,5,6,3],[6,5,5,5,6,4],[6,5,5,5,6,5],[6,5,5,5,6,6],[6,5,5,6,6,1],[6,5,5,6,6,2],[6,5,5,6,6,3],[6,5,5,6,6,4],[6,5,5,6,6,5],[6,5,5,6,6,6],[6,5,6,5,6,1],[6,5,6,5,6,2],[6,5,6,5,6,3],[6,5,6,5,6,4],[6,5,6,5,6,5],[6,5,6,5,6,6],[6,5,6,6,6,1],[6,5,6,6,6,2],[6,5,6,6,6,3],[6,5,6,6,6,4],[6,5,6,6,6,5],[6,5,6,6,6,6],[6,6,4,5,6,1],[6,6,4,5,6,2],[6,6,4,5,6,3],[6,6,4,5,6,4],[6,6,4,5,6,5],[6,6,4,5,6,6],[6,6,4,6,6,1],[6,6,4,6,6,2],[6,6,4,6,6,3],[6,6,4,6,6,4],[6,6,4,6,6,5],[6,6,4,6,6,6],[6,6,5,5,6,1],[6,6,5,5,6,2],[6,6,5,5,6,3],[6,6,5,5,6,4],[6,6,5,5,6,5],[6,6,5,5,6,6],[6,6,5,6,6,1],[6,6,5,6,6,2],[6,6,5,6,6,3],[6,6,5,6,6,4],[6,6,5,6,6,5],[6,6,5,6,6,6],[6,6,6,5,6,1],[6,6,6,5,6,2],[6,6,6,5,6,3],[6,6,6,5,6,4],[6,6,6,5,6,5],[6,6,6,5,6,6],[6,6,6,6,6,1],[6,6,6,6,6,2],[6,6,6,6,6,3],[6,6,6,6,6,4],[6,6,6,6,6,5],[6,6,6,6,6,6]].

test_tree3 =>
    N = 4,                                   % find all Hamilton cycles in the 
    L = new_list(N),
    L :: 1..N,
    my_tree2(L,Vs,Es),
    Sols = solve_all((L,Vs,Es)).sort(),
    Sols = [([1,2,3,4],[{1,0},{2,0},{3,0},{4,0}],[{1,2,0},{1,3,0},{1,4,0},{2,3,0},{2,4,0},{3,4,0}]),([1,2,4,3],[{1,0},{2,0},{3,1},{4,1}],[{1,2,0},{1,3,0},{1,4,0},{2,3,0},{2,4,0},{3,4,1}]),([1,3,2,4],[{1,0},{2,1},{3,1},{4,0}],[{1,2,0},{1,3,0},{1,4,0},{2,3,1},{2,4,0},{3,4,0}]),([1,4,3,2],[{1,0},{2,1},{3,0},{4,1}],[{1,2,0},{1,3,0},{1,4,0},{2,3,0},{2,4,1},{3,4,0}]),([2,1,3,4],[{1,1},{2,1},{3,0},{4,0}],[{1,2,1},{1,3,0},{1,4,0},{2,3,0},{2,4,0},{3,4,0}]),([3,2,1,4],[{1,1},{2,0},{3,1},{4,0}],[{1,2,0},{1,3,1},{1,4,0},{2,3,0},{2,4,0},{3,4,0}]),([4,2,3,1],[{1,1},{2,0},{3,0},{4,1}],[{1,2,0},{1,3,0},{1,4,1},{2,3,0},{2,4,0},{3,4,0}])].

my_tree_grid(A) =>
    NRows = len(A),
    NCols = len(A[1]),
    Vs = [{(R,C), A[R,C]} : R in 1..NRows, C in 1..NCols],
    Es = [{(R,C), (R1,C1), _} : R in 1..NRows, C in 1..NCols, (R1,C1) in neibs(A,NRows,NCols,R,C)],
    tree(Vs,Es).

my_tree1(L) =>
    N = len(L),
    L :: 1..N,
    Vs = [{I,1} : I in 1..N],
    Es = [{I,J,B} : I in 1..N, J in fd_dom(L[I]), I < J, B #<=> L[I] #= J],
    tree(Vs,Es).

my_tree2(L,Vs,Es) =>
    N = len(L),
    L :: 1..N,
    Vs = [{I,B} : I in 1..N, B #<=> L[I] #!= I],
    Es = [{I,J,B} : I in 1..N, J in fd_dom(L[I]), I < J, B #<=> L[I] #= J, B #<=>L[J] #= I],
    tree(Vs,Es).
    
test_bool_count1 =>
    Vs=[_X1,_X2,_X3,_X4],
    Vs :: 1..4,
    mycount(2,Vs,#=<,2),
    Sols = solve_all(Vs).sort(),
    Sols = [[1,1,1,1],[1,1,1,2],[1,1,1,3],[1,1,1,4],[1,1,2,1],[1,1,2,2],[1,1,2,3],[1,1,2,4],[1,1,3,1],[1,1,3,2],[1,1,3,3],[1,1,3,4],[1,1,4,1],[1,1,4,2],[1,1,4,3],[1,1,4,4],[1,2,1,1],[1,2,1,2],[1,2,1,3],[1,2,1,4],[1,2,2,1],[1,2,2,3],[1,2,2,4],[1,2,3,1],[1,2,3,2],[1,2,3,3],[1,2,3,4],[1,2,4,1],[1,2,4,2],[1,2,4,3],[1,2,4,4],[1,3,1,1],[1,3,1,2],[1,3,1,3],[1,3,1,4],[1,3,2,1],[1,3,2,2],[1,3,2,3],[1,3,2,4],[1,3,3,1],[1,3,3,2],[1,3,3,3],[1,3,3,4],[1,3,4,1],[1,3,4,2],[1,3,4,3],[1,3,4,4],[1,4,1,1],[1,4,1,2],[1,4,1,3],[1,4,1,4],[1,4,2,1],[1,4,2,2],[1,4,2,3],[1,4,2,4],[1,4,3,1],[1,4,3,2],[1,4,3,3],[1,4,3,4],[1,4,4,1],[1,4,4,2],[1,4,4,3],[1,4,4,4],[2,1,1,1],[2,1,1,2],[2,1,1,3],[2,1,1,4],[2,1,2,1],[2,1,2,3],[2,1,2,4],[2,1,3,1],[2,1,3,2],[2,1,3,3],[2,1,3,4],[2,1,4,1],[2,1,4,2],[2,1,4,3],[2,1,4,4],[2,2,1,1],[2,2,1,3],[2,2,1,4],[2,2,3,1],[2,2,3,3],[2,2,3,4],[2,2,4,1],[2,2,4,3],[2,2,4,4],[2,3,1,1],[2,3,1,2],[2,3,1,3],[2,3,1,4],[2,3,2,1],[2,3,2,3],[2,3,2,4],[2,3,3,1],[2,3,3,2],[2,3,3,3],[2,3,3,4],[2,3,4,1],[2,3,4,2],[2,3,4,3],[2,3,4,4],[2,4,1,1],[2,4,1,2],[2,4,1,3],[2,4,1,4],[2,4,2,1],[2,4,2,3],[2,4,2,4],[2,4,3,1],[2,4,3,2],[2,4,3,3],[2,4,3,4],[2,4,4,1],[2,4,4,2],[2,4,4,3],[2,4,4,4],[3,1,1,1],[3,1,1,2],[3,1,1,3],[3,1,1,4],[3,1,2,1],[3,1,2,2],[3,1,2,3],[3,1,2,4],[3,1,3,1],[3,1,3,2],[3,1,3,3],[3,1,3,4],[3,1,4,1],[3,1,4,2],[3,1,4,3],[3,1,4,4],[3,2,1,1],[3,2,1,2],[3,2,1,3],[3,2,1,4],[3,2,2,1],[3,2,2,3],[3,2,2,4],[3,2,3,1],[3,2,3,2],[3,2,3,3],[3,2,3,4],[3,2,4,1],[3,2,4,2],[3,2,4,3],[3,2,4,4],[3,3,1,1],[3,3,1,2],[3,3,1,3],[3,3,1,4],[3,3,2,1],[3,3,2,2],[3,3,2,3],[3,3,2,4],[3,3,3,1],[3,3,3,2],[3,3,3,3],[3,3,3,4],[3,3,4,1],[3,3,4,2],[3,3,4,3],[3,3,4,4],[3,4,1,1],[3,4,1,2],[3,4,1,3],[3,4,1,4],[3,4,2,1],[3,4,2,2],[3,4,2,3],[3,4,2,4],[3,4,3,1],[3,4,3,2],[3,4,3,3],[3,4,3,4],[3,4,4,1],[3,4,4,2],[3,4,4,3],[3,4,4,4],[4,1,1,1],[4,1,1,2],[4,1,1,3],[4,1,1,4],[4,1,2,1],[4,1,2,2],[4,1,2,3],[4,1,2,4],[4,1,3,1],[4,1,3,2],[4,1,3,3],[4,1,3,4],[4,1,4,1],[4,1,4,2],[4,1,4,3],[4,1,4,4],[4,2,1,1],[4,2,1,2],[4,2,1,3],[4,2,1,4],[4,2,2,1],[4,2,2,3],[4,2,2,4],[4,2,3,1],[4,2,3,2],[4,2,3,3],[4,2,3,4],[4,2,4,1],[4,2,4,2],[4,2,4,3],[4,2,4,4],[4,3,1,1],[4,3,1,2],[4,3,1,3],[4,3,1,4],[4,3,2,1],[4,3,2,2],[4,3,2,3],[4,3,2,4],[4,3,3,1],[4,3,3,2],[4,3,3,3],[4,3,3,4],[4,3,4,1],[4,3,4,2],[4,3,4,3],[4,3,4,4],[4,4,1,1],[4,4,1,2],[4,4,1,3],[4,4,1,4],[4,4,2,1],[4,4,2,2],[4,4,2,3],[4,4,2,4],[4,4,3,1],[4,4,3,2],[4,4,3,3],[4,4,3,4],[4,4,4,1],[4,4,4,2],[4,4,4,3],[4,4,4,4]].

test_bool_count2 =>
    Vs=[_X1,_X2,_X3,_X4],
    Vs :: 1..4,
    mycount(2,Vs,#<,2),
    Sols = solve_all(Vs).sort(),
    Sols = [[1,1,1,1],[1,1,1,2],[1,1,1,3],[1,1,1,4],[1,1,2,1],[1,1,2,3],[1,1,2,4],[1,1,3,1],[1,1,3,2],[1,1,3,3],[1,1,3,4],[1,1,4,1],[1,1,4,2],[1,1,4,3],[1,1,4,4],[1,2,1,1],[1,2,1,3],[1,2,1,4],[1,2,3,1],[1,2,3,3],[1,2,3,4],[1,2,4,1],[1,2,4,3],[1,2,4,4],[1,3,1,1],[1,3,1,2],[1,3,1,3],[1,3,1,4],[1,3,2,1],[1,3,2,3],[1,3,2,4],[1,3,3,1],[1,3,3,2],[1,3,3,3],[1,3,3,4],[1,3,4,1],[1,3,4,2],[1,3,4,3],[1,3,4,4],[1,4,1,1],[1,4,1,2],[1,4,1,3],[1,4,1,4],[1,4,2,1],[1,4,2,3],[1,4,2,4],[1,4,3,1],[1,4,3,2],[1,4,3,3],[1,4,3,4],[1,4,4,1],[1,4,4,2],[1,4,4,3],[1,4,4,4],[2,1,1,1],[2,1,1,3],[2,1,1,4],[2,1,3,1],[2,1,3,3],[2,1,3,4],[2,1,4,1],[2,1,4,3],[2,1,4,4],[2,3,1,1],[2,3,1,3],[2,3,1,4],[2,3,3,1],[2,3,3,3],[2,3,3,4],[2,3,4,1],[2,3,4,3],[2,3,4,4],[2,4,1,1],[2,4,1,3],[2,4,1,4],[2,4,3,1],[2,4,3,3],[2,4,3,4],[2,4,4,1],[2,4,4,3],[2,4,4,4],[3,1,1,1],[3,1,1,2],[3,1,1,3],[3,1,1,4],[3,1,2,1],[3,1,2,3],[3,1,2,4],[3,1,3,1],[3,1,3,2],[3,1,3,3],[3,1,3,4],[3,1,4,1],[3,1,4,2],[3,1,4,3],[3,1,4,4],[3,2,1,1],[3,2,1,3],[3,2,1,4],[3,2,3,1],[3,2,3,3],[3,2,3,4],[3,2,4,1],[3,2,4,3],[3,2,4,4],[3,3,1,1],[3,3,1,2],[3,3,1,3],[3,3,1,4],[3,3,2,1],[3,3,2,3],[3,3,2,4],[3,3,3,1],[3,3,3,2],[3,3,3,3],[3,3,3,4],[3,3,4,1],[3,3,4,2],[3,3,4,3],[3,3,4,4],[3,4,1,1],[3,4,1,2],[3,4,1,3],[3,4,1,4],[3,4,2,1],[3,4,2,3],[3,4,2,4],[3,4,3,1],[3,4,3,2],[3,4,3,3],[3,4,3,4],[3,4,4,1],[3,4,4,2],[3,4,4,3],[3,4,4,4],[4,1,1,1],[4,1,1,2],[4,1,1,3],[4,1,1,4],[4,1,2,1],[4,1,2,3],[4,1,2,4],[4,1,3,1],[4,1,3,2],[4,1,3,3],[4,1,3,4],[4,1,4,1],[4,1,4,2],[4,1,4,3],[4,1,4,4],[4,2,1,1],[4,2,1,3],[4,2,1,4],[4,2,3,1],[4,2,3,3],[4,2,3,4],[4,2,4,1],[4,2,4,3],[4,2,4,4],[4,3,1,1],[4,3,1,2],[4,3,1,3],[4,3,1,4],[4,3,2,1],[4,3,2,3],[4,3,2,4],[4,3,3,1],[4,3,3,2],[4,3,3,3],[4,3,3,4],[4,3,4,1],[4,3,4,2],[4,3,4,3],[4,3,4,4],[4,4,1,1],[4,4,1,2],[4,4,1,3],[4,4,1,4],[4,4,2,1],[4,4,2,3],[4,4,2,4],[4,4,3,1],[4,4,3,2],[4,4,3,3],[4,4,3,4],[4,4,4,1],[4,4,4,2],[4,4,4,3],[4,4,4,4]].
    
test_bool_count3 =>
    Vs=[_X1,_X2,_X3,_X4],
    Vs :: 1..4,
    mycount(2,Vs,#>=,2),
    Sols = solve_all(Vs).sort(),
    Sols = [[1,1,2,2],[1,2,1,2],[1,2,2,1],[1,2,2,2],[1,2,2,3],[1,2,2,4],[1,2,3,2],[1,2,4,2],[1,3,2,2],[1,4,2,2],[2,1,1,2],[2,1,2,1],[2,1,2,2],[2,1,2,3],[2,1,2,4],[2,1,3,2],[2,1,4,2],[2,2,1,1],[2,2,1,2],[2,2,1,3],[2,2,1,4],[2,2,2,1],[2,2,2,2],[2,2,2,3],[2,2,2,4],[2,2,3,1],[2,2,3,2],[2,2,3,3],[2,2,3,4],[2,2,4,1],[2,2,4,2],[2,2,4,3],[2,2,4,4],[2,3,1,2],[2,3,2,1],[2,3,2,2],[2,3,2,3],[2,3,2,4],[2,3,3,2],[2,3,4,2],[2,4,1,2],[2,4,2,1],[2,4,2,2],[2,4,2,3],[2,4,2,4],[2,4,3,2],[2,4,4,2],[3,1,2,2],[3,2,1,2],[3,2,2,1],[3,2,2,2],[3,2,2,3],[3,2,2,4],[3,2,3,2],[3,2,4,2],[3,3,2,2],[3,4,2,2],[4,1,2,2],[4,2,1,2],[4,2,2,1],[4,2,2,2],[4,2,2,3],[4,2,2,4],[4,2,3,2],[4,2,4,2],[4,3,2,2],[4,4,2,2]].

test_bool_count4 =>
    Vs=[_X1,_X2,_X3,_X4],
    Vs :: 1..4,
    mycount(2,Vs,#>,2),
    Sols = solve_all(Vs).sort(),
    Sols = [[1,2,2,2],[2,1,2,2],[2,2,1,2],[2,2,2,1],[2,2,2,2],[2,2,2,3],[2,2,2,4],[2,2,3,2],[2,2,4,2],[2,3,2,2],[2,4,2,2],[3,2,2,2],[4,2,2,2]].

test_bool_count5 =>
    Vs=[_X1,_X2,_X3,_X4],
    Vs :: 1..4,
    mycount(2,Vs,#=,2),
    Sols = solve_all(Vs).sort(),
    Sols = [[1,1,2,2],[1,2,1,2],[1,2,2,1],[1,2,2,3],[1,2,2,4],[1,2,3,2],[1,2,4,2],[1,3,2,2],[1,4,2,2],[2,1,1,2],[2,1,2,1],[2,1,2,3],[2,1,2,4],[2,1,3,2],[2,1,4,2],[2,2,1,1],[2,2,1,3],[2,2,1,4],[2,2,3,1],[2,2,3,3],[2,2,3,4],[2,2,4,1],[2,2,4,3],[2,2,4,4],[2,3,1,2],[2,3,2,1],[2,3,2,3],[2,3,2,4],[2,3,3,2],[2,3,4,2],[2,4,1,2],[2,4,2,1],[2,4,2,3],[2,4,2,4],[2,4,3,2],[2,4,4,2],[3,1,2,2],[3,2,1,2],[3,2,2,1],[3,2,2,3],[3,2,2,4],[3,2,3,2],[3,2,4,2],[3,3,2,2],[3,4,2,2],[4,1,2,2],[4,2,1,2],[4,2,2,1],[4,2,2,3],[4,2,2,4],[4,2,3,2],[4,2,4,2],[4,3,2,2],[4,4,2,2]].
    
test_bool_count6 =>
    Vs=[_X1,_X2,_X3,_X4],
    Vs :: 1..4,
    mycount(2,Vs,#!=,2),
    Sols = solve_all(Vs).sort(),
    Sols = [[1,1,1,1],[1,1,1,2],[1,1,1,3],[1,1,1,4],[1,1,2,1],[1,1,2,3],[1,1,2,4],[1,1,3,1],[1,1,3,2],[1,1,3,3],[1,1,3,4],[1,1,4,1],[1,1,4,2],[1,1,4,3],[1,1,4,4],[1,2,1,1],[1,2,1,3],[1,2,1,4],[1,2,2,2],[1,2,3,1],[1,2,3,3],[1,2,3,4],[1,2,4,1],[1,2,4,3],[1,2,4,4],[1,3,1,1],[1,3,1,2],[1,3,1,3],[1,3,1,4],[1,3,2,1],[1,3,2,3],[1,3,2,4],[1,3,3,1],[1,3,3,2],[1,3,3,3],[1,3,3,4],[1,3,4,1],[1,3,4,2],[1,3,4,3],[1,3,4,4],[1,4,1,1],[1,4,1,2],[1,4,1,3],[1,4,1,4],[1,4,2,1],[1,4,2,3],[1,4,2,4],[1,4,3,1],[1,4,3,2],[1,4,3,3],[1,4,3,4],[1,4,4,1],[1,4,4,2],[1,4,4,3],[1,4,4,4],[2,1,1,1],[2,1,1,3],[2,1,1,4],[2,1,2,2],[2,1,3,1],[2,1,3,3],[2,1,3,4],[2,1,4,1],[2,1,4,3],[2,1,4,4],[2,2,1,2],[2,2,2,1],[2,2,2,2],[2,2,2,3],[2,2,2,4],[2,2,3,2],[2,2,4,2],[2,3,1,1],[2,3,1,3],[2,3,1,4],[2,3,2,2],[2,3,3,1],[2,3,3,3],[2,3,3,4],[2,3,4,1],[2,3,4,3],[2,3,4,4],[2,4,1,1],[2,4,1,3],[2,4,1,4],[2,4,2,2],[2,4,3,1],[2,4,3,3],[2,4,3,4],[2,4,4,1],[2,4,4,3],[2,4,4,4],[3,1,1,1],[3,1,1,2],[3,1,1,3],[3,1,1,4],[3,1,2,1],[3,1,2,3],[3,1,2,4],[3,1,3,1],[3,1,3,2],[3,1,3,3],[3,1,3,4],[3,1,4,1],[3,1,4,2],[3,1,4,3],[3,1,4,4],[3,2,1,1],[3,2,1,3],[3,2,1,4],[3,2,2,2],[3,2,3,1],[3,2,3,3],[3,2,3,4],[3,2,4,1],[3,2,4,3],[3,2,4,4],[3,3,1,1],[3,3,1,2],[3,3,1,3],[3,3,1,4],[3,3,2,1],[3,3,2,3],[3,3,2,4],[3,3,3,1],[3,3,3,2],[3,3,3,3],[3,3,3,4],[3,3,4,1],[3,3,4,2],[3,3,4,3],[3,3,4,4],[3,4,1,1],[3,4,1,2],[3,4,1,3],[3,4,1,4],[3,4,2,1],[3,4,2,3],[3,4,2,4],[3,4,3,1],[3,4,3,2],[3,4,3,3],[3,4,3,4],[3,4,4,1],[3,4,4,2],[3,4,4,3],[3,4,4,4],[4,1,1,1],[4,1,1,2],[4,1,1,3],[4,1,1,4],[4,1,2,1],[4,1,2,3],[4,1,2,4],[4,1,3,1],[4,1,3,2],[4,1,3,3],[4,1,3,4],[4,1,4,1],[4,1,4,2],[4,1,4,3],[4,1,4,4],[4,2,1,1],[4,2,1,3],[4,2,1,4],[4,2,2,2],[4,2,3,1],[4,2,3,3],[4,2,3,4],[4,2,4,1],[4,2,4,3],[4,2,4,4],[4,3,1,1],[4,3,1,2],[4,3,1,3],[4,3,1,4],[4,3,2,1],[4,3,2,3],[4,3,2,4],[4,3,3,1],[4,3,3,2],[4,3,3,3],[4,3,3,4],[4,3,4,1],[4,3,4,2],[4,3,4,3],[4,3,4,4],[4,4,1,1],[4,4,1,2],[4,4,1,3],[4,4,1,4],[4,4,2,1],[4,4,2,3],[4,4,2,4],[4,4,3,1],[4,4,3,2],[4,4,3,3],[4,4,3,4],[4,4,4,1],[4,4,4,2],[4,4,4,3],[4,4,4,4]].

mycount(V,L,Rel,N) =>
   sum([V #= E : E in L]) #= Count,
   call(Rel,Count,N).

test_subcircuit =>
    L = new_list(5),
    L :: 1..5,
    bp.fd_set_false(L[3],3),
    subcircuit(L),
    Sols = solve_all(L).sort(),
    Sols = [[1,2,4,3,5],[1,2,4,5,3],[1,2,5,3,4],[1,2,5,4,3],[1,3,2,4,5],[1,3,4,2,5],[1,3,4,5,2],[1,3,5,2,4],[1,3,5,4,2],[1,4,2,3,5],[1,4,2,5,3],[1,4,5,3,2],[1,5,2,3,4],[1,5,2,4,3],[1,5,4,2,3],[2,3,1,4,5],[2,3,4,1,5],[2,3,4,5,1],[2,3,5,1,4],[2,3,5,4,1],[2,4,1,3,5],[2,4,1,5,3],[2,4,5,3,1],[2,5,1,3,4],[2,5,1,4,3],[2,5,4,1,3],[3,1,2,4,5],[3,1,4,2,5],[3,1,4,5,2],[3,1,5,2,4],[3,1,5,4,2],[3,2,1,4,5],[3,2,4,1,5],[3,2,4,5,1],[3,2,5,1,4],[3,2,5,4,1],[3,4,2,1,5],[3,4,2,5,1],[3,4,5,1,2],[3,5,2,1,4],[3,5,2,4,1],[3,5,4,2,1],[4,1,2,3,5],[4,1,2,5,3],[4,1,5,3,2],[4,2,1,3,5],[4,2,1,5,3],[4,2,5,3,1],[4,3,1,2,5],[4,3,1,5,2],[4,3,5,2,1],[4,5,1,2,3],[4,5,2,3,1],[5,1,2,3,4],[5,1,2,4,3],[5,1,4,2,3],[5,2,1,3,4],[5,2,1,4,3],[5,2,4,1,3],[5,3,1,2,4],[5,3,1,4,2],[5,3,4,1,2],[5,4,1,3,2],[5,4,2,1,3]].
            

test_tablein1 =>
    table_in({X,Y,Z},[{0,1,1}]),
    Sols = solve_all((X,Y,Z)).sort(),
    Sols = [(0,1,1)].
    
test_tablein2 =>
    table_in({X,Y,Z},[{0,1,1},
                      {1,0,1},
                      {1,1,0}]),
    Sols = solve_all((X,Y,Z)).sort(),
    Sols = [(0,1,1),(1,0,1),(1,1,0)].

test_tablein3 =>
    X :: 0..2,
    Y :: 0..2,
    Z :: 1..2,
    table_in({X,Y,Z}, [{0,1,0},{0,2,2},{1,0,0},{1,2,1},{2,0,2},{2,1,1}]),
    Sols = solve_all((X,Y,Z)).sort(),
    Sols = [(0,2,2),(1,2,1),(2,0,2),(2,1,1)].

    
test_tablein4 =>
    X = 1,
    Y = 1,
    Z :: -1..2,    
    table_in({X,Y,Z},['{}'(1,1,-1),'{}'(1,1,2),'{}'(0,1,0),'{}'(0,2,2),'{}'(1,0,0),'{}'(1,2,1),'{}'(2,0,2),'{}'(2,1,1)]),
    Sols = solve_all((X,Y,Z)).sort(),
    Sols = [(1,1,-1),(1,1,2)].

test_tablein5 =>
    table_in({X,Y,Z},['{}'(-1,-1,-1),'{}'(-1,-1,-2),'{}'(-1,-2,-1),'{}'(-2,-1,-1)]),
    Sols = solve_all((X,Y,Z)).sort(),
    Sols = [(-2,-1,-1),(-1,-2,-1),(-1,-1,-2),(-1,-1,-1)].

test_tablein6 =>
    table_in({X,Y,Z},['{}'(1,1,-1),
                      '{}'(88888,88888,99999),
                      '{}'(88888,88888,88888),
                        '{}'(99999,88888,88888),
                      '{}'(99999,99999,-1)]),
    Sols = solve_all((X,Y,Z)).sort(),
    Sols = [(1,1,-1),(88888,88888,88888),(88888,88888,99999),(99999,88888,88888),(99999,99999,-1)].

test_tablein7 =>
    [X,Y] :: 0..6,
    table_in({X,Y},[{1,1},
                    {2,2},
                    {3,3},
                    {4,4},
                    {5,5},
                    {6,6}]),
    Sols = solve_all((X,Y)).sort(),
    Sols = [(1,1),(2,2),(3,3),(4,4),(5,5),(6,6)].

test_table_notin1 =>
    table_in({X,Y,Z},[{1,0,0},{0,1,1}]),
    table_notin({X,Y,Z},[{1,0,0},{0,2,2},{-1,-1,-1}]),
    Sols = solve_all((X,Y,Z)).sort(),
    Sols = [(0,1,1)].
    
test_table_notin2 =>
    table_in({X,Y,Z},[{0,1,1},
                      {1,0,1},
                      {1,1,0}]),
    table_notin({X,Y,Z},[{0,1,1},{-1,-1,-2}]),                      
    Sols = solve_all((X,Y,Z)).sort(),
    Sols = [(1,0,1),(1,1,0)].
    
test_table_notin3 =>
    X :: 0..2,
    Y :: 0..2,
    Z :: 1..2,
    table_in({X,Y,Z}, [{0,1,0},{0,2,2},{1,0,0},{1,2,1},{2,0,2},{2,1,1}]),
    table_notin({X,Y,Z}, [{0,1,0},{0,0,0},{1,1,1}]),
    Sols = solve_all((X,Y,Z)).sort(),
    Sols = [(0,2,2),(1,2,1),(2,0,2),(2,1,1)].
    
test_table_notin4 =>
    X = 1,
    Y = 1,
    Z :: -1..2,    
    table_in({X,Y,Z},['{}'(1,1,-1),'{}'(1,1,2),'{}'(0,1,0),'{}'(0,2,2),'{}'(1,0,0),'{}'(1,2,1),'{}'(2,0,2),'{}'(2,1,1)]),
    table_notin({X,Y,Z},[{1,1,-1},{2,1,1}]),
    Sols = solve_all((X,Y,Z)).sort(),
    Sols = [(1,1,2)].

test_table_notin5 =>
    table_in({X,Y,Z},['{}'(-1,-1,-1),'{}'(-1,-1,-2),'{}'(-1,-2,-1),'{}'(-2,-1,-1)]),
    table_notin({X,Y,Z},[{-1,-1,-1},{-2,-2,-2}]),
    Sols = solve_all((X,Y,Z)).sort(),
    Sols = [(-2,-1,-1),(-1,-2,-1),(-1,-1,-2)].


test_table_notin6 =>
    table_in({X,Y,Z},['{}'(1,1,-1),
                      '{}'(88888,88888,99999),
                      '{}'(88888,88888,88888),
                        '{}'(99999,88888,88888),
                      '{}'(99999,99999,-1)]),
    table_notin({X,Y,Z},[{1,1,-1}, {99999,99999,-1}]),
    Sols = solve_all((X,Y,Z)).sort(),
    Sols = [(88888,88888,88888),(88888,88888,99999),(99999,88888,88888)].

test_domain1 =>
    X :: 0..7,
    Sols = solve_all(X).sort(),
    Sols = [0,1,2,3,4,5,6,7].

test_domain2 =>
    X :: 0..6,
    Sols = solve_all(X).sort(),
    Sols = [0,1,2,3,4,5,6].

test_domain3 =>
    X :: 0..8,
    Sols = solve_all(X).sort(),
    Sols = [0,1,2,3,4,5,6,7,8].

test_domain4 =>

        X :: -1..7,
    Sols = solve_all(X).sort(),
    Sols = [-1,0,1,2,3,4,5,6,7].

test_domain5 =>
    X :: 2..7,
    Sols = solve_all(X).sort(),
    Sols = [2,3,4,5,6,7].

tests(Ps) =>
    Ps = [
    test_domain1,
    test_domain2,
    test_domain3,
    test_domain4,
    test_domain5,
    test_global_cardinality,
    test_global_cardinality1,
    test_global_cardinality2,
    test_global_cardinality3,
    test_global_cardinality4,
    test_count1,
    test_count2,
    test_bin_packing_load,
    test_bin_packing,
    test_argmax,
    test_at_most,
    test_alldiff_except_0,
    test_reif_le_ge,
    test_reif_le_eq,
    test_reif_ge_eq,
    test_ge,
    test_gt,
    test_reif_gt2,
    test_reif_eq,
    test_reif_eq2,
    test_reif_bool_clause,
    test_min,
    test_min2,    
    test_max,
    test_max2,    
    test_adder,
    test_element,
    test_element0,
    test_hcp1,
    test_hcp2,
    test_hcp3,
    test_hcp4,
    test_amo,
    test_amt,
    test_bool_add,
    test_imp,
    test_imp2,
    test_imp3,
    test_imp4,
    test_eq,                                        
    test_inc,
    test_neq,
    test_mul,
    test_mul2,
    test_lex1,
    test_lex2,
    test_lex3,
    test_lex4,
    test_lex5,
    test_lex6,
    test_lex7,
    test_lex8,
    test_reif_ge1,
    test_reif_ge2,
    test_reif_ge3,
    test_reif_ge4,
    test_reif_ge5,
    test_reif_ge6,
    test_reif_ge7,
    test_reif_ge8,
    test_reif_ge9,
    test_reif_ge10,
    test_imp_ge5,
    test_imp_ge6,
    test_imp_ge7,
    test_imp_ge8,
    test_imp_ge9,
    test_imp_ge10,
    test_nonlinear1,
    test_nonlinear2,
    test_nonlinear3,
    test_nonlinear4,
    test_nonlinear5,
    test_nonlinear6,
    test_nonlinear7,
    test_nonlinear8,
    test_nonlinear9,
    test_diffn_1,
    test_diffn_2,    
    test_div,
    test_div2,    
    test_mod,
    test_mod2,            
    test_reif1,  % 7.47
    test_reif2, % 6.81
    test_reif3,  % 8.82
    test_reif4,  % 
    test_scc,
    test_scc_grid,
    test_bool_card,
    test_cum1,
    test_cum2,
    test_cum3,
    test_cum4,
    test_cum5,
    test_circuit_bj,
    test_circuit_zinc,
    test_table_in,
    test_diffn1,
    test_diffn2,
    test_element1,
    test_element2,
    test_notin1,
    test_notin2,
    test_notin3,
    test_pb1,
    test_pb2,
    test_pb3,
    test_pb4,
    test_pb5,
    test_pb6,
    test_pb7,
    test_pb8,
    test_pb9,
    test_pb10,
    test_pb11,
    test_pb12,
    test_pb13,
    test_pb14,
    test_pb15,
    test_tree1,
    test_tree2,
    test_tree3,
    test_bool_count1,
    test_bool_count2,
    test_bool_count3,
    test_bool_count4,
    test_bool_count5,
    test_bool_count6,
    test_subcircuit,
    test_tablein1,
    test_tablein2,
    test_tablein3,
    test_tablein4,
    test_tablein5,
    test_tablein6,
    test_tablein7,
    test_table_notin1,
    test_table_notin2,
    test_table_notin3,
    test_table_notin4,
    test_table_notin5,
    test_table_notin6,
    test_reif_bool_eq,
    test_reif_bool_eq2].
         

visualize_grid(NRows,NCols,(Vs,Es)) =>
    println(Vs),
    foreach ({V1,V2,1} in Es)
        print([V1,V2])
    end,
    nl,
    foreach (R in 1..NRows-1)
        visualize_row_h(R,NCols,Vs,Es),nl,
        visualize_row_v(R,NCols,Vs,Es),nl
    end,
    visualize_row_h(NRows,NCols,Vs,Es),nl.

visualize_row_h(R,NCols,Vs,Es) =>
    foreach (C in 1..NCols-1)
        visualize_vertex(R,C,Vs,Es),
        visualize_h_edge(R,C,Vs,Es)
    end,
    visualize_vertex(R,NCols,Vs,Es).

visualize_row_v(R,NCols,Vs,Es) =>
    foreach (C in 1..NCols)
        visualize_v_edge(R,C,Vs,Es),
        print("   ")
    end.
    
visualize_vertex(R,C,Vs,Es) =>
    if member({(R,C),1}, Vs) then
        print(" * ")
    else
        print("   ")
    end.

visualize_h_edge(R,C,Vs,Es) =>
    if member({(R,C),(R,C+1),1}, Es) then
        print(" > ")
    elseif member({(R,C+1),(R,C),1}, Es) then
        print(" < ")
    else
        print("   ")
    end.

visualize_v_edge(R,C,Vs,Es) =>
    if member({(R,C),(R+1,C),1}, Es) then
        print(" v ")
    elseif member({(R+1,C),(R,C),1}, Es) then
        print(" ^ ")
    else
        print("   ")
    end.
    